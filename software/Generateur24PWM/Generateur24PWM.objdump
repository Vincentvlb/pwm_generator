
Generateur24PWM.elf:     file format elf32-littlenios2
Generateur24PWM.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001261c memsz 0x0001261c flags r-x
    LOAD off    0x0001363c vaddr 0x0001263c paddr 0x00014250 align 2**12
         filesz 0x00001c14 memsz 0x00001c14 flags rw-
    LOAD off    0x00015e64 vaddr 0x00015e64 paddr 0x00015e64 align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011e2c  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005e0  0001205c  0001205c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c14  0001263c  00014250  0001363c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  00015e64  00015e64  00015e64  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  00015fcc  00015fcc  00015250  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00015250  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001030  00000000  00000000  00015278  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026022  00000000  00000000  000162a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009ba4  00000000  00000000  0003c2ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c2ba  00000000  00000000  00045e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000263c  00000000  00000000  00052128  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003f7c  00000000  00000000  00054764  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000179b1  00000000  00000000  000586e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00070094  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001900  00000000  00000000  000700d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007508a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000007  00000000  00000000  0007508d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00075094  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00075095  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000008  00000000  00000000  00075096  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000008  00000000  00000000  0007509e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000003  00000000  00000000  000750a6  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  000750a9  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001a  00000000  00000000  000750bb  2**0
                  CONTENTS, READONLY
 26 .jdi          000042df  00000000  00000000  000750d5  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007497d  00000000  00000000  000793b4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
0001205c l    d  .rodata	00000000 .rodata
0001263c l    d  .rwdata	00000000 .rwdata
00015e64 l    d  .bss	00000000 .bss
00015fcc l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Generateur24PWM_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 control_lcd.c
00000000 l    df *ABS*	00000000 control_led.c
00000000 l    df *ABS*	00000000 generateur_pwm.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 interrupt.c
00000000 l    df *ABS*	00000000 module_pwm.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0001263c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 vfprintf.c
000120f6 l     O .rodata	00000010 zeroes.4404
000044d8 l     F .text	000000bc __sbprintf
00012106 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000046e8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006240 l     F .text	00000008 __fp_unlock
00006254 l     F .text	0000019c __sinit.part.1
000063f0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00012e88 l     O .rwdata	00000020 lc_ctype_charset
00012e68 l     O .rwdata	00000020 lc_message_charset
00012ea8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00012134 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000090fc l     F .text	000000fc __sprint_r.part.0
00012258 l     O .rodata	00000010 zeroes.4349
0000a738 l     F .text	000000bc __sbprintf
00012268 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e758 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e86c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e898 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000ea7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000eb64 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000ec50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000ee2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014238 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000f0a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f1dc l     F .text	00000034 alt_dev_reg
00013088 l     O .rwdata	00001060 JtagUART
000140e8 l     O .rwdata	00000120 LCD
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f4fc l     F .text	0000020c altera_avalon_jtag_uart_irq
0000f708 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0001423c l     O .rwdata	00000004 colstart
0000fd40 l     F .text	000000b8 lcd_write_command
0000fdf8 l     F .text	000000d8 lcd_write_data
0000fed0 l     F .text	000000e8 lcd_clear_screen
0000ffb8 l     F .text	00000228 lcd_repaint_screen
000101e0 l     F .text	000000e8 lcd_scroll_up
000102c8 l     F .text	000002c4 lcd_handle_escape
00010aac l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00010cec l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010f2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011338 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00011498 l     F .text	0000003c alt_get_errno
000114d4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
000124ba l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015e94 g     O .bss	00000004 alt_instruction_exception_handler
000086fc g     F .text	00000074 _mprec_log10
000087e8 g     F .text	0000008c __any_on
0000acec g     F .text	00000054 _isatty_r
00012140 g     O .rodata	00000028 __mprec_tinytens
0000ed68 g     F .text	0000007c alt_main
00015ecc g     O .bss	00000100 alt_irq
0000ad40 g     F .text	00000060 _lseek_r
00000d44 g     F .text	0000023c lcd_refresh_interrupt
00014250 g       *ABS*	00000000 __flash_rwdata_start
0000d130 g     F .text	00000088 .hidden __eqdf2
00015fcc g       *ABS*	00000000 __alt_heap_start
00002150 g     F .text	0000003c printf
0000af58 g     F .text	0000009c _wcrtomb_r
00008f24 g     F .text	0000005c __sseek
000065a0 g     F .text	00000010 __sinit
0000ae00 g     F .text	00000140 __swbuf_r
00007074 g     F .text	0000007c _setlocale_r
000003e0 g     F .text	000000c0 pwm_data_init
000063f8 g     F .text	00000078 __sfmoreglue
0000034c g     F .text	0000002c disable_all_led
0000ee08 g     F .text	00000024 __malloc_unlock
00015e90 g     O .bss	00000004 altera_avalon_timer_ts_freq
00007538 g     F .text	0000015c memmove
00006588 g     F .text	00000018 _cleanup
000077bc g     F .text	000000a8 _Balloc
0000d1b8 g     F .text	000000dc .hidden __gtdf2
000118f0 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000ac90 g     F .text	0000005c _fstat_r
00015e70 g     O .bss	00000004 errno
00008ea0 g     F .text	00000008 __seofread
000002f4 g     F .text	00000058 disable_led
00015e84 g     O .bss	00000004 alt_argv
0001c208 g       *ABS*	00000000 _gp
000118c0 g     F .text	00000030 usleep
00012f08 g     O .rwdata	00000180 alt_fd_list
00011a6c g     F .text	00000090 alt_find_dev
000073f0 g     F .text	00000148 memcpy
00006248 g     F .text	0000000c _cleanup_r
0000e570 g     F .text	000000dc .hidden __floatsidf
0001141c g     F .text	0000007c alt_io_redirect
0000d294 g     F .text	000000f4 .hidden __ltdf2
0001205c g       *ABS*	00000000 __DTOR_END__
0001129c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00008dd8 g     F .text	00000074 __fpclassifyd
00008658 g     F .text	000000a4 __ratio
0000a71c g     F .text	0000001c __vfiprintf_internal
0000f900 g     F .text	0000021c altera_avalon_jtag_uart_read
000018ec g     F .text	00000014 malloc
00002120 g     F .text	00000030 _printf_r
0000bdf8 g     F .text	00000064 .hidden __udivsi3
0000eab8 g     F .text	000000ac isatty
00012190 g     O .rodata	000000c8 __mprec_tens
000070f0 g     F .text	0000000c __locale_charset
00015e6c g     O .bss	00000004 __malloc_top_pad
00014218 g     O .rwdata	00000004 __mb_cur_max
00007120 g     F .text	0000000c _localeconv_r
00007bf0 g     F .text	0000003c __i2b
00006a24 g     F .text	000004c8 __sfvwrite_r
0000218c g     F .text	00000054 _sbrk_r
0000ada0 g     F .text	00000060 _read_r
00014230 g     O .rwdata	00000004 alt_max_fd
0000a984 g     F .text	000000f0 _fclose_r
00006210 g     F .text	00000030 fflush
00015e68 g     O .bss	00000004 __malloc_max_sbrked_mem
0000beb4 g     F .text	000008ac .hidden __adddf3
00008400 g     F .text	0000010c __b2d
0000b73c g     F .text	000005c4 .hidden __umoddi3
0000ec8c g     F .text	000000dc lseek
00014208 g     O .rwdata	00000004 _global_impure_ptr
00008874 g     F .text	00000564 _realloc_r
00015fcc g       *ABS*	00000000 __bss_end
0000e98c g     F .text	000000f0 alt_iic_isr_register
00000378 g     F .text	0000002c enable_all_led
000117b8 g     F .text	00000108 alt_tick
0000b140 g     F .text	000005fc .hidden __udivdi3
0000abec g     F .text	00000024 _fputwc_r
000002a0 g     F .text	00000054 enable_led
00012168 g     O .rodata	00000028 __mprec_bigtens
000079d4 g     F .text	00000104 __s2b
0000e64c g     F .text	000000a8 .hidden __floatunsidf
00008140 g     F .text	00000060 __mcmp
00001544 g     F .text	00000064 apply_t_on_on_channel
000065c0 g     F .text	00000018 __fp_lock_all
00011250 g     F .text	0000004c alt_ic_irq_enabled
0001171c g     F .text	0000009c alt_alarm_stop
00015e98 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012ee0 g     O .rwdata	00000028 alt_dev_null
00010f0c g     F .text	00000020 alt_dcache_flush_all
00007ad8 g     F .text	00000068 __hi0bits
0000e4f0 g     F .text	00000080 .hidden __fixdfsi
00014250 g       *ABS*	00000000 __ram_rwdata_end
00014228 g     O .rwdata	00000008 alt_dev_list
0000f0dc g     F .text	00000100 write
0001263c g       *ABS*	00000000 __ram_rodata_end
0000e8d4 g     F .text	000000b8 fstat
0000d294 g     F .text	000000f4 .hidden __ledf2
00000f80 g     F .text	0000007c switch_settings_interrupt
00007eb8 g     F .text	00000140 __pow5mult
00009210 g     F .text	0000150c ___vfiprintf_internal_r
00015e7c g     O .bss	00000004 __nlocale_changed
0000be5c g     F .text	00000058 .hidden __umodsi3
00015fcc g       *ABS*	00000000 end
0001058c g     F .text	00000520 altera_avalon_lcd_16207_write
0000f43c g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0001205c g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
00010d64 g     F .text	0000007c alt_avalon_timer_sc_init
0000e6f4 g     F .text	00000064 .hidden __clzsi2
0000fb1c g     F .text	00000224 altera_avalon_jtag_uart_write
000065b0 g     F .text	00000004 __sfp_lock_acquire
0000730c g     F .text	000000e4 memchr
000021e0 g     F .text	000022dc ___vfprintf_internal_r
00006714 g     F .text	00000310 _free_r
000070fc g     F .text	00000010 __locale_mb_cur_max
00011ea8 g     F .text	00000180 __call_exitprocs
000015a8 g     F .text	00000100 enable_pwm_channel
00015e78 g     O .bss	00000004 __mlocale_changed
00014210 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00015e9c g     O .bss	00000004 _alt_tick_rate
00007ff8 g     F .text	00000148 __lshift
00015ea0 g     O .bss	00000004 _alt_nticks
0000ee68 g     F .text	00000104 read
0000f248 g     F .text	00000090 alt_sys_init
00011d90 g     F .text	00000118 __register_exitproc
00007c2c g     F .text	0000028c __multiply
0000f7a8 g     F .text	00000068 altera_avalon_jtag_uart_close
000017b4 g     F .text	00000028 .hidden __mulsi3
0001263c g       *ABS*	00000000 __ram_rwdata_start
0001205c g       *ABS*	00000000 __ram_rodata_start
00015ea4 g     O .bss	00000028 __malloc_current_mallinfo
0000850c g     F .text	0000014c __d2b
0000f2d8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00011c04 g     F .text	000000c4 alt_get_fd
00011914 g     F .text	00000158 alt_busy_sleep
0000a854 g     F .text	00000054 _close_r
00011d14 g     F .text	0000007c memcmp
0000f398 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015fcc g       *ABS*	00000000 __alt_stack_base
0000f3e8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000017dc g     F .text	000000dc _fwrite_r
00004594 g     F .text	00000154 __swsetup_r
00000578 g     F .text	000000f4 init
0000c760 g     F .text	000009d0 .hidden __divdf3
00006470 g     F .text	00000118 __sfp
00008770 g     F .text	00000078 __copybits
00012a60 g     O .rwdata	00000408 __malloc_av_
000065bc g     F .text	00000004 __sinit_lock_release
0000d388 g     F .text	0000086c .hidden __muldf3
00008e4c g     F .text	00000054 __sread
00011afc g     F .text	00000108 alt_find_file
00010f68 g     F .text	000000a4 alt_dev_llist_insert
0000ede4 g     F .text	00000024 __malloc_lock
0000eff0 g     F .text	000000b0 sbrk
000061b4 g     F .text	0000005c _fflush_r
0000a8a8 g     F .text	000000dc _calloc_r
00015e64 g       *ABS*	00000000 __bss_start
00000ffc g     F .text	000004f4 adding_interrupt
00007694 g     F .text	00000128 memset
000003a4 g     F .text	0000003c main
00015e88 g     O .bss	00000004 alt_envp
00015e64 g     O .bss	00000004 __malloc_max_total_mem
0000f338 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000af40 g     F .text	00000018 __swbuf
00010b58 g     F .text	00000134 altera_avalon_lcd_16207_init
00008f80 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0000aa74 g     F .text	00000014 fclose
00004910 g     F .text	00001688 _dtoa_r
00001914 g     F .text	0000080c _malloc_r
0000b0b4 g     F .text	00000030 __ascii_wctomb
000016a8 g     F .text	000000d8 disable_pwm_channel
00014234 g     O .rwdata	00000004 alt_errno
00006eec g     F .text	000000c4 _fwalk
0000bd00 g     F .text	00000084 .hidden __divsi3
000065f0 g     F .text	00000124 _malloc_trim_r
0001205c g       *ABS*	00000000 __CTOR_END__
00008f88 g     F .text	000000dc strcmp
0000026c g     F .text	00000034 clear_lcd
0001205c g       *ABS*	00000000 __flash_rodata_start
0001205c g       *ABS*	00000000 __DTOR_LIST__
0000d130 g     F .text	00000088 .hidden __nedf2
0000f210 g     F .text	00000038 alt_irq_init
0000ef6c g     F .text	00000084 alt_release_fd
00012278 g     O .rodata	00000100 .hidden __clz_tab
00015e74 g     O .bss	00000004 _PathLocale
00011cc8 g     F .text	00000014 atexit
0000a7f4 g     F .text	00000060 _write_r
0000712c g     F .text	00000018 setlocale
0001420c g     O .rwdata	00000004 _impure_ptr
00015e80 g     O .bss	00000004 alt_argc
00005f98 g     F .text	0000021c __sflush_r
00015e8c g     O .bss	00000004 altera_avalon_timer_ts_base
0001106c g     F .text	00000060 _do_dtors
00007118 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000839c g     F .text	00000064 __ulp
000065d8 g     F .text	00000018 __fp_unlock_all
00010c8c g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00014220 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00007144 g     F .text	0000000c localeconv
00001780 g     F .text	00000034 disable_all_pwm_channel
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
000110ec g     F .text	00000050 alt_ic_isr_register
000018b8 g     F .text	00000034 fwrite
00014250 g       *ABS*	00000000 _edata
0000066c g     F .text	000006d8 button_interrupt
00015fcc g       *ABS*	00000000 _end
0000aa88 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000f810 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000111c4 g     F .text	0000008c alt_ic_irq_disable
00008ea8 g     F .text	0000007c __swrite
00014214 g     O .rwdata	00000004 __malloc_trim_threshold
0000710c g     F .text	0000000c __locale_msgcharset
00011cdc g     F .text	00000038 exit
00006fb0 g     F .text	000000c4 _fwalk_reent
000081a0 g     F .text	000001fc __mdiff
0000bd84 g     F .text	00000074 .hidden __modsi3
000004a0 g     F .text	00000048 lcd_data_init
0001424c g     O .rwdata	00000004 __ctype_ptr__
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000065b4 g     F .text	00000004 __sfp_lock_release
000123b9 g     O .rodata	00000101 _ctype_
00012028 g     F .text	00000034 _exit
00010de0 g     F .text	0000012c alt_alarm_start
00007150 g     F .text	000001bc __smakebuf_r
00009064 g     F .text	00000098 strlen
000115c0 g     F .text	0000015c open
0000d1b8 g     F .text	000000dc .hidden __gedf2
0001421c g     O .rwdata	00000004 __wctomb
000004e8 g     F .text	00000090 main_data_init
000091f8 g     F .text	00000018 __sprint_r
000110cc g     F .text	00000020 alt_icache_flush_all
000014f0 g     F .text	00000054 apply_t_on_on_all
00014240 g     O .rwdata	00000004 alt_priority_mask
0001113c g     F .text	00000088 alt_ic_irq_enable
000044bc g     F .text	0000001c __vfprintf_internal
0000b0e4 g     F .text	0000005c _wctomb_r
0000dbf4 g     F .text	000008fc .hidden __subdf3
00007b40 g     F .text	000000b0 __lo0bits
00014244 g     O .rwdata	00000008 alt_alarm_list
0001100c g     F .text	00000060 _do_ctors
0000aff4 g     F .text	000000c0 wcrtomb
0000e794 g     F .text	000000d8 close
0000ebcc g     F .text	00000084 alt_load
0000ac10 g     F .text	00000080 fputwc
00001900 g     F .text	00000014 free
000065b8 g     F .text	00000004 __sinit_lock_acquire
0000788c g     F .text	00000148 __multadd
00007864 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	1097b304 	addi	r2,r2,24268
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	1097b304 	addi	r2,r2,24268
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a72317 	ldw	r2,-25460(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a72317 	ldw	r2,-25460(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6b08214 	ori	gp,gp,49672
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	10979914 	ori	r2,r2,24164

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18d7f314 	ori	r3,r3,24524

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	000ebcc0 	call	ebcc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	000ed680 	call	ed68 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xf8000268>

0000026c <clear_lcd>:
#include "control_lcd.h"

void clear_lcd(){
     26c:	defffe04 	addi	sp,sp,-8
     270:	dfc00115 	stw	ra,4(sp)
     274:	df000015 	stw	fp,0(sp)
     278:	d839883a 	mov	fp,sp
    printf("\x1B[2J");
     27c:	01000074 	movhi	r4,1
     280:	21081704 	addi	r4,r4,8284
     284:	00021500 	call	2150 <printf>
     288:	0001883a 	nop
     28c:	e037883a 	mov	sp,fp
     290:	dfc00117 	ldw	ra,4(sp)
     294:	df000017 	ldw	fp,0(sp)
     298:	dec00204 	addi	sp,sp,8
     29c:	f800283a 	ret

000002a0 <enable_led>:
#include "control_led.h"
#include "struct.h"

void enable_led(int channel){
     2a0:	defffd04 	addi	sp,sp,-12
     2a4:	df000215 	stw	fp,8(sp)
     2a8:	df000204 	addi	fp,sp,8
     2ac:	e13fff15 	stw	r4,-4(fp)
	unsigned int actual_led_enable = IORD_ALTERA_AVALON_PIO_DATA(LEDS_BASE);
     2b0:	00820034 	movhi	r2,2048
     2b4:	10800037 	ldwio	r2,0(r2)
     2b8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, (actual_led_enable | 1<<channel));
     2bc:	00c00044 	movi	r3,1
     2c0:	e0bfff17 	ldw	r2,-4(fp)
     2c4:	1884983a 	sll	r2,r3,r2
     2c8:	1007883a 	mov	r3,r2
     2cc:	e0bffe17 	ldw	r2,-8(fp)
     2d0:	1884b03a 	or	r2,r3,r2
     2d4:	1007883a 	mov	r3,r2
     2d8:	00820034 	movhi	r2,2048
     2dc:	10c00035 	stwio	r3,0(r2)
}
     2e0:	0001883a 	nop
     2e4:	e037883a 	mov	sp,fp
     2e8:	df000017 	ldw	fp,0(sp)
     2ec:	dec00104 	addi	sp,sp,4
     2f0:	f800283a 	ret

000002f4 <disable_led>:
void disable_led(int channel){
     2f4:	defffd04 	addi	sp,sp,-12
     2f8:	df000215 	stw	fp,8(sp)
     2fc:	df000204 	addi	fp,sp,8
     300:	e13fff15 	stw	r4,-4(fp)
	unsigned int actual_led_enable = IORD_ALTERA_AVALON_PIO_DATA(LEDS_BASE);
     304:	00820034 	movhi	r2,2048
     308:	10800037 	ldwio	r2,0(r2)
     30c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, (actual_led_enable & (~(1<<channel))));
     310:	00c00044 	movi	r3,1
     314:	e0bfff17 	ldw	r2,-4(fp)
     318:	1884983a 	sll	r2,r3,r2
     31c:	0084303a 	nor	r2,zero,r2
     320:	1007883a 	mov	r3,r2
     324:	e0bffe17 	ldw	r2,-8(fp)
     328:	1884703a 	and	r2,r3,r2
     32c:	1007883a 	mov	r3,r2
     330:	00820034 	movhi	r2,2048
     334:	10c00035 	stwio	r3,0(r2)
}
     338:	0001883a 	nop
     33c:	e037883a 	mov	sp,fp
     340:	df000017 	ldw	fp,0(sp)
     344:	dec00104 	addi	sp,sp,4
     348:	f800283a 	ret

0000034c <disable_all_led>:
void disable_all_led(){
     34c:	deffff04 	addi	sp,sp,-4
     350:	df000015 	stw	fp,0(sp)
     354:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 0);
     358:	0007883a 	mov	r3,zero
     35c:	00820034 	movhi	r2,2048
     360:	10c00035 	stwio	r3,0(r2)
}
     364:	0001883a 	nop
     368:	e037883a 	mov	sp,fp
     36c:	df000017 	ldw	fp,0(sp)
     370:	dec00104 	addi	sp,sp,4
     374:	f800283a 	ret

00000378 <enable_all_led>:
void enable_all_led(){
     378:	deffff04 	addi	sp,sp,-4
     37c:	df000015 	stw	fp,0(sp)
     380:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE,~(1<<BYTES_BUS_NUMBER+1));
     384:	00ffffc4 	movi	r3,-1
     388:	00820034 	movhi	r2,2048
     38c:	10c00035 	stwio	r3,0(r2)
}
     390:	0001883a 	nop
     394:	e037883a 	mov	sp,fp
     398:	df000017 	ldw	fp,0(sp)
     39c:	dec00104 	addi	sp,sp,4
     3a0:	f800283a 	ret

000003a4 <main>:
#include "struct.h"
#include "params.h"


int main(){
     3a4:	defffd04 	addi	sp,sp,-12
     3a8:	dfc00215 	stw	ra,8(sp)
     3ac:	df000115 	stw	fp,4(sp)
     3b0:	df000104 	addi	fp,sp,4

	MainDataType* mainDataType = init();
     3b4:	00005780 	call	578 <init>
     3b8:	e0bfff15 	stw	r2,-4(fp)

	fprintf(stderr,"Software running...\n");
     3bc:	d0a00117 	ldw	r2,-32764(gp)
     3c0:	10800317 	ldw	r2,12(r2)
     3c4:	100f883a 	mov	r7,r2
     3c8:	01800504 	movi	r6,20
     3cc:	01400044 	movi	r5,1
     3d0:	01000074 	movhi	r4,1
     3d4:	21081904 	addi	r4,r4,8292
     3d8:	00018b80 	call	18b8 <fwrite>


	while(1){}
     3dc:	003fff06 	br	3dc <__alt_data_end+0xf80003dc>

000003e0 <pwm_data_init>:
#include "struct.h"
#include "interrupt.h"
#include "control_lcd.h"
#include "control_led.h"

PWMDataType* pwm_data_init(){
     3e0:	defffc04 	addi	sp,sp,-16
     3e4:	dfc00315 	stw	ra,12(sp)
     3e8:	df000215 	stw	fp,8(sp)
     3ec:	df000204 	addi	fp,sp,8
    PWMDataType* pwmData = malloc(PWM_NUMBER * sizeof(PWMDataType));
     3f0:	01004804 	movi	r4,288
     3f4:	00018ec0 	call	18ec <malloc>
     3f8:	e0bfff15 	stw	r2,-4(fp)
    for(int index=0; index < PWM_NUMBER; index++){
     3fc:	e03ffe15 	stw	zero,-8(fp)
     400:	00001e06 	br	47c <pwm_data_init+0x9c>
        pwmData[index].id = index+1;
     404:	e0bffe17 	ldw	r2,-8(fp)
     408:	01400304 	movi	r5,12
     40c:	1009883a 	mov	r4,r2
     410:	00017b40 	call	17b4 <__mulsi3>
     414:	1007883a 	mov	r3,r2
     418:	e0bfff17 	ldw	r2,-4(fp)
     41c:	10c5883a 	add	r2,r2,r3
     420:	e0fffe17 	ldw	r3,-8(fp)
     424:	18c00044 	addi	r3,r3,1
     428:	10c00015 	stw	r3,0(r2)
        pwmData[index].status = false;
     42c:	e0bffe17 	ldw	r2,-8(fp)
     430:	01400304 	movi	r5,12
     434:	1009883a 	mov	r4,r2
     438:	00017b40 	call	17b4 <__mulsi3>
     43c:	1007883a 	mov	r3,r2
     440:	e0bfff17 	ldw	r2,-4(fp)
     444:	10c5883a 	add	r2,r2,r3
     448:	10000105 	stb	zero,4(r2)
        pwmData[index].t_on = 512;
     44c:	e0bffe17 	ldw	r2,-8(fp)
     450:	01400304 	movi	r5,12
     454:	1009883a 	mov	r4,r2
     458:	00017b40 	call	17b4 <__mulsi3>
     45c:	1007883a 	mov	r3,r2
     460:	e0bfff17 	ldw	r2,-4(fp)
     464:	10c5883a 	add	r2,r2,r3
     468:	00c08004 	movi	r3,512
     46c:	10c00215 	stw	r3,8(r2)
#include "control_lcd.h"
#include "control_led.h"

PWMDataType* pwm_data_init(){
    PWMDataType* pwmData = malloc(PWM_NUMBER * sizeof(PWMDataType));
    for(int index=0; index < PWM_NUMBER; index++){
     470:	e0bffe17 	ldw	r2,-8(fp)
     474:	10800044 	addi	r2,r2,1
     478:	e0bffe15 	stw	r2,-8(fp)
     47c:	e0bffe17 	ldw	r2,-8(fp)
     480:	10800610 	cmplti	r2,r2,24
     484:	103fdf1e 	bne	r2,zero,404 <__alt_data_end+0xf8000404>
        pwmData[index].id = index+1;
        pwmData[index].status = false;
        pwmData[index].t_on = 512;
    }
    return pwmData;
     488:	e0bfff17 	ldw	r2,-4(fp)
}
     48c:	e037883a 	mov	sp,fp
     490:	dfc00117 	ldw	ra,4(sp)
     494:	df000017 	ldw	fp,0(sp)
     498:	dec00204 	addi	sp,sp,8
     49c:	f800283a 	ret

000004a0 <lcd_data_init>:

LCDDataType* lcd_data_init(){
     4a0:	defffd04 	addi	sp,sp,-12
     4a4:	dfc00215 	stw	ra,8(sp)
     4a8:	df000115 	stw	fp,4(sp)
     4ac:	df000104 	addi	fp,sp,4
    LCDDataType *lcdData = (LCDDataType*)malloc(sizeof(LCDDataType));
     4b0:	01000204 	movi	r4,8
     4b4:	00018ec0 	call	18ec <malloc>
     4b8:	e0bfff15 	stw	r2,-4(fp)
    lcdData->ctrl_blinker = NONE_BLINKS;
     4bc:	e0bfff17 	ldw	r2,-4(fp)
     4c0:	10000015 	stw	zero,0(r2)
    lcdData->blink = 1;
     4c4:	e0bfff17 	ldw	r2,-4(fp)
     4c8:	00c00044 	movi	r3,1
     4cc:	10c00115 	stw	r3,4(r2)
    return lcdData;
     4d0:	e0bfff17 	ldw	r2,-4(fp)
}
     4d4:	e037883a 	mov	sp,fp
     4d8:	dfc00117 	ldw	ra,4(sp)
     4dc:	df000017 	ldw	fp,0(sp)
     4e0:	dec00204 	addi	sp,sp,8
     4e4:	f800283a 	ret

000004e8 <main_data_init>:

MainDataType* main_data_init(){
     4e8:	defffd04 	addi	sp,sp,-12
     4ec:	dfc00215 	stw	ra,8(sp)
     4f0:	df000115 	stw	fp,4(sp)
     4f4:	df000104 	addi	fp,sp,4
    MainDataType *mainData = (MainDataType*)malloc(sizeof(MainDataType));
     4f8:	01000804 	movi	r4,32
     4fc:	00018ec0 	call	18ec <malloc>
     500:	e0bfff15 	stw	r2,-4(fp)
	mainData->btn[0] = PENDING_BUTTON;
     504:	e0bfff17 	ldw	r2,-4(fp)
     508:	10000015 	stw	zero,0(r2)
	mainData->btn[1] = PENDING_BUTTON;
     50c:	e0bfff17 	ldw	r2,-4(fp)
     510:	10000115 	stw	zero,4(r2)
	mainData->btn[2] = PENDING_BUTTON;
     514:	e0bfff17 	ldw	r2,-4(fp)
     518:	10000215 	stw	zero,8(r2)
	mainData->pwm_selected = 0;
     51c:	e0bfff17 	ldw	r2,-4(fp)
     520:	10000315 	stw	zero,12(r2)
	mainData->lcdData = lcd_data_init();
     524:	00004a00 	call	4a0 <lcd_data_init>
     528:	1007883a 	mov	r3,r2
     52c:	e0bfff17 	ldw	r2,-4(fp)
     530:	10c00415 	stw	r3,16(r2)
    mainData->all_pwm = pwm_data_init();
     534:	00003e00 	call	3e0 <pwm_data_init>
     538:	1007883a 	mov	r3,r2
     53c:	e0bfff17 	ldw	r2,-4(fp)
     540:	10c00515 	stw	r3,20(r2)
    mainData->setting = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_REGLAGE_BASE);
     544:	00820034 	movhi	r2,2048
     548:	10801004 	addi	r2,r2,64
     54c:	10c00037 	ldwio	r3,0(r2)
     550:	e0bfff17 	ldw	r2,-4(fp)
     554:	10c00615 	stw	r3,24(r2)
    mainData->delay =0;
     558:	e0bfff17 	ldw	r2,-4(fp)
     55c:	10000715 	stw	zero,28(r2)
    return mainData;
     560:	e0bfff17 	ldw	r2,-4(fp)
}
     564:	e037883a 	mov	sp,fp
     568:	dfc00117 	ldw	ra,4(sp)
     56c:	df000017 	ldw	fp,0(sp)
     570:	dec00204 	addi	sp,sp,8
     574:	f800283a 	ret

00000578 <init>:

MainDataType* init(){
     578:	defffc04 	addi	sp,sp,-16
     57c:	dfc00315 	stw	ra,12(sp)
     580:	df000215 	stw	fp,8(sp)
     584:	df000204 	addi	fp,sp,8
    MainDataType *mainData = main_data_init();
     588:	00004e80 	call	4e8 <main_data_init>
     58c:	e0bfff15 	stw	r2,-4(fp)

	//setup interruption btn
	alt_iic_isr_register(BUTTONS_COMMANDE_IRQ_INTERRUPT_CONTROLLER_ID,BUTTONS_COMMANDE_IRQ,&button_interrupt,mainData,NULL);
     590:	d8000015 	stw	zero,0(sp)
     594:	e1ffff17 	ldw	r7,-4(fp)
     598:	01800034 	movhi	r6,0
     59c:	31819b04 	addi	r6,r6,1644
     5a0:	014000c4 	movi	r5,3
     5a4:	0009883a 	mov	r4,zero
     5a8:	000e98c0 	call	e98c <alt_iic_isr_register>
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_COMMANDE_BASE,0b111);
     5ac:	00c001c4 	movi	r3,7
     5b0:	00820034 	movhi	r2,2048
     5b4:	10801604 	addi	r2,r2,88
     5b8:	10c00035 	stwio	r3,0(r2)

	//setup interruption lcd
	alt_iic_isr_register(LCD_REFRESH_TIMER_IRQ_INTERRUPT_CONTROLLER_ID,LCD_REFRESH_TIMER_IRQ,&lcd_refresh_interrupt,mainData,NULL);
     5bc:	d8000015 	stw	zero,0(sp)
     5c0:	e1ffff17 	ldw	r7,-4(fp)
     5c4:	01800034 	movhi	r6,0
     5c8:	31835104 	addi	r6,r6,3396
     5cc:	01400144 	movi	r5,5
     5d0:	0009883a 	mov	r4,zero
     5d4:	000e98c0 	call	e98c <alt_iic_isr_register>
	IOWR_ALTERA_AVALON_TIMER_CONTROL(LCD_REFRESH_TIMER_BASE,0x0007);
     5d8:	00c001c4 	movi	r3,7
     5dc:	00820034 	movhi	r2,2048
     5e0:	10802104 	addi	r2,r2,132
     5e4:	10c00035 	stwio	r3,0(r2)

	//setup interruption settings
	alt_iic_isr_register(SWITCH_REGLAGE_IRQ_INTERRUPT_CONTROLLER_ID,SWITCH_REGLAGE_IRQ,&switch_settings_interrupt,mainData,NULL);
     5e8:	d8000015 	stw	zero,0(sp)
     5ec:	e1ffff17 	ldw	r7,-4(fp)
     5f0:	01800034 	movhi	r6,0
     5f4:	3183e004 	addi	r6,r6,3968
     5f8:	01400104 	movi	r5,4
     5fc:	0009883a 	mov	r4,zero
     600:	000e98c0 	call	e98c <alt_iic_isr_register>
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCH_REGLAGE_BASE,0b1);
     604:	00c00044 	movi	r3,1
     608:	00820034 	movhi	r2,2048
     60c:	10801204 	addi	r2,r2,72
     610:	10c00035 	stwio	r3,0(r2)

	//setup interruption adding t_on
	alt_iic_isr_register(ADDER_TIMER_IRQ_INTERRUPT_CONTROLLER_ID,ADDER_TIMER_IRQ,&adding_interrupt,mainData,NULL);
     614:	d8000015 	stw	zero,0(sp)
     618:	e1ffff17 	ldw	r7,-4(fp)
     61c:	01800034 	movhi	r6,0
     620:	3183ff04 	addi	r6,r6,4092
     624:	01400184 	movi	r5,6
     628:	0009883a 	mov	r4,zero
     62c:	000e98c0 	call	e98c <alt_iic_isr_register>
	IOWR_ALTERA_AVALON_TIMER_CONTROL(ADDER_TIMER_BASE,0x0003);
     630:	00c000c4 	movi	r3,3
     634:	00820034 	movhi	r2,2048
     638:	10802904 	addi	r2,r2,164
     63c:	10c00035 	stwio	r3,0(r2)

	disable_all_pwm_channel();
     640:	00017800 	call	1780 <disable_all_pwm_channel>
	apply_t_on_on_all(512);
     644:	01008004 	movi	r4,512
     648:	00014f00 	call	14f0 <apply_t_on_on_all>
	disable_all_led();
     64c:	000034c0 	call	34c <disable_all_led>
	clear_lcd();
     650:	000026c0 	call	26c <clear_lcd>

	return mainData;
     654:	e0bfff17 	ldw	r2,-4(fp)
}
     658:	e037883a 	mov	sp,fp
     65c:	dfc00117 	ldw	ra,4(sp)
     660:	df000017 	ldw	fp,0(sp)
     664:	dec00204 	addi	sp,sp,8
     668:	f800283a 	ret

0000066c <button_interrupt>:
#include "interrupt.h"
#include "control_lcd.h"
#include "control_led.h"

void button_interrupt(void* isr_context){
     66c:	defffa04 	addi	sp,sp,-24
     670:	dfc00515 	stw	ra,20(sp)
     674:	df000415 	stw	fp,16(sp)
     678:	dc400315 	stw	r17,12(sp)
     67c:	dc000215 	stw	r16,8(sp)
     680:	df000404 	addi	fp,sp,16
     684:	e13ffd15 	stw	r4,-12(fp)
	MainDataType *mainDataType = isr_context;
     688:	e0bffd17 	ldw	r2,-12(fp)
     68c:	e0bffc15 	stw	r2,-16(fp)
	switch(IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_COMMANDE_BASE)){
     690:	00820034 	movhi	r2,2048
     694:	10801704 	addi	r2,r2,92
     698:	10800037 	ldwio	r2,0(r2)
     69c:	10c000a0 	cmpeqi	r3,r2,2
     6a0:	1800b91e 	bne	r3,zero,988 <button_interrupt+0x31c>
     6a4:	10c00120 	cmpeqi	r3,r2,4
     6a8:	1800031e 	bne	r3,zero,6b8 <button_interrupt+0x4c>
     6ac:	10800060 	cmpeqi	r2,r2,1
     6b0:	1001691e 	bne	r2,zero,c58 <button_interrupt+0x5ec>
					mainDataType->btn[2]=PENDING_BUTTON;
				}
			}
		break;
		default:
		break;
     6b4:	00019706 	br	d14 <button_interrupt+0x6a8>

void button_interrupt(void* isr_context){
	MainDataType *mainDataType = isr_context;
	switch(IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_COMMANDE_BASE)){
		case 4:
			if(mainDataType->btn[0]==PENDING_BUTTON || mainDataType->btn[0]==RISING_BUTTON){
     6b8:	e0bffc17 	ldw	r2,-16(fp)
     6bc:	10800017 	ldw	r2,0(r2)
     6c0:	10000426 	beq	r2,zero,6d4 <button_interrupt+0x68>
     6c4:	e0bffc17 	ldw	r2,-16(fp)
     6c8:	10800017 	ldw	r2,0(r2)
     6cc:	10800098 	cmpnei	r2,r2,2
     6d0:	1000461e 	bne	r2,zero,7ec <button_interrupt+0x180>
				//fprintf(stderr,"Button 1 is push.\n");
				mainDataType->btn[0]=FALLING_BUTTON;
     6d4:	e0bffc17 	ldw	r2,-16(fp)
     6d8:	00c00044 	movi	r3,1
     6dc:	10c00015 	stw	r3,0(r2)
				if(mainDataType->lcdData->ctrl_blinker == T_ON_BLINKS){
     6e0:	e0bffc17 	ldw	r2,-16(fp)
     6e4:	10800417 	ldw	r2,16(r2)
     6e8:	10800017 	ldw	r2,0(r2)
     6ec:	10800098 	cmpnei	r2,r2,2
     6f0:	1000a41e 	bne	r2,zero,984 <button_interrupt+0x318>
					mainDataType->btn[0]=PENDING_RISING_BUTTON;
     6f4:	e0bffc17 	ldw	r2,-16(fp)
     6f8:	00c000c4 	movi	r3,3
     6fc:	10c00015 	stw	r3,0(r2)
					if(mainDataType->all_pwm[mainDataType->pwm_selected].t_on > 0)
     700:	e0bffc17 	ldw	r2,-16(fp)
     704:	14000517 	ldw	r16,20(r2)
     708:	e0bffc17 	ldw	r2,-16(fp)
     70c:	10800317 	ldw	r2,12(r2)
     710:	01400304 	movi	r5,12
     714:	1009883a 	mov	r4,r2
     718:	00017b40 	call	17b4 <__mulsi3>
     71c:	8085883a 	add	r2,r16,r2
     720:	10800217 	ldw	r2,8(r2)
     724:	0080140e 	bge	zero,r2,778 <button_interrupt+0x10c>
					mainDataType->all_pwm[mainDataType->pwm_selected].t_on -= 1;
     728:	e0bffc17 	ldw	r2,-16(fp)
     72c:	14000517 	ldw	r16,20(r2)
     730:	e0bffc17 	ldw	r2,-16(fp)
     734:	10800317 	ldw	r2,12(r2)
     738:	01400304 	movi	r5,12
     73c:	1009883a 	mov	r4,r2
     740:	00017b40 	call	17b4 <__mulsi3>
     744:	80a1883a 	add	r16,r16,r2
     748:	e0bffc17 	ldw	r2,-16(fp)
     74c:	14400517 	ldw	r17,20(r2)
     750:	e0bffc17 	ldw	r2,-16(fp)
     754:	10800317 	ldw	r2,12(r2)
     758:	01400304 	movi	r5,12
     75c:	1009883a 	mov	r4,r2
     760:	00017b40 	call	17b4 <__mulsi3>
     764:	8885883a 	add	r2,r17,r2
     768:	10800217 	ldw	r2,8(r2)
     76c:	10bfffc4 	addi	r2,r2,-1
     770:	80800215 	stw	r2,8(r16)
     774:	00000a06 	br	7a0 <button_interrupt+0x134>
					else mainDataType->all_pwm[mainDataType->pwm_selected].t_on = MAX_T_ON;
     778:	e0bffc17 	ldw	r2,-16(fp)
     77c:	14000517 	ldw	r16,20(r2)
     780:	e0bffc17 	ldw	r2,-16(fp)
     784:	10800317 	ldw	r2,12(r2)
     788:	01400304 	movi	r5,12
     78c:	1009883a 	mov	r4,r2
     790:	00017b40 	call	17b4 <__mulsi3>
     794:	8085883a 	add	r2,r16,r2
     798:	00c10004 	movi	r3,1024
     79c:	10c00215 	stw	r3,8(r2)
					apply_t_on_on_channel(mainDataType->all_pwm[mainDataType->pwm_selected].t_on,mainDataType->pwm_selected);
     7a0:	e0bffc17 	ldw	r2,-16(fp)
     7a4:	14000517 	ldw	r16,20(r2)
     7a8:	e0bffc17 	ldw	r2,-16(fp)
     7ac:	10800317 	ldw	r2,12(r2)
     7b0:	01400304 	movi	r5,12
     7b4:	1009883a 	mov	r4,r2
     7b8:	00017b40 	call	17b4 <__mulsi3>
     7bc:	8085883a 	add	r2,r16,r2
     7c0:	10c00217 	ldw	r3,8(r2)
     7c4:	e0bffc17 	ldw	r2,-16(fp)
     7c8:	10800317 	ldw	r2,12(r2)
     7cc:	100b883a 	mov	r5,r2
     7d0:	1809883a 	mov	r4,r3
     7d4:	00015440 	call	1544 <apply_t_on_on_channel>
					IOWR_ALTERA_AVALON_TIMER_CONTROL(ADDER_TIMER_BASE,0x0007);
     7d8:	00c001c4 	movi	r3,7
     7dc:	00820034 	movhi	r2,2048
     7e0:	10802904 	addi	r2,r2,164
     7e4:	10c00035 	stwio	r3,0(r2)
	switch(IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_COMMANDE_BASE)){
		case 4:
			if(mainDataType->btn[0]==PENDING_BUTTON || mainDataType->btn[0]==RISING_BUTTON){
				//fprintf(stderr,"Button 1 is push.\n");
				mainDataType->btn[0]=FALLING_BUTTON;
				if(mainDataType->lcdData->ctrl_blinker == T_ON_BLINKS){
     7e8:	00006606 	br	984 <button_interrupt+0x318>
					else mainDataType->all_pwm[mainDataType->pwm_selected].t_on = MAX_T_ON;
					apply_t_on_on_channel(mainDataType->all_pwm[mainDataType->pwm_selected].t_on,mainDataType->pwm_selected);
					IOWR_ALTERA_AVALON_TIMER_CONTROL(ADDER_TIMER_BASE,0x0007);
				}
			}
			else if(mainDataType->btn[0]==FALLING_BUTTON || mainDataType->btn[0]==PENDING_RISING_BUTTON){
     7ec:	e0bffc17 	ldw	r2,-16(fp)
     7f0:	10800017 	ldw	r2,0(r2)
     7f4:	10800060 	cmpeqi	r2,r2,1
     7f8:	1000041e 	bne	r2,zero,80c <button_interrupt+0x1a0>
     7fc:	e0bffc17 	ldw	r2,-16(fp)
     800:	10800017 	ldw	r2,0(r2)
     804:	108000d8 	cmpnei	r2,r2,3
     808:	10013d1e 	bne	r2,zero,d00 <button_interrupt+0x694>
				//fprintf(stderr,"Button 1 is release.\n");
				mainDataType->btn[0]=RISING_BUTTON;
     80c:	e0bffc17 	ldw	r2,-16(fp)
     810:	00c00084 	movi	r3,2
     814:	10c00015 	stw	r3,0(r2)
				if(mainDataType->lcdData->ctrl_blinker == T_ON_BLINKS){
     818:	e0bffc17 	ldw	r2,-16(fp)
     81c:	10800417 	ldw	r2,16(r2)
     820:	10800017 	ldw	r2,0(r2)
     824:	10800098 	cmpnei	r2,r2,2
     828:	1000081e 	bne	r2,zero,84c <button_interrupt+0x1e0>
					/*if(mainDataType->all_pwm[mainDataType->pwm_selected].t_on > 0)
					mainDataType->all_pwm[mainDataType->pwm_selected].t_on -= 1;
					else mainDataType->all_pwm[mainDataType->pwm_selected].t_on = MAX_T_ON;*/
					IOWR_ALTERA_AVALON_TIMER_CONTROL(ADDER_TIMER_BASE,0x000B);
     82c:	00c002c4 	movi	r3,11
     830:	00820034 	movhi	r2,2048
     834:	10802904 	addi	r2,r2,164
     838:	10c00035 	stwio	r3,0(r2)
					mainDataType->delay =0;
     83c:	e0bffc17 	ldw	r2,-16(fp)
     840:	10000715 	stw	zero,28(r2)
					mainDataType->btn[0]=PENDING_BUTTON;
     844:	e0bffc17 	ldw	r2,-16(fp)
     848:	10000015 	stw	zero,0(r2)
				}
				if(mainDataType->lcdData->ctrl_blinker == ON_OFF_BLINKS){
     84c:	e0bffc17 	ldw	r2,-16(fp)
     850:	10800417 	ldw	r2,16(r2)
     854:	10800017 	ldw	r2,0(r2)
     858:	10800058 	cmpnei	r2,r2,1
     85c:	1000371e 	bne	r2,zero,93c <button_interrupt+0x2d0>
					mainDataType->all_pwm[mainDataType->pwm_selected].status =! mainDataType->all_pwm[mainDataType->pwm_selected].status ;
     860:	e0bffc17 	ldw	r2,-16(fp)
     864:	14000517 	ldw	r16,20(r2)
     868:	e0bffc17 	ldw	r2,-16(fp)
     86c:	10800317 	ldw	r2,12(r2)
     870:	01400304 	movi	r5,12
     874:	1009883a 	mov	r4,r2
     878:	00017b40 	call	17b4 <__mulsi3>
     87c:	80a1883a 	add	r16,r16,r2
     880:	e0bffc17 	ldw	r2,-16(fp)
     884:	14400517 	ldw	r17,20(r2)
     888:	e0bffc17 	ldw	r2,-16(fp)
     88c:	10800317 	ldw	r2,12(r2)
     890:	01400304 	movi	r5,12
     894:	1009883a 	mov	r4,r2
     898:	00017b40 	call	17b4 <__mulsi3>
     89c:	8885883a 	add	r2,r17,r2
     8a0:	10800103 	ldbu	r2,4(r2)
     8a4:	10803fcc 	andi	r2,r2,255
     8a8:	1004c03a 	cmpne	r2,r2,zero
     8ac:	1080005c 	xori	r2,r2,1
     8b0:	10803fcc 	andi	r2,r2,255
     8b4:	1080004c 	andi	r2,r2,1
     8b8:	80800105 	stb	r2,4(r16)
					if(mainDataType->all_pwm[mainDataType->pwm_selected].status){
     8bc:	e0bffc17 	ldw	r2,-16(fp)
     8c0:	14000517 	ldw	r16,20(r2)
     8c4:	e0bffc17 	ldw	r2,-16(fp)
     8c8:	10800317 	ldw	r2,12(r2)
     8cc:	01400304 	movi	r5,12
     8d0:	1009883a 	mov	r4,r2
     8d4:	00017b40 	call	17b4 <__mulsi3>
     8d8:	8085883a 	add	r2,r16,r2
     8dc:	10800103 	ldbu	r2,4(r2)
     8e0:	10803fcc 	andi	r2,r2,255
     8e4:	10000a26 	beq	r2,zero,910 <button_interrupt+0x2a4>
						enable_led(mainDataType->pwm_selected);
     8e8:	e0bffc17 	ldw	r2,-16(fp)
     8ec:	10800317 	ldw	r2,12(r2)
     8f0:	1009883a 	mov	r4,r2
     8f4:	00002a00 	call	2a0 <enable_led>
						enable_pwm_channel(mainDataType,mainDataType->pwm_selected);
     8f8:	e0bffc17 	ldw	r2,-16(fp)
     8fc:	10800317 	ldw	r2,12(r2)
     900:	100b883a 	mov	r5,r2
     904:	e13ffc17 	ldw	r4,-16(fp)
     908:	00015a80 	call	15a8 <enable_pwm_channel>
     90c:	00000906 	br	934 <button_interrupt+0x2c8>
					}
					else{
						disable_led(mainDataType->pwm_selected);
     910:	e0bffc17 	ldw	r2,-16(fp)
     914:	10800317 	ldw	r2,12(r2)
     918:	1009883a 	mov	r4,r2
     91c:	00002f40 	call	2f4 <disable_led>
						disable_pwm_channel(mainDataType,mainDataType->pwm_selected);
     920:	e0bffc17 	ldw	r2,-16(fp)
     924:	10800317 	ldw	r2,12(r2)
     928:	100b883a 	mov	r5,r2
     92c:	e13ffc17 	ldw	r4,-16(fp)
     930:	00016a80 	call	16a8 <disable_pwm_channel>
					}
					mainDataType->btn[0]=PENDING_BUTTON;
     934:	e0bffc17 	ldw	r2,-16(fp)
     938:	10000015 	stw	zero,0(r2)
				}
				if(!mainDataType->setting){
     93c:	e0bffc17 	ldw	r2,-16(fp)
     940:	10800617 	ldw	r2,24(r2)
     944:	1000ee1e 	bne	r2,zero,d00 <button_interrupt+0x694>
					if(mainDataType->pwm_selected>0)mainDataType->pwm_selected -= 1;
     948:	e0bffc17 	ldw	r2,-16(fp)
     94c:	10800317 	ldw	r2,12(r2)
     950:	0080060e 	bge	zero,r2,96c <button_interrupt+0x300>
     954:	e0bffc17 	ldw	r2,-16(fp)
     958:	10800317 	ldw	r2,12(r2)
     95c:	10ffffc4 	addi	r3,r2,-1
     960:	e0bffc17 	ldw	r2,-16(fp)
     964:	10c00315 	stw	r3,12(r2)
     968:	00000306 	br	978 <button_interrupt+0x30c>
					else mainDataType->pwm_selected = PWM_NUMBER-1;
     96c:	e0bffc17 	ldw	r2,-16(fp)
     970:	00c005c4 	movi	r3,23
     974:	10c00315 	stw	r3,12(r2)
					mainDataType->btn[0] = PENDING_BUTTON;
     978:	e0bffc17 	ldw	r2,-16(fp)
     97c:	10000015 	stw	zero,0(r2)
				}
			}

		break;
     980:	0000df06 	br	d00 <button_interrupt+0x694>
     984:	0000de06 	br	d00 <button_interrupt+0x694>
		case 2:
			if(mainDataType->btn[1]==PENDING_BUTTON || mainDataType->btn[1]==RISING_BUTTON){
     988:	e0bffc17 	ldw	r2,-16(fp)
     98c:	10800117 	ldw	r2,4(r2)
     990:	10000426 	beq	r2,zero,9a4 <button_interrupt+0x338>
     994:	e0bffc17 	ldw	r2,-16(fp)
     998:	10800117 	ldw	r2,4(r2)
     99c:	10800098 	cmpnei	r2,r2,2
     9a0:	1000461e 	bne	r2,zero,abc <button_interrupt+0x450>
				//fprintf(stderr,"Button 2 is push.\n");
				mainDataType->btn[1]=FALLING_BUTTON;
     9a4:	e0bffc17 	ldw	r2,-16(fp)
     9a8:	00c00044 	movi	r3,1
     9ac:	10c00115 	stw	r3,4(r2)
				if(mainDataType->lcdData->ctrl_blinker == T_ON_BLINKS){
     9b0:	e0bffc17 	ldw	r2,-16(fp)
     9b4:	10800417 	ldw	r2,16(r2)
     9b8:	10800017 	ldw	r2,0(r2)
     9bc:	10800098 	cmpnei	r2,r2,2
     9c0:	1000a41e 	bne	r2,zero,c54 <button_interrupt+0x5e8>
					mainDataType->btn[1]=PENDING_RISING_BUTTON;
     9c4:	e0bffc17 	ldw	r2,-16(fp)
     9c8:	00c000c4 	movi	r3,3
     9cc:	10c00115 	stw	r3,4(r2)
					if(mainDataType->all_pwm[mainDataType->pwm_selected].t_on < MAX_T_ON)
     9d0:	e0bffc17 	ldw	r2,-16(fp)
     9d4:	14000517 	ldw	r16,20(r2)
     9d8:	e0bffc17 	ldw	r2,-16(fp)
     9dc:	10800317 	ldw	r2,12(r2)
     9e0:	01400304 	movi	r5,12
     9e4:	1009883a 	mov	r4,r2
     9e8:	00017b40 	call	17b4 <__mulsi3>
     9ec:	8085883a 	add	r2,r16,r2
     9f0:	10800217 	ldw	r2,8(r2)
     9f4:	10810008 	cmpgei	r2,r2,1024
     9f8:	1000141e 	bne	r2,zero,a4c <button_interrupt+0x3e0>
					mainDataType->all_pwm[mainDataType->pwm_selected].t_on += 1;
     9fc:	e0bffc17 	ldw	r2,-16(fp)
     a00:	14000517 	ldw	r16,20(r2)
     a04:	e0bffc17 	ldw	r2,-16(fp)
     a08:	10800317 	ldw	r2,12(r2)
     a0c:	01400304 	movi	r5,12
     a10:	1009883a 	mov	r4,r2
     a14:	00017b40 	call	17b4 <__mulsi3>
     a18:	80a1883a 	add	r16,r16,r2
     a1c:	e0bffc17 	ldw	r2,-16(fp)
     a20:	14400517 	ldw	r17,20(r2)
     a24:	e0bffc17 	ldw	r2,-16(fp)
     a28:	10800317 	ldw	r2,12(r2)
     a2c:	01400304 	movi	r5,12
     a30:	1009883a 	mov	r4,r2
     a34:	00017b40 	call	17b4 <__mulsi3>
     a38:	8885883a 	add	r2,r17,r2
     a3c:	10800217 	ldw	r2,8(r2)
     a40:	10800044 	addi	r2,r2,1
     a44:	80800215 	stw	r2,8(r16)
     a48:	00000906 	br	a70 <button_interrupt+0x404>
					else mainDataType->all_pwm[mainDataType->pwm_selected].t_on = 0;
     a4c:	e0bffc17 	ldw	r2,-16(fp)
     a50:	14000517 	ldw	r16,20(r2)
     a54:	e0bffc17 	ldw	r2,-16(fp)
     a58:	10800317 	ldw	r2,12(r2)
     a5c:	01400304 	movi	r5,12
     a60:	1009883a 	mov	r4,r2
     a64:	00017b40 	call	17b4 <__mulsi3>
     a68:	8085883a 	add	r2,r16,r2
     a6c:	10000215 	stw	zero,8(r2)
					apply_t_on_on_channel(mainDataType->all_pwm[mainDataType->pwm_selected].t_on,mainDataType->pwm_selected);
     a70:	e0bffc17 	ldw	r2,-16(fp)
     a74:	14000517 	ldw	r16,20(r2)
     a78:	e0bffc17 	ldw	r2,-16(fp)
     a7c:	10800317 	ldw	r2,12(r2)
     a80:	01400304 	movi	r5,12
     a84:	1009883a 	mov	r4,r2
     a88:	00017b40 	call	17b4 <__mulsi3>
     a8c:	8085883a 	add	r2,r16,r2
     a90:	10c00217 	ldw	r3,8(r2)
     a94:	e0bffc17 	ldw	r2,-16(fp)
     a98:	10800317 	ldw	r2,12(r2)
     a9c:	100b883a 	mov	r5,r2
     aa0:	1809883a 	mov	r4,r3
     aa4:	00015440 	call	1544 <apply_t_on_on_channel>
					IOWR_ALTERA_AVALON_TIMER_CONTROL(ADDER_TIMER_BASE,0x0007);
     aa8:	00c001c4 	movi	r3,7
     aac:	00820034 	movhi	r2,2048
     ab0:	10802904 	addi	r2,r2,164
     ab4:	10c00035 	stwio	r3,0(r2)
		break;
		case 2:
			if(mainDataType->btn[1]==PENDING_BUTTON || mainDataType->btn[1]==RISING_BUTTON){
				//fprintf(stderr,"Button 2 is push.\n");
				mainDataType->btn[1]=FALLING_BUTTON;
				if(mainDataType->lcdData->ctrl_blinker == T_ON_BLINKS){
     ab8:	00006606 	br	c54 <button_interrupt+0x5e8>
					else mainDataType->all_pwm[mainDataType->pwm_selected].t_on = 0;
					apply_t_on_on_channel(mainDataType->all_pwm[mainDataType->pwm_selected].t_on,mainDataType->pwm_selected);
					IOWR_ALTERA_AVALON_TIMER_CONTROL(ADDER_TIMER_BASE,0x0007);
				}
			}
			else if(mainDataType->btn[1]==FALLING_BUTTON || mainDataType->btn[1]==PENDING_RISING_BUTTON){
     abc:	e0bffc17 	ldw	r2,-16(fp)
     ac0:	10800117 	ldw	r2,4(r2)
     ac4:	10800060 	cmpeqi	r2,r2,1
     ac8:	1000041e 	bne	r2,zero,adc <button_interrupt+0x470>
     acc:	e0bffc17 	ldw	r2,-16(fp)
     ad0:	10800117 	ldw	r2,4(r2)
     ad4:	108000d8 	cmpnei	r2,r2,3
     ad8:	10008b1e 	bne	r2,zero,d08 <button_interrupt+0x69c>
				//fprintf(stderr,"Button 2 is release.\n");
				mainDataType->btn[1]=RISING_BUTTON;
     adc:	e0bffc17 	ldw	r2,-16(fp)
     ae0:	00c00084 	movi	r3,2
     ae4:	10c00115 	stw	r3,4(r2)
				if(mainDataType->lcdData->ctrl_blinker == T_ON_BLINKS){
     ae8:	e0bffc17 	ldw	r2,-16(fp)
     aec:	10800417 	ldw	r2,16(r2)
     af0:	10800017 	ldw	r2,0(r2)
     af4:	10800098 	cmpnei	r2,r2,2
     af8:	1000081e 	bne	r2,zero,b1c <button_interrupt+0x4b0>
					/*if(mainDataType->all_pwm[mainDataType->pwm_selected].t_on < MAX_T_ON)
					mainDataType->all_pwm[mainDataType->pwm_selected].t_on += 1;
					else mainDataType->all_pwm[mainDataType->pwm_selected].t_on = 0;*/
					IOWR_ALTERA_AVALON_TIMER_CONTROL(ADDER_TIMER_BASE,0x000B);
     afc:	00c002c4 	movi	r3,11
     b00:	00820034 	movhi	r2,2048
     b04:	10802904 	addi	r2,r2,164
     b08:	10c00035 	stwio	r3,0(r2)
					mainDataType->delay =0;
     b0c:	e0bffc17 	ldw	r2,-16(fp)
     b10:	10000715 	stw	zero,28(r2)
					mainDataType->btn[0]=PENDING_BUTTON;
     b14:	e0bffc17 	ldw	r2,-16(fp)
     b18:	10000015 	stw	zero,0(r2)
				}
				if(mainDataType->lcdData->ctrl_blinker == ON_OFF_BLINKS){
     b1c:	e0bffc17 	ldw	r2,-16(fp)
     b20:	10800417 	ldw	r2,16(r2)
     b24:	10800017 	ldw	r2,0(r2)
     b28:	10800058 	cmpnei	r2,r2,1
     b2c:	1000371e 	bne	r2,zero,c0c <button_interrupt+0x5a0>
					mainDataType->all_pwm[mainDataType->pwm_selected].status =! mainDataType->all_pwm[mainDataType->pwm_selected].status;
     b30:	e0bffc17 	ldw	r2,-16(fp)
     b34:	14000517 	ldw	r16,20(r2)
     b38:	e0bffc17 	ldw	r2,-16(fp)
     b3c:	10800317 	ldw	r2,12(r2)
     b40:	01400304 	movi	r5,12
     b44:	1009883a 	mov	r4,r2
     b48:	00017b40 	call	17b4 <__mulsi3>
     b4c:	80a1883a 	add	r16,r16,r2
     b50:	e0bffc17 	ldw	r2,-16(fp)
     b54:	14400517 	ldw	r17,20(r2)
     b58:	e0bffc17 	ldw	r2,-16(fp)
     b5c:	10800317 	ldw	r2,12(r2)
     b60:	01400304 	movi	r5,12
     b64:	1009883a 	mov	r4,r2
     b68:	00017b40 	call	17b4 <__mulsi3>
     b6c:	8885883a 	add	r2,r17,r2
     b70:	10800103 	ldbu	r2,4(r2)
     b74:	10803fcc 	andi	r2,r2,255
     b78:	1004c03a 	cmpne	r2,r2,zero
     b7c:	1080005c 	xori	r2,r2,1
     b80:	10803fcc 	andi	r2,r2,255
     b84:	1080004c 	andi	r2,r2,1
     b88:	80800105 	stb	r2,4(r16)
					if(mainDataType->all_pwm[mainDataType->pwm_selected].status){
     b8c:	e0bffc17 	ldw	r2,-16(fp)
     b90:	14000517 	ldw	r16,20(r2)
     b94:	e0bffc17 	ldw	r2,-16(fp)
     b98:	10800317 	ldw	r2,12(r2)
     b9c:	01400304 	movi	r5,12
     ba0:	1009883a 	mov	r4,r2
     ba4:	00017b40 	call	17b4 <__mulsi3>
     ba8:	8085883a 	add	r2,r16,r2
     bac:	10800103 	ldbu	r2,4(r2)
     bb0:	10803fcc 	andi	r2,r2,255
     bb4:	10000a26 	beq	r2,zero,be0 <button_interrupt+0x574>
						enable_led(mainDataType->pwm_selected);
     bb8:	e0bffc17 	ldw	r2,-16(fp)
     bbc:	10800317 	ldw	r2,12(r2)
     bc0:	1009883a 	mov	r4,r2
     bc4:	00002a00 	call	2a0 <enable_led>
						enable_pwm_channel(mainDataType,mainDataType->pwm_selected);
     bc8:	e0bffc17 	ldw	r2,-16(fp)
     bcc:	10800317 	ldw	r2,12(r2)
     bd0:	100b883a 	mov	r5,r2
     bd4:	e13ffc17 	ldw	r4,-16(fp)
     bd8:	00015a80 	call	15a8 <enable_pwm_channel>
     bdc:	00000906 	br	c04 <button_interrupt+0x598>
					}
					else{
						disable_led(mainDataType->pwm_selected);
     be0:	e0bffc17 	ldw	r2,-16(fp)
     be4:	10800317 	ldw	r2,12(r2)
     be8:	1009883a 	mov	r4,r2
     bec:	00002f40 	call	2f4 <disable_led>
						disable_pwm_channel(mainDataType,mainDataType->pwm_selected);
     bf0:	e0bffc17 	ldw	r2,-16(fp)
     bf4:	10800317 	ldw	r2,12(r2)
     bf8:	100b883a 	mov	r5,r2
     bfc:	e13ffc17 	ldw	r4,-16(fp)
     c00:	00016a80 	call	16a8 <disable_pwm_channel>
					}
					mainDataType->btn[1]=PENDING_BUTTON;
     c04:	e0bffc17 	ldw	r2,-16(fp)
     c08:	10000115 	stw	zero,4(r2)
				}
				if(!mainDataType->setting){
     c0c:	e0bffc17 	ldw	r2,-16(fp)
     c10:	10800617 	ldw	r2,24(r2)
     c14:	10003c1e 	bne	r2,zero,d08 <button_interrupt+0x69c>
					if(mainDataType->pwm_selected<PWM_NUMBER-1)mainDataType->pwm_selected += 1;
     c18:	e0bffc17 	ldw	r2,-16(fp)
     c1c:	10800317 	ldw	r2,12(r2)
     c20:	108005c8 	cmpgei	r2,r2,23
     c24:	1000061e 	bne	r2,zero,c40 <button_interrupt+0x5d4>
     c28:	e0bffc17 	ldw	r2,-16(fp)
     c2c:	10800317 	ldw	r2,12(r2)
     c30:	10c00044 	addi	r3,r2,1
     c34:	e0bffc17 	ldw	r2,-16(fp)
     c38:	10c00315 	stw	r3,12(r2)
     c3c:	00000206 	br	c48 <button_interrupt+0x5dc>
					else mainDataType->pwm_selected = 0;
     c40:	e0bffc17 	ldw	r2,-16(fp)
     c44:	10000315 	stw	zero,12(r2)
					mainDataType->btn[1] = PENDING_BUTTON;
     c48:	e0bffc17 	ldw	r2,-16(fp)
     c4c:	10000115 	stw	zero,4(r2)
				}
			}
		break;
     c50:	00002d06 	br	d08 <button_interrupt+0x69c>
     c54:	00002c06 	br	d08 <button_interrupt+0x69c>
		case 1:
			if(mainDataType->btn[2]==PENDING_BUTTON || mainDataType->btn[2]==RISING_BUTTON){
     c58:	e0bffc17 	ldw	r2,-16(fp)
     c5c:	10800217 	ldw	r2,8(r2)
     c60:	10000426 	beq	r2,zero,c74 <button_interrupt+0x608>
     c64:	e0bffc17 	ldw	r2,-16(fp)
     c68:	10800217 	ldw	r2,8(r2)
     c6c:	10800098 	cmpnei	r2,r2,2
     c70:	1000041e 	bne	r2,zero,c84 <button_interrupt+0x618>
				//fprintf(stderr,"Button 3 is push.\n");
				mainDataType->btn[2]=FALLING_BUTTON;
     c74:	e0bffc17 	ldw	r2,-16(fp)
     c78:	00c00044 	movi	r3,1
     c7c:	10c00215 	stw	r3,8(r2)
						mainDataType->lcdData->ctrl_blinker = ON_OFF_BLINKS;
					}
					mainDataType->btn[2]=PENDING_BUTTON;
				}
			}
		break;
     c80:	00002306 	br	d10 <button_interrupt+0x6a4>
		case 1:
			if(mainDataType->btn[2]==PENDING_BUTTON || mainDataType->btn[2]==RISING_BUTTON){
				//fprintf(stderr,"Button 3 is push.\n");
				mainDataType->btn[2]=FALLING_BUTTON;
			}
			else if(mainDataType->btn[2]==FALLING_BUTTON || mainDataType->btn[1]==PENDING_RISING_BUTTON){
     c84:	e0bffc17 	ldw	r2,-16(fp)
     c88:	10800217 	ldw	r2,8(r2)
     c8c:	10800060 	cmpeqi	r2,r2,1
     c90:	1000041e 	bne	r2,zero,ca4 <button_interrupt+0x638>
     c94:	e0bffc17 	ldw	r2,-16(fp)
     c98:	10800117 	ldw	r2,4(r2)
     c9c:	108000d8 	cmpnei	r2,r2,3
     ca0:	10001b1e 	bne	r2,zero,d10 <button_interrupt+0x6a4>
				//fprintf(stderr,"Button 3 is release.\n");
				mainDataType->btn[2]=RISING_BUTTON;
     ca4:	e0bffc17 	ldw	r2,-16(fp)
     ca8:	00c00084 	movi	r3,2
     cac:	10c00215 	stw	r3,8(r2)
				if (mainDataType->setting){
     cb0:	e0bffc17 	ldw	r2,-16(fp)
     cb4:	10800617 	ldw	r2,24(r2)
     cb8:	10001526 	beq	r2,zero,d10 <button_interrupt+0x6a4>
					if(mainDataType->lcdData->ctrl_blinker == ON_OFF_BLINKS){
     cbc:	e0bffc17 	ldw	r2,-16(fp)
     cc0:	10800417 	ldw	r2,16(r2)
     cc4:	10800017 	ldw	r2,0(r2)
     cc8:	10800058 	cmpnei	r2,r2,1
     ccc:	1000051e 	bne	r2,zero,ce4 <button_interrupt+0x678>
						mainDataType->lcdData->ctrl_blinker = T_ON_BLINKS;
     cd0:	e0bffc17 	ldw	r2,-16(fp)
     cd4:	10800417 	ldw	r2,16(r2)
     cd8:	00c00084 	movi	r3,2
     cdc:	10c00015 	stw	r3,0(r2)
     ce0:	00000406 	br	cf4 <button_interrupt+0x688>
					}
					else {
						mainDataType->lcdData->ctrl_blinker = ON_OFF_BLINKS;
     ce4:	e0bffc17 	ldw	r2,-16(fp)
     ce8:	10800417 	ldw	r2,16(r2)
     cec:	00c00044 	movi	r3,1
     cf0:	10c00015 	stw	r3,0(r2)
					}
					mainDataType->btn[2]=PENDING_BUTTON;
     cf4:	e0bffc17 	ldw	r2,-16(fp)
     cf8:	10000215 	stw	zero,8(r2)
				}
			}
		break;
     cfc:	00000406 	br	d10 <button_interrupt+0x6a4>
					else mainDataType->pwm_selected = PWM_NUMBER-1;
					mainDataType->btn[0] = PENDING_BUTTON;
				}
			}

		break;
     d00:	0001883a 	nop
     d04:	00000306 	br	d14 <button_interrupt+0x6a8>
					if(mainDataType->pwm_selected<PWM_NUMBER-1)mainDataType->pwm_selected += 1;
					else mainDataType->pwm_selected = 0;
					mainDataType->btn[1] = PENDING_BUTTON;
				}
			}
		break;
     d08:	0001883a 	nop
     d0c:	00000106 	br	d14 <button_interrupt+0x6a8>
						mainDataType->lcdData->ctrl_blinker = ON_OFF_BLINKS;
					}
					mainDataType->btn[2]=PENDING_BUTTON;
				}
			}
		break;
     d10:	0001883a 	nop
		default:
		break;
	}
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_COMMANDE_BASE,BUTTONS_COMMANDE_RESET_VALUE);
     d14:	0007883a 	mov	r3,zero
     d18:	00820034 	movhi	r2,2048
     d1c:	10801704 	addi	r2,r2,92
     d20:	10c00035 	stwio	r3,0(r2)
}
     d24:	0001883a 	nop
     d28:	e6fffe04 	addi	sp,fp,-8
     d2c:	dfc00317 	ldw	ra,12(sp)
     d30:	df000217 	ldw	fp,8(sp)
     d34:	dc400117 	ldw	r17,4(sp)
     d38:	dc000017 	ldw	r16,0(sp)
     d3c:	dec00404 	addi	sp,sp,16
     d40:	f800283a 	ret

00000d44 <lcd_refresh_interrupt>:

void lcd_refresh_interrupt(void* isr_context){
     d44:	defffb04 	addi	sp,sp,-20
     d48:	dfc00415 	stw	ra,16(sp)
     d4c:	df000315 	stw	fp,12(sp)
     d50:	dc000215 	stw	r16,8(sp)
     d54:	df000304 	addi	fp,sp,12
     d58:	e13ffe15 	stw	r4,-8(fp)
	MainDataType *mainDataType = isr_context;
     d5c:	e0bffe17 	ldw	r2,-8(fp)
     d60:	e0bffd15 	stw	r2,-12(fp)

	clear_lcd();
     d64:	000026c0 	call	26c <clear_lcd>

	if(mainDataType->all_pwm[mainDataType->pwm_selected].id<10) printf("PWM  %d : ",mainDataType->all_pwm[mainDataType->pwm_selected].id);
     d68:	e0bffd17 	ldw	r2,-12(fp)
     d6c:	14000517 	ldw	r16,20(r2)
     d70:	e0bffd17 	ldw	r2,-12(fp)
     d74:	10800317 	ldw	r2,12(r2)
     d78:	01400304 	movi	r5,12
     d7c:	1009883a 	mov	r4,r2
     d80:	00017b40 	call	17b4 <__mulsi3>
     d84:	8085883a 	add	r2,r16,r2
     d88:	10800017 	ldw	r2,0(r2)
     d8c:	10800288 	cmpgei	r2,r2,10
     d90:	10000e1e 	bne	r2,zero,dcc <lcd_refresh_interrupt+0x88>
     d94:	e0bffd17 	ldw	r2,-12(fp)
     d98:	14000517 	ldw	r16,20(r2)
     d9c:	e0bffd17 	ldw	r2,-12(fp)
     da0:	10800317 	ldw	r2,12(r2)
     da4:	01400304 	movi	r5,12
     da8:	1009883a 	mov	r4,r2
     dac:	00017b40 	call	17b4 <__mulsi3>
     db0:	8085883a 	add	r2,r16,r2
     db4:	10800017 	ldw	r2,0(r2)
     db8:	100b883a 	mov	r5,r2
     dbc:	01000074 	movhi	r4,1
     dc0:	21081f04 	addi	r4,r4,8316
     dc4:	00021500 	call	2150 <printf>
     dc8:	00000d06 	br	e00 <lcd_refresh_interrupt+0xbc>
	else printf("PWM %d : ",mainDataType->all_pwm[mainDataType->pwm_selected].id);
     dcc:	e0bffd17 	ldw	r2,-12(fp)
     dd0:	14000517 	ldw	r16,20(r2)
     dd4:	e0bffd17 	ldw	r2,-12(fp)
     dd8:	10800317 	ldw	r2,12(r2)
     ddc:	01400304 	movi	r5,12
     de0:	1009883a 	mov	r4,r2
     de4:	00017b40 	call	17b4 <__mulsi3>
     de8:	8085883a 	add	r2,r16,r2
     dec:	10800017 	ldw	r2,0(r2)
     df0:	100b883a 	mov	r5,r2
     df4:	01000074 	movhi	r4,1
     df8:	21082204 	addi	r4,r4,8328
     dfc:	00021500 	call	2150 <printf>

	if((mainDataType->lcdData->ctrl_blinker==ON_OFF_BLINKS && mainDataType->lcdData->blink<DIVIDE_FREQ_FOR_BLINKS) || mainDataType->lcdData->ctrl_blinker!=ON_OFF_BLINKS){
     e00:	e0bffd17 	ldw	r2,-12(fp)
     e04:	10800417 	ldw	r2,16(r2)
     e08:	10800017 	ldw	r2,0(r2)
     e0c:	10800058 	cmpnei	r2,r2,1
     e10:	1000051e 	bne	r2,zero,e28 <lcd_refresh_interrupt+0xe4>
     e14:	e0bffd17 	ldw	r2,-12(fp)
     e18:	10800417 	ldw	r2,16(r2)
     e1c:	10800117 	ldw	r2,4(r2)
     e20:	10800150 	cmplti	r2,r2,5
     e24:	1000051e 	bne	r2,zero,e3c <lcd_refresh_interrupt+0xf8>
     e28:	e0bffd17 	ldw	r2,-12(fp)
     e2c:	10800417 	ldw	r2,16(r2)
     e30:	10800017 	ldw	r2,0(r2)
     e34:	10800060 	cmpeqi	r2,r2,1
     e38:	1000121e 	bne	r2,zero,e84 <lcd_refresh_interrupt+0x140>
		if(mainDataType->all_pwm[mainDataType->pwm_selected].status) printf("ON");
     e3c:	e0bffd17 	ldw	r2,-12(fp)
     e40:	14000517 	ldw	r16,20(r2)
     e44:	e0bffd17 	ldw	r2,-12(fp)
     e48:	10800317 	ldw	r2,12(r2)
     e4c:	01400304 	movi	r5,12
     e50:	1009883a 	mov	r4,r2
     e54:	00017b40 	call	17b4 <__mulsi3>
     e58:	8085883a 	add	r2,r16,r2
     e5c:	10800103 	ldbu	r2,4(r2)
     e60:	10803fcc 	andi	r2,r2,255
     e64:	10000426 	beq	r2,zero,e78 <lcd_refresh_interrupt+0x134>
     e68:	01000074 	movhi	r4,1
     e6c:	21082504 	addi	r4,r4,8340
     e70:	00021500 	call	2150 <printf>
     e74:	00000306 	br	e84 <lcd_refresh_interrupt+0x140>
		else printf("OFF");
     e78:	01000074 	movhi	r4,1
     e7c:	21082604 	addi	r4,r4,8344
     e80:	00021500 	call	2150 <printf>
	}

	if((mainDataType->lcdData->ctrl_blinker==T_ON_BLINKS && mainDataType->lcdData->blink<DIVIDE_FREQ_FOR_BLINKS) || mainDataType->lcdData->ctrl_blinker!=T_ON_BLINKS){
     e84:	e0bffd17 	ldw	r2,-12(fp)
     e88:	10800417 	ldw	r2,16(r2)
     e8c:	10800017 	ldw	r2,0(r2)
     e90:	10800098 	cmpnei	r2,r2,2
     e94:	1000051e 	bne	r2,zero,eac <lcd_refresh_interrupt+0x168>
     e98:	e0bffd17 	ldw	r2,-12(fp)
     e9c:	10800417 	ldw	r2,16(r2)
     ea0:	10800117 	ldw	r2,4(r2)
     ea4:	10800150 	cmplti	r2,r2,5
     ea8:	1000051e 	bne	r2,zero,ec0 <lcd_refresh_interrupt+0x17c>
     eac:	e0bffd17 	ldw	r2,-12(fp)
     eb0:	10800417 	ldw	r2,16(r2)
     eb4:	10800017 	ldw	r2,0(r2)
     eb8:	108000a0 	cmpeqi	r2,r2,2
     ebc:	10000e1e 	bne	r2,zero,ef8 <lcd_refresh_interrupt+0x1b4>
		printf("\nTon : %d",mainDataType->all_pwm[mainDataType->pwm_selected].t_on);
     ec0:	e0bffd17 	ldw	r2,-12(fp)
     ec4:	14000517 	ldw	r16,20(r2)
     ec8:	e0bffd17 	ldw	r2,-12(fp)
     ecc:	10800317 	ldw	r2,12(r2)
     ed0:	01400304 	movi	r5,12
     ed4:	1009883a 	mov	r4,r2
     ed8:	00017b40 	call	17b4 <__mulsi3>
     edc:	8085883a 	add	r2,r16,r2
     ee0:	10800217 	ldw	r2,8(r2)
     ee4:	100b883a 	mov	r5,r2
     ee8:	01000074 	movhi	r4,1
     eec:	21082704 	addi	r4,r4,8348
     ef0:	00021500 	call	2150 <printf>
     ef4:	00000306 	br	f04 <lcd_refresh_interrupt+0x1c0>
	}else printf("\nTon :");
     ef8:	01000074 	movhi	r4,1
     efc:	21082a04 	addi	r4,r4,8360
     f00:	00021500 	call	2150 <printf>


	if(mainDataType->lcdData->ctrl_blinker!=NONE_BLINKS){
     f04:	e0bffd17 	ldw	r2,-12(fp)
     f08:	10800417 	ldw	r2,16(r2)
     f0c:	10800017 	ldw	r2,0(r2)
     f10:	10001026 	beq	r2,zero,f54 <lcd_refresh_interrupt+0x210>
		if(mainDataType->lcdData->blink<DIVIDE_FREQ_FOR_BLINKS*2) mainDataType->lcdData->blink += 1;
     f14:	e0bffd17 	ldw	r2,-12(fp)
     f18:	10800417 	ldw	r2,16(r2)
     f1c:	10800117 	ldw	r2,4(r2)
     f20:	10800288 	cmpgei	r2,r2,10
     f24:	1000081e 	bne	r2,zero,f48 <lcd_refresh_interrupt+0x204>
     f28:	e0bffd17 	ldw	r2,-12(fp)
     f2c:	10800417 	ldw	r2,16(r2)
     f30:	e0fffd17 	ldw	r3,-12(fp)
     f34:	18c00417 	ldw	r3,16(r3)
     f38:	18c00117 	ldw	r3,4(r3)
     f3c:	18c00044 	addi	r3,r3,1
     f40:	10c00115 	stw	r3,4(r2)
     f44:	00000306 	br	f54 <lcd_refresh_interrupt+0x210>
		else mainDataType->lcdData->blink = 0;
     f48:	e0bffd17 	ldw	r2,-12(fp)
     f4c:	10800417 	ldw	r2,16(r2)
     f50:	10000115 	stw	zero,4(r2)
	}
	IOWR_ALTERA_AVALON_TIMER_STATUS(LCD_REFRESH_TIMER_BASE,0x0000);
     f54:	0007883a 	mov	r3,zero
     f58:	00820034 	movhi	r2,2048
     f5c:	10802004 	addi	r2,r2,128
     f60:	10c00035 	stwio	r3,0(r2)
}
     f64:	0001883a 	nop
     f68:	e6ffff04 	addi	sp,fp,-4
     f6c:	dfc00217 	ldw	ra,8(sp)
     f70:	df000117 	ldw	fp,4(sp)
     f74:	dc000017 	ldw	r16,0(sp)
     f78:	dec00304 	addi	sp,sp,12
     f7c:	f800283a 	ret

00000f80 <switch_settings_interrupt>:

void switch_settings_interrupt(void* isr_context){
     f80:	defffd04 	addi	sp,sp,-12
     f84:	df000215 	stw	fp,8(sp)
     f88:	df000204 	addi	fp,sp,8
     f8c:	e13fff15 	stw	r4,-4(fp)
	MainDataType *mainDataType = isr_context;
     f90:	e0bfff17 	ldw	r2,-4(fp)
     f94:	e0bffe15 	stw	r2,-8(fp)
	mainDataType->setting = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_REGLAGE_BASE);
     f98:	00820034 	movhi	r2,2048
     f9c:	10801004 	addi	r2,r2,64
     fa0:	10c00037 	ldwio	r3,0(r2)
     fa4:	e0bffe17 	ldw	r2,-8(fp)
     fa8:	10c00615 	stw	r3,24(r2)
	if(mainDataType->setting){
     fac:	e0bffe17 	ldw	r2,-8(fp)
     fb0:	10800617 	ldw	r2,24(r2)
     fb4:	10000526 	beq	r2,zero,fcc <switch_settings_interrupt+0x4c>
		mainDataType->lcdData->ctrl_blinker = ON_OFF_BLINKS;
     fb8:	e0bffe17 	ldw	r2,-8(fp)
     fbc:	10800417 	ldw	r2,16(r2)
     fc0:	00c00044 	movi	r3,1
     fc4:	10c00015 	stw	r3,0(r2)
     fc8:	00000306 	br	fd8 <switch_settings_interrupt+0x58>
	}
	else{
		mainDataType->lcdData->ctrl_blinker = NONE_BLINKS;
     fcc:	e0bffe17 	ldw	r2,-8(fp)
     fd0:	10800417 	ldw	r2,16(r2)
     fd4:	10000015 	stw	zero,0(r2)
	}
	//fprintf(stderr,"%d", IORD_ALTERA_AVALON_PIO_DATA(SWITCH_REGLAGE_BASE));
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCH_REGLAGE_BASE,SWITCH_REGLAGE_RESET_VALUE);
     fd8:	0007883a 	mov	r3,zero
     fdc:	00820034 	movhi	r2,2048
     fe0:	10801304 	addi	r2,r2,76
     fe4:	10c00035 	stwio	r3,0(r2)
}
     fe8:	0001883a 	nop
     fec:	e037883a 	mov	sp,fp
     ff0:	df000017 	ldw	fp,0(sp)
     ff4:	dec00104 	addi	sp,sp,4
     ff8:	f800283a 	ret

00000ffc <adding_interrupt>:

void adding_interrupt(void* isr_context){
     ffc:	defffa04 	addi	sp,sp,-24
    1000:	dfc00515 	stw	ra,20(sp)
    1004:	df000415 	stw	fp,16(sp)
    1008:	dc400315 	stw	r17,12(sp)
    100c:	dc000215 	stw	r16,8(sp)
    1010:	df000404 	addi	fp,sp,16
    1014:	e13ffd15 	stw	r4,-12(fp)
	MainDataType *mainDataType = isr_context;
    1018:	e0bffd17 	ldw	r2,-12(fp)
    101c:	e0bffc15 	stw	r2,-16(fp)
	if(mainDataType->lcdData->ctrl_blinker == T_ON_BLINKS && mainDataType->delay > 20){
    1020:	e0bffc17 	ldw	r2,-16(fp)
    1024:	10800417 	ldw	r2,16(r2)
    1028:	10800017 	ldw	r2,0(r2)
    102c:	10800098 	cmpnei	r2,r2,2
    1030:	10008a1e 	bne	r2,zero,125c <adding_interrupt+0x260>
    1034:	e0bffc17 	ldw	r2,-16(fp)
    1038:	10800717 	ldw	r2,28(r2)
    103c:	10800550 	cmplti	r2,r2,21
    1040:	1000861e 	bne	r2,zero,125c <adding_interrupt+0x260>
		if(mainDataType->btn[0]==FALLING_BUTTON || mainDataType->btn[0]==PENDING_RISING_BUTTON){
    1044:	e0bffc17 	ldw	r2,-16(fp)
    1048:	10800017 	ldw	r2,0(r2)
    104c:	10800060 	cmpeqi	r2,r2,1
    1050:	1000041e 	bne	r2,zero,1064 <adding_interrupt+0x68>
    1054:	e0bffc17 	ldw	r2,-16(fp)
    1058:	10800017 	ldw	r2,0(r2)
    105c:	108000d8 	cmpnei	r2,r2,3
    1060:	10003c1e 	bne	r2,zero,1154 <adding_interrupt+0x158>
			mainDataType->btn[0]=PENDING_RISING_BUTTON;
    1064:	e0bffc17 	ldw	r2,-16(fp)
    1068:	00c000c4 	movi	r3,3
    106c:	10c00015 	stw	r3,0(r2)
			if(mainDataType->all_pwm[mainDataType->pwm_selected].t_on >= 10)
    1070:	e0bffc17 	ldw	r2,-16(fp)
    1074:	14000517 	ldw	r16,20(r2)
    1078:	e0bffc17 	ldw	r2,-16(fp)
    107c:	10800317 	ldw	r2,12(r2)
    1080:	01400304 	movi	r5,12
    1084:	1009883a 	mov	r4,r2
    1088:	00017b40 	call	17b4 <__mulsi3>
    108c:	8085883a 	add	r2,r16,r2
    1090:	10800217 	ldw	r2,8(r2)
    1094:	10800290 	cmplti	r2,r2,10
    1098:	1000141e 	bne	r2,zero,10ec <adding_interrupt+0xf0>
			mainDataType->all_pwm[mainDataType->pwm_selected].t_on -= 10;
    109c:	e0bffc17 	ldw	r2,-16(fp)
    10a0:	14000517 	ldw	r16,20(r2)
    10a4:	e0bffc17 	ldw	r2,-16(fp)
    10a8:	10800317 	ldw	r2,12(r2)
    10ac:	01400304 	movi	r5,12
    10b0:	1009883a 	mov	r4,r2
    10b4:	00017b40 	call	17b4 <__mulsi3>
    10b8:	80a1883a 	add	r16,r16,r2
    10bc:	e0bffc17 	ldw	r2,-16(fp)
    10c0:	14400517 	ldw	r17,20(r2)
    10c4:	e0bffc17 	ldw	r2,-16(fp)
    10c8:	10800317 	ldw	r2,12(r2)
    10cc:	01400304 	movi	r5,12
    10d0:	1009883a 	mov	r4,r2
    10d4:	00017b40 	call	17b4 <__mulsi3>
    10d8:	8885883a 	add	r2,r17,r2
    10dc:	10800217 	ldw	r2,8(r2)
    10e0:	10bffd84 	addi	r2,r2,-10
    10e4:	80800215 	stw	r2,8(r16)
    10e8:	00000a06 	br	1114 <adding_interrupt+0x118>
			else mainDataType->all_pwm[mainDataType->pwm_selected].t_on = MAX_T_ON;
    10ec:	e0bffc17 	ldw	r2,-16(fp)
    10f0:	14000517 	ldw	r16,20(r2)
    10f4:	e0bffc17 	ldw	r2,-16(fp)
    10f8:	10800317 	ldw	r2,12(r2)
    10fc:	01400304 	movi	r5,12
    1100:	1009883a 	mov	r4,r2
    1104:	00017b40 	call	17b4 <__mulsi3>
    1108:	8085883a 	add	r2,r16,r2
    110c:	00c10004 	movi	r3,1024
    1110:	10c00215 	stw	r3,8(r2)
			apply_t_on_on_channel(mainDataType->all_pwm[mainDataType->pwm_selected].t_on,mainDataType->pwm_selected);
    1114:	e0bffc17 	ldw	r2,-16(fp)
    1118:	14000517 	ldw	r16,20(r2)
    111c:	e0bffc17 	ldw	r2,-16(fp)
    1120:	10800317 	ldw	r2,12(r2)
    1124:	01400304 	movi	r5,12
    1128:	1009883a 	mov	r4,r2
    112c:	00017b40 	call	17b4 <__mulsi3>
    1130:	8085883a 	add	r2,r16,r2
    1134:	10c00217 	ldw	r3,8(r2)
    1138:	e0bffc17 	ldw	r2,-16(fp)
    113c:	10800317 	ldw	r2,12(r2)
    1140:	100b883a 	mov	r5,r2
    1144:	1809883a 	mov	r4,r3
    1148:	00015440 	call	1544 <apply_t_on_on_channel>
}

void adding_interrupt(void* isr_context){
	MainDataType *mainDataType = isr_context;
	if(mainDataType->lcdData->ctrl_blinker == T_ON_BLINKS && mainDataType->delay > 20){
		if(mainDataType->btn[0]==FALLING_BUTTON || mainDataType->btn[0]==PENDING_RISING_BUTTON){
    114c:	0001883a 	nop
    1150:	0000da06 	br	14bc <adding_interrupt+0x4c0>
			mainDataType->btn[0]=PENDING_RISING_BUTTON;
			if(mainDataType->all_pwm[mainDataType->pwm_selected].t_on >= 10)
			mainDataType->all_pwm[mainDataType->pwm_selected].t_on -= 10;
			else mainDataType->all_pwm[mainDataType->pwm_selected].t_on = MAX_T_ON;
			apply_t_on_on_channel(mainDataType->all_pwm[mainDataType->pwm_selected].t_on,mainDataType->pwm_selected);
		}else if(mainDataType->btn[1]==FALLING_BUTTON || mainDataType->btn[1]==PENDING_RISING_BUTTON){
    1154:	e0bffc17 	ldw	r2,-16(fp)
    1158:	10800117 	ldw	r2,4(r2)
    115c:	10800060 	cmpeqi	r2,r2,1
    1160:	1000041e 	bne	r2,zero,1174 <adding_interrupt+0x178>
    1164:	e0bffc17 	ldw	r2,-16(fp)
    1168:	10800117 	ldw	r2,4(r2)
    116c:	108000d8 	cmpnei	r2,r2,3
    1170:	1000d21e 	bne	r2,zero,14bc <adding_interrupt+0x4c0>
			mainDataType->btn[1]=PENDING_RISING_BUTTON;
    1174:	e0bffc17 	ldw	r2,-16(fp)
    1178:	00c000c4 	movi	r3,3
    117c:	10c00115 	stw	r3,4(r2)
			if(mainDataType->all_pwm[mainDataType->pwm_selected].t_on <= MAX_T_ON-10)
    1180:	e0bffc17 	ldw	r2,-16(fp)
    1184:	14000517 	ldw	r16,20(r2)
    1188:	e0bffc17 	ldw	r2,-16(fp)
    118c:	10800317 	ldw	r2,12(r2)
    1190:	01400304 	movi	r5,12
    1194:	1009883a 	mov	r4,r2
    1198:	00017b40 	call	17b4 <__mulsi3>
    119c:	8085883a 	add	r2,r16,r2
    11a0:	10800217 	ldw	r2,8(r2)
    11a4:	1080fdc8 	cmpgei	r2,r2,1015
    11a8:	1000141e 	bne	r2,zero,11fc <adding_interrupt+0x200>
			mainDataType->all_pwm[mainDataType->pwm_selected].t_on += 10;
    11ac:	e0bffc17 	ldw	r2,-16(fp)
    11b0:	14000517 	ldw	r16,20(r2)
    11b4:	e0bffc17 	ldw	r2,-16(fp)
    11b8:	10800317 	ldw	r2,12(r2)
    11bc:	01400304 	movi	r5,12
    11c0:	1009883a 	mov	r4,r2
    11c4:	00017b40 	call	17b4 <__mulsi3>
    11c8:	80a1883a 	add	r16,r16,r2
    11cc:	e0bffc17 	ldw	r2,-16(fp)
    11d0:	14400517 	ldw	r17,20(r2)
    11d4:	e0bffc17 	ldw	r2,-16(fp)
    11d8:	10800317 	ldw	r2,12(r2)
    11dc:	01400304 	movi	r5,12
    11e0:	1009883a 	mov	r4,r2
    11e4:	00017b40 	call	17b4 <__mulsi3>
    11e8:	8885883a 	add	r2,r17,r2
    11ec:	10800217 	ldw	r2,8(r2)
    11f0:	10800284 	addi	r2,r2,10
    11f4:	80800215 	stw	r2,8(r16)
    11f8:	00000906 	br	1220 <adding_interrupt+0x224>
			else mainDataType->all_pwm[mainDataType->pwm_selected].t_on = 0;
    11fc:	e0bffc17 	ldw	r2,-16(fp)
    1200:	14000517 	ldw	r16,20(r2)
    1204:	e0bffc17 	ldw	r2,-16(fp)
    1208:	10800317 	ldw	r2,12(r2)
    120c:	01400304 	movi	r5,12
    1210:	1009883a 	mov	r4,r2
    1214:	00017b40 	call	17b4 <__mulsi3>
    1218:	8085883a 	add	r2,r16,r2
    121c:	10000215 	stw	zero,8(r2)
			apply_t_on_on_channel(mainDataType->all_pwm[mainDataType->pwm_selected].t_on,mainDataType->pwm_selected);
    1220:	e0bffc17 	ldw	r2,-16(fp)
    1224:	14000517 	ldw	r16,20(r2)
    1228:	e0bffc17 	ldw	r2,-16(fp)
    122c:	10800317 	ldw	r2,12(r2)
    1230:	01400304 	movi	r5,12
    1234:	1009883a 	mov	r4,r2
    1238:	00017b40 	call	17b4 <__mulsi3>
    123c:	8085883a 	add	r2,r16,r2
    1240:	10c00217 	ldw	r3,8(r2)
    1244:	e0bffc17 	ldw	r2,-16(fp)
    1248:	10800317 	ldw	r2,12(r2)
    124c:	100b883a 	mov	r5,r2
    1250:	1809883a 	mov	r4,r3
    1254:	00015440 	call	1544 <apply_t_on_on_channel>
}

void adding_interrupt(void* isr_context){
	MainDataType *mainDataType = isr_context;
	if(mainDataType->lcdData->ctrl_blinker == T_ON_BLINKS && mainDataType->delay > 20){
		if(mainDataType->btn[0]==FALLING_BUTTON || mainDataType->btn[0]==PENDING_RISING_BUTTON){
    1258:	00009806 	br	14bc <adding_interrupt+0x4c0>
			mainDataType->all_pwm[mainDataType->pwm_selected].t_on += 10;
			else mainDataType->all_pwm[mainDataType->pwm_selected].t_on = 0;
			apply_t_on_on_channel(mainDataType->all_pwm[mainDataType->pwm_selected].t_on,mainDataType->pwm_selected);
		}
	}
	else if(mainDataType->lcdData->ctrl_blinker == T_ON_BLINKS && mainDataType->delay >5){
    125c:	e0bffc17 	ldw	r2,-16(fp)
    1260:	10800417 	ldw	r2,16(r2)
    1264:	10800017 	ldw	r2,0(r2)
    1268:	10800098 	cmpnei	r2,r2,2
    126c:	10008d1e 	bne	r2,zero,14a4 <adding_interrupt+0x4a8>
    1270:	e0bffc17 	ldw	r2,-16(fp)
    1274:	10800717 	ldw	r2,28(r2)
    1278:	10800190 	cmplti	r2,r2,6
    127c:	1000891e 	bne	r2,zero,14a4 <adding_interrupt+0x4a8>
		if(mainDataType->btn[0]==FALLING_BUTTON || mainDataType->btn[0]==PENDING_RISING_BUTTON){
    1280:	e0bffc17 	ldw	r2,-16(fp)
    1284:	10800017 	ldw	r2,0(r2)
    1288:	10800060 	cmpeqi	r2,r2,1
    128c:	1000041e 	bne	r2,zero,12a0 <adding_interrupt+0x2a4>
    1290:	e0bffc17 	ldw	r2,-16(fp)
    1294:	10800017 	ldw	r2,0(r2)
    1298:	108000d8 	cmpnei	r2,r2,3
    129c:	10003a1e 	bne	r2,zero,1388 <adding_interrupt+0x38c>
			mainDataType->btn[0]=PENDING_RISING_BUTTON;
    12a0:	e0bffc17 	ldw	r2,-16(fp)
    12a4:	00c000c4 	movi	r3,3
    12a8:	10c00015 	stw	r3,0(r2)
			if(mainDataType->all_pwm[mainDataType->pwm_selected].t_on > 0)
    12ac:	e0bffc17 	ldw	r2,-16(fp)
    12b0:	14000517 	ldw	r16,20(r2)
    12b4:	e0bffc17 	ldw	r2,-16(fp)
    12b8:	10800317 	ldw	r2,12(r2)
    12bc:	01400304 	movi	r5,12
    12c0:	1009883a 	mov	r4,r2
    12c4:	00017b40 	call	17b4 <__mulsi3>
    12c8:	8085883a 	add	r2,r16,r2
    12cc:	10800217 	ldw	r2,8(r2)
    12d0:	0080140e 	bge	zero,r2,1324 <adding_interrupt+0x328>
			mainDataType->all_pwm[mainDataType->pwm_selected].t_on -= 1;
    12d4:	e0bffc17 	ldw	r2,-16(fp)
    12d8:	14000517 	ldw	r16,20(r2)
    12dc:	e0bffc17 	ldw	r2,-16(fp)
    12e0:	10800317 	ldw	r2,12(r2)
    12e4:	01400304 	movi	r5,12
    12e8:	1009883a 	mov	r4,r2
    12ec:	00017b40 	call	17b4 <__mulsi3>
    12f0:	80a1883a 	add	r16,r16,r2
    12f4:	e0bffc17 	ldw	r2,-16(fp)
    12f8:	14400517 	ldw	r17,20(r2)
    12fc:	e0bffc17 	ldw	r2,-16(fp)
    1300:	10800317 	ldw	r2,12(r2)
    1304:	01400304 	movi	r5,12
    1308:	1009883a 	mov	r4,r2
    130c:	00017b40 	call	17b4 <__mulsi3>
    1310:	8885883a 	add	r2,r17,r2
    1314:	10800217 	ldw	r2,8(r2)
    1318:	10bfffc4 	addi	r2,r2,-1
    131c:	80800215 	stw	r2,8(r16)
    1320:	00000a06 	br	134c <adding_interrupt+0x350>
			else mainDataType->all_pwm[mainDataType->pwm_selected].t_on = MAX_T_ON;
    1324:	e0bffc17 	ldw	r2,-16(fp)
    1328:	14000517 	ldw	r16,20(r2)
    132c:	e0bffc17 	ldw	r2,-16(fp)
    1330:	10800317 	ldw	r2,12(r2)
    1334:	01400304 	movi	r5,12
    1338:	1009883a 	mov	r4,r2
    133c:	00017b40 	call	17b4 <__mulsi3>
    1340:	8085883a 	add	r2,r16,r2
    1344:	00c10004 	movi	r3,1024
    1348:	10c00215 	stw	r3,8(r2)
			apply_t_on_on_channel(mainDataType->all_pwm[mainDataType->pwm_selected].t_on,mainDataType->pwm_selected);
    134c:	e0bffc17 	ldw	r2,-16(fp)
    1350:	14000517 	ldw	r16,20(r2)
    1354:	e0bffc17 	ldw	r2,-16(fp)
    1358:	10800317 	ldw	r2,12(r2)
    135c:	01400304 	movi	r5,12
    1360:	1009883a 	mov	r4,r2
    1364:	00017b40 	call	17b4 <__mulsi3>
    1368:	8085883a 	add	r2,r16,r2
    136c:	10c00217 	ldw	r3,8(r2)
    1370:	e0bffc17 	ldw	r2,-16(fp)
    1374:	10800317 	ldw	r2,12(r2)
    1378:	100b883a 	mov	r5,r2
    137c:	1809883a 	mov	r4,r3
    1380:	00015440 	call	1544 <apply_t_on_on_channel>
			else mainDataType->all_pwm[mainDataType->pwm_selected].t_on = 0;
			apply_t_on_on_channel(mainDataType->all_pwm[mainDataType->pwm_selected].t_on,mainDataType->pwm_selected);
		}
	}
	else if(mainDataType->lcdData->ctrl_blinker == T_ON_BLINKS && mainDataType->delay >5){
		if(mainDataType->btn[0]==FALLING_BUTTON || mainDataType->btn[0]==PENDING_RISING_BUTTON){
    1384:	00004106 	br	148c <adding_interrupt+0x490>
			mainDataType->btn[0]=PENDING_RISING_BUTTON;
			if(mainDataType->all_pwm[mainDataType->pwm_selected].t_on > 0)
			mainDataType->all_pwm[mainDataType->pwm_selected].t_on -= 1;
			else mainDataType->all_pwm[mainDataType->pwm_selected].t_on = MAX_T_ON;
			apply_t_on_on_channel(mainDataType->all_pwm[mainDataType->pwm_selected].t_on,mainDataType->pwm_selected);
		}else if(mainDataType->btn[1]==FALLING_BUTTON || mainDataType->btn[1]==PENDING_RISING_BUTTON){
    1388:	e0bffc17 	ldw	r2,-16(fp)
    138c:	10800117 	ldw	r2,4(r2)
    1390:	10800060 	cmpeqi	r2,r2,1
    1394:	1000041e 	bne	r2,zero,13a8 <adding_interrupt+0x3ac>
    1398:	e0bffc17 	ldw	r2,-16(fp)
    139c:	10800117 	ldw	r2,4(r2)
    13a0:	108000d8 	cmpnei	r2,r2,3
    13a4:	1000391e 	bne	r2,zero,148c <adding_interrupt+0x490>
			mainDataType->btn[1]=PENDING_RISING_BUTTON;
    13a8:	e0bffc17 	ldw	r2,-16(fp)
    13ac:	00c000c4 	movi	r3,3
    13b0:	10c00115 	stw	r3,4(r2)
			if(mainDataType->all_pwm[mainDataType->pwm_selected].t_on < MAX_T_ON)
    13b4:	e0bffc17 	ldw	r2,-16(fp)
    13b8:	14000517 	ldw	r16,20(r2)
    13bc:	e0bffc17 	ldw	r2,-16(fp)
    13c0:	10800317 	ldw	r2,12(r2)
    13c4:	01400304 	movi	r5,12
    13c8:	1009883a 	mov	r4,r2
    13cc:	00017b40 	call	17b4 <__mulsi3>
    13d0:	8085883a 	add	r2,r16,r2
    13d4:	10800217 	ldw	r2,8(r2)
    13d8:	10810008 	cmpgei	r2,r2,1024
    13dc:	1000141e 	bne	r2,zero,1430 <adding_interrupt+0x434>
			mainDataType->all_pwm[mainDataType->pwm_selected].t_on += 1;
    13e0:	e0bffc17 	ldw	r2,-16(fp)
    13e4:	14000517 	ldw	r16,20(r2)
    13e8:	e0bffc17 	ldw	r2,-16(fp)
    13ec:	10800317 	ldw	r2,12(r2)
    13f0:	01400304 	movi	r5,12
    13f4:	1009883a 	mov	r4,r2
    13f8:	00017b40 	call	17b4 <__mulsi3>
    13fc:	80a1883a 	add	r16,r16,r2
    1400:	e0bffc17 	ldw	r2,-16(fp)
    1404:	14400517 	ldw	r17,20(r2)
    1408:	e0bffc17 	ldw	r2,-16(fp)
    140c:	10800317 	ldw	r2,12(r2)
    1410:	01400304 	movi	r5,12
    1414:	1009883a 	mov	r4,r2
    1418:	00017b40 	call	17b4 <__mulsi3>
    141c:	8885883a 	add	r2,r17,r2
    1420:	10800217 	ldw	r2,8(r2)
    1424:	10800044 	addi	r2,r2,1
    1428:	80800215 	stw	r2,8(r16)
    142c:	00000906 	br	1454 <adding_interrupt+0x458>
			else mainDataType->all_pwm[mainDataType->pwm_selected].t_on = 0;
    1430:	e0bffc17 	ldw	r2,-16(fp)
    1434:	14000517 	ldw	r16,20(r2)
    1438:	e0bffc17 	ldw	r2,-16(fp)
    143c:	10800317 	ldw	r2,12(r2)
    1440:	01400304 	movi	r5,12
    1444:	1009883a 	mov	r4,r2
    1448:	00017b40 	call	17b4 <__mulsi3>
    144c:	8085883a 	add	r2,r16,r2
    1450:	10000215 	stw	zero,8(r2)
			apply_t_on_on_channel(mainDataType->all_pwm[mainDataType->pwm_selected].t_on,mainDataType->pwm_selected);
    1454:	e0bffc17 	ldw	r2,-16(fp)
    1458:	14000517 	ldw	r16,20(r2)
    145c:	e0bffc17 	ldw	r2,-16(fp)
    1460:	10800317 	ldw	r2,12(r2)
    1464:	01400304 	movi	r5,12
    1468:	1009883a 	mov	r4,r2
    146c:	00017b40 	call	17b4 <__mulsi3>
    1470:	8085883a 	add	r2,r16,r2
    1474:	10c00217 	ldw	r3,8(r2)
    1478:	e0bffc17 	ldw	r2,-16(fp)
    147c:	10800317 	ldw	r2,12(r2)
    1480:	100b883a 	mov	r5,r2
    1484:	1809883a 	mov	r4,r3
    1488:	00015440 	call	1544 <apply_t_on_on_channel>
		}
		mainDataType->delay +=1;
    148c:	e0bffc17 	ldw	r2,-16(fp)
    1490:	10800717 	ldw	r2,28(r2)
    1494:	10c00044 	addi	r3,r2,1
    1498:	e0bffc17 	ldw	r2,-16(fp)
    149c:	10c00715 	stw	r3,28(r2)
    14a0:	00000706 	br	14c0 <adding_interrupt+0x4c4>
	}
	else {
		mainDataType->delay +=1;
    14a4:	e0bffc17 	ldw	r2,-16(fp)
    14a8:	10800717 	ldw	r2,28(r2)
    14ac:	10c00044 	addi	r3,r2,1
    14b0:	e0bffc17 	ldw	r2,-16(fp)
    14b4:	10c00715 	stw	r3,28(r2)
    14b8:	00000106 	br	14c0 <adding_interrupt+0x4c4>
}

void adding_interrupt(void* isr_context){
	MainDataType *mainDataType = isr_context;
	if(mainDataType->lcdData->ctrl_blinker == T_ON_BLINKS && mainDataType->delay > 20){
		if(mainDataType->btn[0]==FALLING_BUTTON || mainDataType->btn[0]==PENDING_RISING_BUTTON){
    14bc:	0001883a 	nop
		mainDataType->delay +=1;
	}
	else {
		mainDataType->delay +=1;
	}
	IOWR_ALTERA_AVALON_TIMER_STATUS(ADDER_TIMER_BASE,0x0000);
    14c0:	0007883a 	mov	r3,zero
    14c4:	00820034 	movhi	r2,2048
    14c8:	10802804 	addi	r2,r2,160
    14cc:	10c00035 	stwio	r3,0(r2)
}
    14d0:	0001883a 	nop
    14d4:	e6fffe04 	addi	sp,fp,-8
    14d8:	dfc00317 	ldw	ra,12(sp)
    14dc:	df000217 	ldw	fp,8(sp)
    14e0:	dc400117 	ldw	r17,4(sp)
    14e4:	dc000017 	ldw	r16,0(sp)
    14e8:	dec00404 	addi	sp,sp,16
    14ec:	f800283a 	ret

000014f0 <apply_t_on_on_all>:
#include "module_pwm.h"

void apply_t_on_on_all(int t_on){
    14f0:	defffe04 	addi	sp,sp,-8
    14f4:	df000115 	stw	fp,4(sp)
    14f8:	df000104 	addi	fp,sp,4
    14fc:	e13fff15 	stw	r4,-4(fp)
	IOWR(MODMULTIPWMDRIVER_0_BASE,MODMULTIPWMDRIVER_0_BASE_TON_REG,t_on);
    1500:	00820034 	movhi	r2,2048
    1504:	10880004 	addi	r2,r2,8192
    1508:	e0ffff17 	ldw	r3,-4(fp)
    150c:	10c00035 	stwio	r3,0(r2)
	IOWR(MODMULTIPWMDRIVER_0_BASE,MODMULTIPWMDRIVER_0_BASE_NLATCH_REG,0x00000000);
    1510:	0007883a 	mov	r3,zero
    1514:	00820034 	movhi	r2,2048
    1518:	10880104 	addi	r2,r2,8196
    151c:	10c00035 	stwio	r3,0(r2)
	IOWR(MODMULTIPWMDRIVER_0_BASE,MODMULTIPWMDRIVER_0_BASE_NLATCH_REG,0xFFFFFFFF);
    1520:	00ffffc4 	movi	r3,-1
    1524:	00820034 	movhi	r2,2048
    1528:	10880104 	addi	r2,r2,8196
    152c:	10c00035 	stwio	r3,0(r2)
}
    1530:	0001883a 	nop
    1534:	e037883a 	mov	sp,fp
    1538:	df000017 	ldw	fp,0(sp)
    153c:	dec00104 	addi	sp,sp,4
    1540:	f800283a 	ret

00001544 <apply_t_on_on_channel>:

void apply_t_on_on_channel(int t_on,int channel){
    1544:	defffd04 	addi	sp,sp,-12
    1548:	df000215 	stw	fp,8(sp)
    154c:	df000204 	addi	fp,sp,8
    1550:	e13ffe15 	stw	r4,-8(fp)
    1554:	e17fff15 	stw	r5,-4(fp)
	IOWR(MODMULTIPWMDRIVER_0_BASE,MODMULTIPWMDRIVER_0_BASE_TON_REG,t_on);
    1558:	00820034 	movhi	r2,2048
    155c:	10880004 	addi	r2,r2,8192
    1560:	e0fffe17 	ldw	r3,-8(fp)
    1564:	10c00035 	stwio	r3,0(r2)
	IOWR(MODMULTIPWMDRIVER_0_BASE,MODMULTIPWMDRIVER_0_BASE_NLATCH_REG,~(0xFFFFFFFF & 0b1<<channel));
    1568:	00c00044 	movi	r3,1
    156c:	e0bfff17 	ldw	r2,-4(fp)
    1570:	1884983a 	sll	r2,r3,r2
    1574:	0086303a 	nor	r3,zero,r2
    1578:	00820034 	movhi	r2,2048
    157c:	10880104 	addi	r2,r2,8196
    1580:	10c00035 	stwio	r3,0(r2)
	IOWR(MODMULTIPWMDRIVER_0_BASE,MODMULTIPWMDRIVER_0_BASE_NLATCH_REG,0xFFFFFFFF);
    1584:	00ffffc4 	movi	r3,-1
    1588:	00820034 	movhi	r2,2048
    158c:	10880104 	addi	r2,r2,8196
    1590:	10c00035 	stwio	r3,0(r2)
}
    1594:	0001883a 	nop
    1598:	e037883a 	mov	sp,fp
    159c:	df000017 	ldw	fp,0(sp)
    15a0:	dec00104 	addi	sp,sp,4
    15a4:	f800283a 	ret

000015a8 <enable_pwm_channel>:

void enable_pwm_channel(MainDataType* mainData,int channel){
    15a8:	defff904 	addi	sp,sp,-28
    15ac:	dfc00615 	stw	ra,24(sp)
    15b0:	df000515 	stw	fp,20(sp)
    15b4:	dc000415 	stw	r16,16(sp)
    15b8:	df000504 	addi	fp,sp,20
    15bc:	e13ffd15 	stw	r4,-12(fp)
    15c0:	e17ffe15 	stw	r5,-8(fp)
	//IOWR(MODMULTIPWMDRIVER_0_BASE,MODMULTIPWMDRIVER_0_BASE_OE_REG,(0b1<<23)+(0b1<<22));
	unsigned long int data=0;
    15c4:	e03ffb15 	stw	zero,-20(fp)
	for(int index =0; index < PWM_NUMBER; index++){
    15c8:	e03ffc15 	stw	zero,-16(fp)
    15cc:	00002806 	br	1670 <enable_pwm_channel+0xc8>
		if(channel == index){
    15d0:	e0fffe17 	ldw	r3,-8(fp)
    15d4:	e0bffc17 	ldw	r2,-16(fp)
    15d8:	1880111e 	bne	r3,r2,1620 <enable_pwm_channel+0x78>
			data += 0b1<<index;
    15dc:	00c00044 	movi	r3,1
    15e0:	e0bffc17 	ldw	r2,-16(fp)
    15e4:	1884983a 	sll	r2,r3,r2
    15e8:	1007883a 	mov	r3,r2
    15ec:	e0bffb17 	ldw	r2,-20(fp)
    15f0:	10c5883a 	add	r2,r2,r3
    15f4:	e0bffb15 	stw	r2,-20(fp)
			mainData->all_pwm[channel].status = true;
    15f8:	e0bffd17 	ldw	r2,-12(fp)
    15fc:	14000517 	ldw	r16,20(r2)
    1600:	e0bffe17 	ldw	r2,-8(fp)
    1604:	01400304 	movi	r5,12
    1608:	1009883a 	mov	r4,r2
    160c:	00017b40 	call	17b4 <__mulsi3>
    1610:	8085883a 	add	r2,r16,r2
    1614:	00c00044 	movi	r3,1
    1618:	10c00105 	stb	r3,4(r2)
    161c:	00001106 	br	1664 <enable_pwm_channel+0xbc>
		}else if(mainData->all_pwm[index].status){
    1620:	e0bffd17 	ldw	r2,-12(fp)
    1624:	14000517 	ldw	r16,20(r2)
    1628:	e0bffc17 	ldw	r2,-16(fp)
    162c:	01400304 	movi	r5,12
    1630:	1009883a 	mov	r4,r2
    1634:	00017b40 	call	17b4 <__mulsi3>
    1638:	8085883a 	add	r2,r16,r2
    163c:	10800103 	ldbu	r2,4(r2)
    1640:	10803fcc 	andi	r2,r2,255
    1644:	10000726 	beq	r2,zero,1664 <enable_pwm_channel+0xbc>
			data += 0b1<<index;
    1648:	00c00044 	movi	r3,1
    164c:	e0bffc17 	ldw	r2,-16(fp)
    1650:	1884983a 	sll	r2,r3,r2
    1654:	1007883a 	mov	r3,r2
    1658:	e0bffb17 	ldw	r2,-20(fp)
    165c:	10c5883a 	add	r2,r2,r3
    1660:	e0bffb15 	stw	r2,-20(fp)
}

void enable_pwm_channel(MainDataType* mainData,int channel){
	//IOWR(MODMULTIPWMDRIVER_0_BASE,MODMULTIPWMDRIVER_0_BASE_OE_REG,(0b1<<23)+(0b1<<22));
	unsigned long int data=0;
	for(int index =0; index < PWM_NUMBER; index++){
    1664:	e0bffc17 	ldw	r2,-16(fp)
    1668:	10800044 	addi	r2,r2,1
    166c:	e0bffc15 	stw	r2,-16(fp)
    1670:	e0bffc17 	ldw	r2,-16(fp)
    1674:	10800610 	cmplti	r2,r2,24
    1678:	103fd51e 	bne	r2,zero,15d0 <__alt_data_end+0xf80015d0>
			mainData->all_pwm[channel].status = true;
		}else if(mainData->all_pwm[index].status){
			data += 0b1<<index;
		}
	}
	IOWR(MODMULTIPWMDRIVER_0_BASE,MODMULTIPWMDRIVER_0_BASE_OE_REG,data);
    167c:	e0fffb17 	ldw	r3,-20(fp)
    1680:	00820034 	movhi	r2,2048
    1684:	10880204 	addi	r2,r2,8200
    1688:	10c00035 	stwio	r3,0(r2)
}
    168c:	0001883a 	nop
    1690:	e6ffff04 	addi	sp,fp,-4
    1694:	dfc00217 	ldw	ra,8(sp)
    1698:	df000117 	ldw	fp,4(sp)
    169c:	dc000017 	ldw	r16,0(sp)
    16a0:	dec00304 	addi	sp,sp,12
    16a4:	f800283a 	ret

000016a8 <disable_pwm_channel>:

void disable_pwm_channel(MainDataType* mainData,int channel){
    16a8:	defff904 	addi	sp,sp,-28
    16ac:	dfc00615 	stw	ra,24(sp)
    16b0:	df000515 	stw	fp,20(sp)
    16b4:	dc000415 	stw	r16,16(sp)
    16b8:	df000504 	addi	fp,sp,20
    16bc:	e13ffd15 	stw	r4,-12(fp)
    16c0:	e17ffe15 	stw	r5,-8(fp)
	unsigned long int data;
	for(int index; index < PWM_NUMBER; index++){
    16c4:	00002006 	br	1748 <disable_pwm_channel+0xa0>
		if(channel == index){
    16c8:	e0fffe17 	ldw	r3,-8(fp)
    16cc:	e0bffc17 	ldw	r2,-16(fp)
    16d0:	1880091e 	bne	r3,r2,16f8 <disable_pwm_channel+0x50>
			mainData->all_pwm[channel].status = false;
    16d4:	e0bffd17 	ldw	r2,-12(fp)
    16d8:	14000517 	ldw	r16,20(r2)
    16dc:	e0bffe17 	ldw	r2,-8(fp)
    16e0:	01400304 	movi	r5,12
    16e4:	1009883a 	mov	r4,r2
    16e8:	00017b40 	call	17b4 <__mulsi3>
    16ec:	8085883a 	add	r2,r16,r2
    16f0:	10000105 	stb	zero,4(r2)
    16f4:	00001106 	br	173c <disable_pwm_channel+0x94>
		}else if(mainData->all_pwm[index].status){
    16f8:	e0bffd17 	ldw	r2,-12(fp)
    16fc:	14000517 	ldw	r16,20(r2)
    1700:	e0bffc17 	ldw	r2,-16(fp)
    1704:	01400304 	movi	r5,12
    1708:	1009883a 	mov	r4,r2
    170c:	00017b40 	call	17b4 <__mulsi3>
    1710:	8085883a 	add	r2,r16,r2
    1714:	10800103 	ldbu	r2,4(r2)
    1718:	10803fcc 	andi	r2,r2,255
    171c:	10000726 	beq	r2,zero,173c <disable_pwm_channel+0x94>
			data += 0b1<<index;
    1720:	00c00044 	movi	r3,1
    1724:	e0bffc17 	ldw	r2,-16(fp)
    1728:	1884983a 	sll	r2,r3,r2
    172c:	1007883a 	mov	r3,r2
    1730:	e0bffb17 	ldw	r2,-20(fp)
    1734:	10c5883a 	add	r2,r2,r3
    1738:	e0bffb15 	stw	r2,-20(fp)
	IOWR(MODMULTIPWMDRIVER_0_BASE,MODMULTIPWMDRIVER_0_BASE_OE_REG,data);
}

void disable_pwm_channel(MainDataType* mainData,int channel){
	unsigned long int data;
	for(int index; index < PWM_NUMBER; index++){
    173c:	e0bffc17 	ldw	r2,-16(fp)
    1740:	10800044 	addi	r2,r2,1
    1744:	e0bffc15 	stw	r2,-16(fp)
    1748:	e0bffc17 	ldw	r2,-16(fp)
    174c:	10800610 	cmplti	r2,r2,24
    1750:	103fdd1e 	bne	r2,zero,16c8 <__alt_data_end+0xf80016c8>
			mainData->all_pwm[channel].status = false;
		}else if(mainData->all_pwm[index].status){
			data += 0b1<<index;
		}
	}
	IOWR(MODMULTIPWMDRIVER_0_BASE,MODMULTIPWMDRIVER_0_BASE_OE_REG,data);
    1754:	e0fffb17 	ldw	r3,-20(fp)
    1758:	00820034 	movhi	r2,2048
    175c:	10880204 	addi	r2,r2,8200
    1760:	10c00035 	stwio	r3,0(r2)
}
    1764:	0001883a 	nop
    1768:	e6ffff04 	addi	sp,fp,-4
    176c:	dfc00217 	ldw	ra,8(sp)
    1770:	df000117 	ldw	fp,4(sp)
    1774:	dc000017 	ldw	r16,0(sp)
    1778:	dec00304 	addi	sp,sp,12
    177c:	f800283a 	ret

00001780 <disable_all_pwm_channel>:

void disable_all_pwm_channel(MainDataType* mainData){
    1780:	defffe04 	addi	sp,sp,-8
    1784:	df000115 	stw	fp,4(sp)
    1788:	df000104 	addi	fp,sp,4
    178c:	e13fff15 	stw	r4,-4(fp)
	IOWR(MODMULTIPWMDRIVER_0_BASE,MODMULTIPWMDRIVER_0_BASE_OE_REG,0);
    1790:	0007883a 	mov	r3,zero
    1794:	00820034 	movhi	r2,2048
    1798:	10880204 	addi	r2,r2,8200
    179c:	10c00035 	stwio	r3,0(r2)
}
    17a0:	0001883a 	nop
    17a4:	e037883a 	mov	sp,fp
    17a8:	df000017 	ldw	fp,0(sp)
    17ac:	dec00104 	addi	sp,sp,4
    17b0:	f800283a 	ret

000017b4 <__mulsi3>:
    17b4:	0005883a 	mov	r2,zero
    17b8:	20000726 	beq	r4,zero,17d8 <__mulsi3+0x24>
    17bc:	20c0004c 	andi	r3,r4,1
    17c0:	2008d07a 	srli	r4,r4,1
    17c4:	18000126 	beq	r3,zero,17cc <__mulsi3+0x18>
    17c8:	1145883a 	add	r2,r2,r5
    17cc:	294b883a 	add	r5,r5,r5
    17d0:	203ffa1e 	bne	r4,zero,17bc <__alt_data_end+0xf80017bc>
    17d4:	f800283a 	ret
    17d8:	f800283a 	ret

000017dc <_fwrite_r>:
    17dc:	defff504 	addi	sp,sp,-44
    17e0:	dc400715 	stw	r17,28(sp)
    17e4:	d9400315 	stw	r5,12(sp)
    17e8:	2023883a 	mov	r17,r4
    17ec:	300b883a 	mov	r5,r6
    17f0:	3809883a 	mov	r4,r7
    17f4:	dcc00915 	stw	r19,36(sp)
    17f8:	dc800815 	stw	r18,32(sp)
    17fc:	dc000615 	stw	r16,24(sp)
    1800:	dfc00a15 	stw	ra,40(sp)
    1804:	3027883a 	mov	r19,r6
    1808:	3821883a 	mov	r16,r7
    180c:	00017b40 	call	17b4 <__mulsi3>
    1810:	1025883a 	mov	r18,r2
    1814:	d8800415 	stw	r2,16(sp)
    1818:	d8800215 	stw	r2,8(sp)
    181c:	d8800304 	addi	r2,sp,12
    1820:	d8800015 	stw	r2,0(sp)
    1824:	00800044 	movi	r2,1
    1828:	d8800115 	stw	r2,4(sp)
    182c:	d9400b17 	ldw	r5,44(sp)
    1830:	88000226 	beq	r17,zero,183c <_fwrite_r+0x60>
    1834:	88800e17 	ldw	r2,56(r17)
    1838:	10001a26 	beq	r2,zero,18a4 <_fwrite_r+0xc8>
    183c:	2880030b 	ldhu	r2,12(r5)
    1840:	10c8000c 	andi	r3,r2,8192
    1844:	1800061e 	bne	r3,zero,1860 <_fwrite_r+0x84>
    1848:	29001917 	ldw	r4,100(r5)
    184c:	00f7ffc4 	movi	r3,-8193
    1850:	10880014 	ori	r2,r2,8192
    1854:	20c6703a 	and	r3,r4,r3
    1858:	2880030d 	sth	r2,12(r5)
    185c:	28c01915 	stw	r3,100(r5)
    1860:	d80d883a 	mov	r6,sp
    1864:	8809883a 	mov	r4,r17
    1868:	0006a240 	call	6a24 <__sfvwrite_r>
    186c:	10000b26 	beq	r2,zero,189c <_fwrite_r+0xc0>
    1870:	d9000217 	ldw	r4,8(sp)
    1874:	980b883a 	mov	r5,r19
    1878:	9109c83a 	sub	r4,r18,r4
    187c:	000bdf80 	call	bdf8 <__udivsi3>
    1880:	dfc00a17 	ldw	ra,40(sp)
    1884:	dcc00917 	ldw	r19,36(sp)
    1888:	dc800817 	ldw	r18,32(sp)
    188c:	dc400717 	ldw	r17,28(sp)
    1890:	dc000617 	ldw	r16,24(sp)
    1894:	dec00b04 	addi	sp,sp,44
    1898:	f800283a 	ret
    189c:	8005883a 	mov	r2,r16
    18a0:	003ff706 	br	1880 <__alt_data_end+0xf8001880>
    18a4:	8809883a 	mov	r4,r17
    18a8:	d9400515 	stw	r5,20(sp)
    18ac:	00065a00 	call	65a0 <__sinit>
    18b0:	d9400517 	ldw	r5,20(sp)
    18b4:	003fe106 	br	183c <__alt_data_end+0xf800183c>

000018b8 <fwrite>:
    18b8:	defffe04 	addi	sp,sp,-8
    18bc:	00800074 	movhi	r2,1
    18c0:	d9c00015 	stw	r7,0(sp)
    18c4:	10908304 	addi	r2,r2,16908
    18c8:	300f883a 	mov	r7,r6
    18cc:	280d883a 	mov	r6,r5
    18d0:	200b883a 	mov	r5,r4
    18d4:	11000017 	ldw	r4,0(r2)
    18d8:	dfc00115 	stw	ra,4(sp)
    18dc:	00017dc0 	call	17dc <_fwrite_r>
    18e0:	dfc00117 	ldw	ra,4(sp)
    18e4:	dec00204 	addi	sp,sp,8
    18e8:	f800283a 	ret

000018ec <malloc>:
    18ec:	00800074 	movhi	r2,1
    18f0:	10908304 	addi	r2,r2,16908
    18f4:	200b883a 	mov	r5,r4
    18f8:	11000017 	ldw	r4,0(r2)
    18fc:	00019141 	jmpi	1914 <_malloc_r>

00001900 <free>:
    1900:	00800074 	movhi	r2,1
    1904:	10908304 	addi	r2,r2,16908
    1908:	200b883a 	mov	r5,r4
    190c:	11000017 	ldw	r4,0(r2)
    1910:	00067141 	jmpi	6714 <_free_r>

00001914 <_malloc_r>:
    1914:	defff504 	addi	sp,sp,-44
    1918:	dc800315 	stw	r18,12(sp)
    191c:	dfc00a15 	stw	ra,40(sp)
    1920:	df000915 	stw	fp,36(sp)
    1924:	ddc00815 	stw	r23,32(sp)
    1928:	dd800715 	stw	r22,28(sp)
    192c:	dd400615 	stw	r21,24(sp)
    1930:	dd000515 	stw	r20,20(sp)
    1934:	dcc00415 	stw	r19,16(sp)
    1938:	dc400215 	stw	r17,8(sp)
    193c:	dc000115 	stw	r16,4(sp)
    1940:	288002c4 	addi	r2,r5,11
    1944:	00c00584 	movi	r3,22
    1948:	2025883a 	mov	r18,r4
    194c:	18807f2e 	bgeu	r3,r2,1b4c <_malloc_r+0x238>
    1950:	047ffe04 	movi	r17,-8
    1954:	1462703a 	and	r17,r2,r17
    1958:	8800a316 	blt	r17,zero,1be8 <_malloc_r+0x2d4>
    195c:	8940a236 	bltu	r17,r5,1be8 <_malloc_r+0x2d4>
    1960:	000ede40 	call	ede4 <__malloc_lock>
    1964:	00807dc4 	movi	r2,503
    1968:	1441e92e 	bgeu	r2,r17,2110 <_malloc_r+0x7fc>
    196c:	8804d27a 	srli	r2,r17,9
    1970:	1000a126 	beq	r2,zero,1bf8 <_malloc_r+0x2e4>
    1974:	00c00104 	movi	r3,4
    1978:	18811e36 	bltu	r3,r2,1df4 <_malloc_r+0x4e0>
    197c:	8804d1ba 	srli	r2,r17,6
    1980:	12000e44 	addi	r8,r2,57
    1984:	11c00e04 	addi	r7,r2,56
    1988:	4209883a 	add	r4,r8,r8
    198c:	04c00074 	movhi	r19,1
    1990:	2109883a 	add	r4,r4,r4
    1994:	9cca9804 	addi	r19,r19,10848
    1998:	2109883a 	add	r4,r4,r4
    199c:	9909883a 	add	r4,r19,r4
    19a0:	24000117 	ldw	r16,4(r4)
    19a4:	213ffe04 	addi	r4,r4,-8
    19a8:	24009726 	beq	r4,r16,1c08 <_malloc_r+0x2f4>
    19ac:	80800117 	ldw	r2,4(r16)
    19b0:	01bfff04 	movi	r6,-4
    19b4:	014003c4 	movi	r5,15
    19b8:	1184703a 	and	r2,r2,r6
    19bc:	1447c83a 	sub	r3,r2,r17
    19c0:	28c00716 	blt	r5,r3,19e0 <_malloc_r+0xcc>
    19c4:	1800920e 	bge	r3,zero,1c10 <_malloc_r+0x2fc>
    19c8:	84000317 	ldw	r16,12(r16)
    19cc:	24008e26 	beq	r4,r16,1c08 <_malloc_r+0x2f4>
    19d0:	80800117 	ldw	r2,4(r16)
    19d4:	1184703a 	and	r2,r2,r6
    19d8:	1447c83a 	sub	r3,r2,r17
    19dc:	28fff90e 	bge	r5,r3,19c4 <__alt_data_end+0xf80019c4>
    19e0:	3809883a 	mov	r4,r7
    19e4:	01800074 	movhi	r6,1
    19e8:	9c000417 	ldw	r16,16(r19)
    19ec:	318a9804 	addi	r6,r6,10848
    19f0:	32000204 	addi	r8,r6,8
    19f4:	82013426 	beq	r16,r8,1ec8 <_malloc_r+0x5b4>
    19f8:	80c00117 	ldw	r3,4(r16)
    19fc:	00bfff04 	movi	r2,-4
    1a00:	188e703a 	and	r7,r3,r2
    1a04:	3c45c83a 	sub	r2,r7,r17
    1a08:	00c003c4 	movi	r3,15
    1a0c:	18811f16 	blt	r3,r2,1e8c <_malloc_r+0x578>
    1a10:	32000515 	stw	r8,20(r6)
    1a14:	32000415 	stw	r8,16(r6)
    1a18:	10007f0e 	bge	r2,zero,1c18 <_malloc_r+0x304>
    1a1c:	00807fc4 	movi	r2,511
    1a20:	11c0fd36 	bltu	r2,r7,1e18 <_malloc_r+0x504>
    1a24:	3806d0fa 	srli	r3,r7,3
    1a28:	01c00044 	movi	r7,1
    1a2c:	30800117 	ldw	r2,4(r6)
    1a30:	19400044 	addi	r5,r3,1
    1a34:	294b883a 	add	r5,r5,r5
    1a38:	1807d0ba 	srai	r3,r3,2
    1a3c:	294b883a 	add	r5,r5,r5
    1a40:	294b883a 	add	r5,r5,r5
    1a44:	298b883a 	add	r5,r5,r6
    1a48:	38c6983a 	sll	r3,r7,r3
    1a4c:	29c00017 	ldw	r7,0(r5)
    1a50:	2a7ffe04 	addi	r9,r5,-8
    1a54:	1886b03a 	or	r3,r3,r2
    1a58:	82400315 	stw	r9,12(r16)
    1a5c:	81c00215 	stw	r7,8(r16)
    1a60:	30c00115 	stw	r3,4(r6)
    1a64:	2c000015 	stw	r16,0(r5)
    1a68:	3c000315 	stw	r16,12(r7)
    1a6c:	2005d0ba 	srai	r2,r4,2
    1a70:	01400044 	movi	r5,1
    1a74:	288a983a 	sll	r5,r5,r2
    1a78:	19406f36 	bltu	r3,r5,1c38 <_malloc_r+0x324>
    1a7c:	28c4703a 	and	r2,r5,r3
    1a80:	10000a1e 	bne	r2,zero,1aac <_malloc_r+0x198>
    1a84:	00bfff04 	movi	r2,-4
    1a88:	294b883a 	add	r5,r5,r5
    1a8c:	2088703a 	and	r4,r4,r2
    1a90:	28c4703a 	and	r2,r5,r3
    1a94:	21000104 	addi	r4,r4,4
    1a98:	1000041e 	bne	r2,zero,1aac <_malloc_r+0x198>
    1a9c:	294b883a 	add	r5,r5,r5
    1aa0:	28c4703a 	and	r2,r5,r3
    1aa4:	21000104 	addi	r4,r4,4
    1aa8:	103ffc26 	beq	r2,zero,1a9c <__alt_data_end+0xf8001a9c>
    1aac:	02bfff04 	movi	r10,-4
    1ab0:	024003c4 	movi	r9,15
    1ab4:	21800044 	addi	r6,r4,1
    1ab8:	318d883a 	add	r6,r6,r6
    1abc:	318d883a 	add	r6,r6,r6
    1ac0:	318d883a 	add	r6,r6,r6
    1ac4:	998d883a 	add	r6,r19,r6
    1ac8:	333ffe04 	addi	r12,r6,-8
    1acc:	2017883a 	mov	r11,r4
    1ad0:	31800104 	addi	r6,r6,4
    1ad4:	34000017 	ldw	r16,0(r6)
    1ad8:	31fffd04 	addi	r7,r6,-12
    1adc:	81c0041e 	bne	r16,r7,1af0 <_malloc_r+0x1dc>
    1ae0:	0000fb06 	br	1ed0 <_malloc_r+0x5bc>
    1ae4:	1801030e 	bge	r3,zero,1ef4 <_malloc_r+0x5e0>
    1ae8:	84000317 	ldw	r16,12(r16)
    1aec:	81c0f826 	beq	r16,r7,1ed0 <_malloc_r+0x5bc>
    1af0:	80800117 	ldw	r2,4(r16)
    1af4:	1284703a 	and	r2,r2,r10
    1af8:	1447c83a 	sub	r3,r2,r17
    1afc:	48fff90e 	bge	r9,r3,1ae4 <__alt_data_end+0xf8001ae4>
    1b00:	80800317 	ldw	r2,12(r16)
    1b04:	81000217 	ldw	r4,8(r16)
    1b08:	89400054 	ori	r5,r17,1
    1b0c:	81400115 	stw	r5,4(r16)
    1b10:	20800315 	stw	r2,12(r4)
    1b14:	11000215 	stw	r4,8(r2)
    1b18:	8463883a 	add	r17,r16,r17
    1b1c:	9c400515 	stw	r17,20(r19)
    1b20:	9c400415 	stw	r17,16(r19)
    1b24:	18800054 	ori	r2,r3,1
    1b28:	88800115 	stw	r2,4(r17)
    1b2c:	8a000315 	stw	r8,12(r17)
    1b30:	8a000215 	stw	r8,8(r17)
    1b34:	88e3883a 	add	r17,r17,r3
    1b38:	88c00015 	stw	r3,0(r17)
    1b3c:	9009883a 	mov	r4,r18
    1b40:	000ee080 	call	ee08 <__malloc_unlock>
    1b44:	80800204 	addi	r2,r16,8
    1b48:	00001b06 	br	1bb8 <_malloc_r+0x2a4>
    1b4c:	04400404 	movi	r17,16
    1b50:	89402536 	bltu	r17,r5,1be8 <_malloc_r+0x2d4>
    1b54:	000ede40 	call	ede4 <__malloc_lock>
    1b58:	00800184 	movi	r2,6
    1b5c:	01000084 	movi	r4,2
    1b60:	04c00074 	movhi	r19,1
    1b64:	1085883a 	add	r2,r2,r2
    1b68:	9cca9804 	addi	r19,r19,10848
    1b6c:	1085883a 	add	r2,r2,r2
    1b70:	9885883a 	add	r2,r19,r2
    1b74:	14000117 	ldw	r16,4(r2)
    1b78:	10fffe04 	addi	r3,r2,-8
    1b7c:	80c0d926 	beq	r16,r3,1ee4 <_malloc_r+0x5d0>
    1b80:	80c00117 	ldw	r3,4(r16)
    1b84:	81000317 	ldw	r4,12(r16)
    1b88:	00bfff04 	movi	r2,-4
    1b8c:	1884703a 	and	r2,r3,r2
    1b90:	81400217 	ldw	r5,8(r16)
    1b94:	8085883a 	add	r2,r16,r2
    1b98:	10c00117 	ldw	r3,4(r2)
    1b9c:	29000315 	stw	r4,12(r5)
    1ba0:	21400215 	stw	r5,8(r4)
    1ba4:	18c00054 	ori	r3,r3,1
    1ba8:	10c00115 	stw	r3,4(r2)
    1bac:	9009883a 	mov	r4,r18
    1bb0:	000ee080 	call	ee08 <__malloc_unlock>
    1bb4:	80800204 	addi	r2,r16,8
    1bb8:	dfc00a17 	ldw	ra,40(sp)
    1bbc:	df000917 	ldw	fp,36(sp)
    1bc0:	ddc00817 	ldw	r23,32(sp)
    1bc4:	dd800717 	ldw	r22,28(sp)
    1bc8:	dd400617 	ldw	r21,24(sp)
    1bcc:	dd000517 	ldw	r20,20(sp)
    1bd0:	dcc00417 	ldw	r19,16(sp)
    1bd4:	dc800317 	ldw	r18,12(sp)
    1bd8:	dc400217 	ldw	r17,8(sp)
    1bdc:	dc000117 	ldw	r16,4(sp)
    1be0:	dec00b04 	addi	sp,sp,44
    1be4:	f800283a 	ret
    1be8:	00800304 	movi	r2,12
    1bec:	90800015 	stw	r2,0(r18)
    1bf0:	0005883a 	mov	r2,zero
    1bf4:	003ff006 	br	1bb8 <__alt_data_end+0xf8001bb8>
    1bf8:	01002004 	movi	r4,128
    1bfc:	02001004 	movi	r8,64
    1c00:	01c00fc4 	movi	r7,63
    1c04:	003f6106 	br	198c <__alt_data_end+0xf800198c>
    1c08:	4009883a 	mov	r4,r8
    1c0c:	003f7506 	br	19e4 <__alt_data_end+0xf80019e4>
    1c10:	81000317 	ldw	r4,12(r16)
    1c14:	003fde06 	br	1b90 <__alt_data_end+0xf8001b90>
    1c18:	81c5883a 	add	r2,r16,r7
    1c1c:	11400117 	ldw	r5,4(r2)
    1c20:	9009883a 	mov	r4,r18
    1c24:	29400054 	ori	r5,r5,1
    1c28:	11400115 	stw	r5,4(r2)
    1c2c:	000ee080 	call	ee08 <__malloc_unlock>
    1c30:	80800204 	addi	r2,r16,8
    1c34:	003fe006 	br	1bb8 <__alt_data_end+0xf8001bb8>
    1c38:	9c000217 	ldw	r16,8(r19)
    1c3c:	00bfff04 	movi	r2,-4
    1c40:	85800117 	ldw	r22,4(r16)
    1c44:	b0ac703a 	and	r22,r22,r2
    1c48:	b4400336 	bltu	r22,r17,1c58 <_malloc_r+0x344>
    1c4c:	b445c83a 	sub	r2,r22,r17
    1c50:	00c003c4 	movi	r3,15
    1c54:	18805d16 	blt	r3,r2,1dcc <_malloc_r+0x4b8>
    1c58:	05c00074 	movhi	r23,1
    1c5c:	00800074 	movhi	r2,1
    1c60:	10979b04 	addi	r2,r2,24172
    1c64:	bdd08404 	addi	r23,r23,16912
    1c68:	15400017 	ldw	r21,0(r2)
    1c6c:	b8c00017 	ldw	r3,0(r23)
    1c70:	00bfffc4 	movi	r2,-1
    1c74:	858d883a 	add	r6,r16,r22
    1c78:	8d6b883a 	add	r21,r17,r21
    1c7c:	1880ea26 	beq	r3,r2,2028 <_malloc_r+0x714>
    1c80:	ad4403c4 	addi	r21,r21,4111
    1c84:	00bc0004 	movi	r2,-4096
    1c88:	a8aa703a 	and	r21,r21,r2
    1c8c:	a80b883a 	mov	r5,r21
    1c90:	9009883a 	mov	r4,r18
    1c94:	d9800015 	stw	r6,0(sp)
    1c98:	000218c0 	call	218c <_sbrk_r>
    1c9c:	1029883a 	mov	r20,r2
    1ca0:	00bfffc4 	movi	r2,-1
    1ca4:	d9800017 	ldw	r6,0(sp)
    1ca8:	a080e826 	beq	r20,r2,204c <_malloc_r+0x738>
    1cac:	a180a636 	bltu	r20,r6,1f48 <_malloc_r+0x634>
    1cb0:	07000074 	movhi	fp,1
    1cb4:	e717a904 	addi	fp,fp,24228
    1cb8:	e0800017 	ldw	r2,0(fp)
    1cbc:	a887883a 	add	r3,r21,r2
    1cc0:	e0c00015 	stw	r3,0(fp)
    1cc4:	3500e626 	beq	r6,r20,2060 <_malloc_r+0x74c>
    1cc8:	b9000017 	ldw	r4,0(r23)
    1ccc:	00bfffc4 	movi	r2,-1
    1cd0:	2080ee26 	beq	r4,r2,208c <_malloc_r+0x778>
    1cd4:	a185c83a 	sub	r2,r20,r6
    1cd8:	10c5883a 	add	r2,r2,r3
    1cdc:	e0800015 	stw	r2,0(fp)
    1ce0:	a0c001cc 	andi	r3,r20,7
    1ce4:	1800bc26 	beq	r3,zero,1fd8 <_malloc_r+0x6c4>
    1ce8:	a0e9c83a 	sub	r20,r20,r3
    1cec:	00840204 	movi	r2,4104
    1cf0:	a5000204 	addi	r20,r20,8
    1cf4:	10c7c83a 	sub	r3,r2,r3
    1cf8:	a545883a 	add	r2,r20,r21
    1cfc:	1083ffcc 	andi	r2,r2,4095
    1d00:	18abc83a 	sub	r21,r3,r2
    1d04:	a80b883a 	mov	r5,r21
    1d08:	9009883a 	mov	r4,r18
    1d0c:	000218c0 	call	218c <_sbrk_r>
    1d10:	00ffffc4 	movi	r3,-1
    1d14:	10c0e126 	beq	r2,r3,209c <_malloc_r+0x788>
    1d18:	1505c83a 	sub	r2,r2,r20
    1d1c:	1545883a 	add	r2,r2,r21
    1d20:	10800054 	ori	r2,r2,1
    1d24:	e0c00017 	ldw	r3,0(fp)
    1d28:	9d000215 	stw	r20,8(r19)
    1d2c:	a0800115 	stw	r2,4(r20)
    1d30:	a8c7883a 	add	r3,r21,r3
    1d34:	e0c00015 	stw	r3,0(fp)
    1d38:	84c00e26 	beq	r16,r19,1d74 <_malloc_r+0x460>
    1d3c:	018003c4 	movi	r6,15
    1d40:	3580a72e 	bgeu	r6,r22,1fe0 <_malloc_r+0x6cc>
    1d44:	81400117 	ldw	r5,4(r16)
    1d48:	013ffe04 	movi	r4,-8
    1d4c:	b0bffd04 	addi	r2,r22,-12
    1d50:	1104703a 	and	r2,r2,r4
    1d54:	2900004c 	andi	r4,r5,1
    1d58:	2088b03a 	or	r4,r4,r2
    1d5c:	81000115 	stw	r4,4(r16)
    1d60:	01400144 	movi	r5,5
    1d64:	8089883a 	add	r4,r16,r2
    1d68:	21400115 	stw	r5,4(r4)
    1d6c:	21400215 	stw	r5,8(r4)
    1d70:	3080cd36 	bltu	r6,r2,20a8 <_malloc_r+0x794>
    1d74:	00800074 	movhi	r2,1
    1d78:	10979a04 	addi	r2,r2,24168
    1d7c:	11000017 	ldw	r4,0(r2)
    1d80:	20c0012e 	bgeu	r4,r3,1d88 <_malloc_r+0x474>
    1d84:	10c00015 	stw	r3,0(r2)
    1d88:	00800074 	movhi	r2,1
    1d8c:	10979904 	addi	r2,r2,24164
    1d90:	11000017 	ldw	r4,0(r2)
    1d94:	9c000217 	ldw	r16,8(r19)
    1d98:	20c0012e 	bgeu	r4,r3,1da0 <_malloc_r+0x48c>
    1d9c:	10c00015 	stw	r3,0(r2)
    1da0:	80c00117 	ldw	r3,4(r16)
    1da4:	00bfff04 	movi	r2,-4
    1da8:	1886703a 	and	r3,r3,r2
    1dac:	1c45c83a 	sub	r2,r3,r17
    1db0:	1c400236 	bltu	r3,r17,1dbc <_malloc_r+0x4a8>
    1db4:	00c003c4 	movi	r3,15
    1db8:	18800416 	blt	r3,r2,1dcc <_malloc_r+0x4b8>
    1dbc:	9009883a 	mov	r4,r18
    1dc0:	000ee080 	call	ee08 <__malloc_unlock>
    1dc4:	0005883a 	mov	r2,zero
    1dc8:	003f7b06 	br	1bb8 <__alt_data_end+0xf8001bb8>
    1dcc:	88c00054 	ori	r3,r17,1
    1dd0:	80c00115 	stw	r3,4(r16)
    1dd4:	8463883a 	add	r17,r16,r17
    1dd8:	10800054 	ori	r2,r2,1
    1ddc:	9c400215 	stw	r17,8(r19)
    1de0:	88800115 	stw	r2,4(r17)
    1de4:	9009883a 	mov	r4,r18
    1de8:	000ee080 	call	ee08 <__malloc_unlock>
    1dec:	80800204 	addi	r2,r16,8
    1df0:	003f7106 	br	1bb8 <__alt_data_end+0xf8001bb8>
    1df4:	00c00504 	movi	r3,20
    1df8:	18804a2e 	bgeu	r3,r2,1f24 <_malloc_r+0x610>
    1dfc:	00c01504 	movi	r3,84
    1e00:	18806e36 	bltu	r3,r2,1fbc <_malloc_r+0x6a8>
    1e04:	8804d33a 	srli	r2,r17,12
    1e08:	12001bc4 	addi	r8,r2,111
    1e0c:	11c01b84 	addi	r7,r2,110
    1e10:	4209883a 	add	r4,r8,r8
    1e14:	003edd06 	br	198c <__alt_data_end+0xf800198c>
    1e18:	3804d27a 	srli	r2,r7,9
    1e1c:	00c00104 	movi	r3,4
    1e20:	1880442e 	bgeu	r3,r2,1f34 <_malloc_r+0x620>
    1e24:	00c00504 	movi	r3,20
    1e28:	18808136 	bltu	r3,r2,2030 <_malloc_r+0x71c>
    1e2c:	11401704 	addi	r5,r2,92
    1e30:	10c016c4 	addi	r3,r2,91
    1e34:	294b883a 	add	r5,r5,r5
    1e38:	294b883a 	add	r5,r5,r5
    1e3c:	294b883a 	add	r5,r5,r5
    1e40:	994b883a 	add	r5,r19,r5
    1e44:	28800017 	ldw	r2,0(r5)
    1e48:	01800074 	movhi	r6,1
    1e4c:	297ffe04 	addi	r5,r5,-8
    1e50:	318a9804 	addi	r6,r6,10848
    1e54:	28806526 	beq	r5,r2,1fec <_malloc_r+0x6d8>
    1e58:	01bfff04 	movi	r6,-4
    1e5c:	10c00117 	ldw	r3,4(r2)
    1e60:	1986703a 	and	r3,r3,r6
    1e64:	38c0022e 	bgeu	r7,r3,1e70 <_malloc_r+0x55c>
    1e68:	10800217 	ldw	r2,8(r2)
    1e6c:	28bffb1e 	bne	r5,r2,1e5c <__alt_data_end+0xf8001e5c>
    1e70:	11400317 	ldw	r5,12(r2)
    1e74:	98c00117 	ldw	r3,4(r19)
    1e78:	81400315 	stw	r5,12(r16)
    1e7c:	80800215 	stw	r2,8(r16)
    1e80:	2c000215 	stw	r16,8(r5)
    1e84:	14000315 	stw	r16,12(r2)
    1e88:	003ef806 	br	1a6c <__alt_data_end+0xf8001a6c>
    1e8c:	88c00054 	ori	r3,r17,1
    1e90:	80c00115 	stw	r3,4(r16)
    1e94:	8463883a 	add	r17,r16,r17
    1e98:	34400515 	stw	r17,20(r6)
    1e9c:	34400415 	stw	r17,16(r6)
    1ea0:	10c00054 	ori	r3,r2,1
    1ea4:	8a000315 	stw	r8,12(r17)
    1ea8:	8a000215 	stw	r8,8(r17)
    1eac:	88c00115 	stw	r3,4(r17)
    1eb0:	88a3883a 	add	r17,r17,r2
    1eb4:	88800015 	stw	r2,0(r17)
    1eb8:	9009883a 	mov	r4,r18
    1ebc:	000ee080 	call	ee08 <__malloc_unlock>
    1ec0:	80800204 	addi	r2,r16,8
    1ec4:	003f3c06 	br	1bb8 <__alt_data_end+0xf8001bb8>
    1ec8:	30c00117 	ldw	r3,4(r6)
    1ecc:	003ee706 	br	1a6c <__alt_data_end+0xf8001a6c>
    1ed0:	5ac00044 	addi	r11,r11,1
    1ed4:	588000cc 	andi	r2,r11,3
    1ed8:	31800204 	addi	r6,r6,8
    1edc:	103efd1e 	bne	r2,zero,1ad4 <__alt_data_end+0xf8001ad4>
    1ee0:	00002406 	br	1f74 <_malloc_r+0x660>
    1ee4:	14000317 	ldw	r16,12(r2)
    1ee8:	143f251e 	bne	r2,r16,1b80 <__alt_data_end+0xf8001b80>
    1eec:	21000084 	addi	r4,r4,2
    1ef0:	003ebc06 	br	19e4 <__alt_data_end+0xf80019e4>
    1ef4:	8085883a 	add	r2,r16,r2
    1ef8:	10c00117 	ldw	r3,4(r2)
    1efc:	81000317 	ldw	r4,12(r16)
    1f00:	81400217 	ldw	r5,8(r16)
    1f04:	18c00054 	ori	r3,r3,1
    1f08:	10c00115 	stw	r3,4(r2)
    1f0c:	29000315 	stw	r4,12(r5)
    1f10:	21400215 	stw	r5,8(r4)
    1f14:	9009883a 	mov	r4,r18
    1f18:	000ee080 	call	ee08 <__malloc_unlock>
    1f1c:	80800204 	addi	r2,r16,8
    1f20:	003f2506 	br	1bb8 <__alt_data_end+0xf8001bb8>
    1f24:	12001704 	addi	r8,r2,92
    1f28:	11c016c4 	addi	r7,r2,91
    1f2c:	4209883a 	add	r4,r8,r8
    1f30:	003e9606 	br	198c <__alt_data_end+0xf800198c>
    1f34:	3804d1ba 	srli	r2,r7,6
    1f38:	11400e44 	addi	r5,r2,57
    1f3c:	10c00e04 	addi	r3,r2,56
    1f40:	294b883a 	add	r5,r5,r5
    1f44:	003fbc06 	br	1e38 <__alt_data_end+0xf8001e38>
    1f48:	84ff5926 	beq	r16,r19,1cb0 <__alt_data_end+0xf8001cb0>
    1f4c:	00800074 	movhi	r2,1
    1f50:	108a9804 	addi	r2,r2,10848
    1f54:	14000217 	ldw	r16,8(r2)
    1f58:	00bfff04 	movi	r2,-4
    1f5c:	80c00117 	ldw	r3,4(r16)
    1f60:	1886703a 	and	r3,r3,r2
    1f64:	003f9106 	br	1dac <__alt_data_end+0xf8001dac>
    1f68:	60800217 	ldw	r2,8(r12)
    1f6c:	213fffc4 	addi	r4,r4,-1
    1f70:	1300651e 	bne	r2,r12,2108 <_malloc_r+0x7f4>
    1f74:	208000cc 	andi	r2,r4,3
    1f78:	633ffe04 	addi	r12,r12,-8
    1f7c:	103ffa1e 	bne	r2,zero,1f68 <__alt_data_end+0xf8001f68>
    1f80:	98800117 	ldw	r2,4(r19)
    1f84:	0146303a 	nor	r3,zero,r5
    1f88:	1884703a 	and	r2,r3,r2
    1f8c:	98800115 	stw	r2,4(r19)
    1f90:	294b883a 	add	r5,r5,r5
    1f94:	117f2836 	bltu	r2,r5,1c38 <__alt_data_end+0xf8001c38>
    1f98:	283f2726 	beq	r5,zero,1c38 <__alt_data_end+0xf8001c38>
    1f9c:	2886703a 	and	r3,r5,r2
    1fa0:	5809883a 	mov	r4,r11
    1fa4:	183ec31e 	bne	r3,zero,1ab4 <__alt_data_end+0xf8001ab4>
    1fa8:	294b883a 	add	r5,r5,r5
    1fac:	2886703a 	and	r3,r5,r2
    1fb0:	21000104 	addi	r4,r4,4
    1fb4:	183ffc26 	beq	r3,zero,1fa8 <__alt_data_end+0xf8001fa8>
    1fb8:	003ebe06 	br	1ab4 <__alt_data_end+0xf8001ab4>
    1fbc:	00c05504 	movi	r3,340
    1fc0:	18801236 	bltu	r3,r2,200c <_malloc_r+0x6f8>
    1fc4:	8804d3fa 	srli	r2,r17,15
    1fc8:	12001e04 	addi	r8,r2,120
    1fcc:	11c01dc4 	addi	r7,r2,119
    1fd0:	4209883a 	add	r4,r8,r8
    1fd4:	003e6d06 	br	198c <__alt_data_end+0xf800198c>
    1fd8:	00c40004 	movi	r3,4096
    1fdc:	003f4606 	br	1cf8 <__alt_data_end+0xf8001cf8>
    1fe0:	00800044 	movi	r2,1
    1fe4:	a0800115 	stw	r2,4(r20)
    1fe8:	003f7406 	br	1dbc <__alt_data_end+0xf8001dbc>
    1fec:	1805d0ba 	srai	r2,r3,2
    1ff0:	01c00044 	movi	r7,1
    1ff4:	30c00117 	ldw	r3,4(r6)
    1ff8:	388e983a 	sll	r7,r7,r2
    1ffc:	2805883a 	mov	r2,r5
    2000:	38c6b03a 	or	r3,r7,r3
    2004:	30c00115 	stw	r3,4(r6)
    2008:	003f9b06 	br	1e78 <__alt_data_end+0xf8001e78>
    200c:	00c15504 	movi	r3,1364
    2010:	18801a36 	bltu	r3,r2,207c <_malloc_r+0x768>
    2014:	8804d4ba 	srli	r2,r17,18
    2018:	12001f44 	addi	r8,r2,125
    201c:	11c01f04 	addi	r7,r2,124
    2020:	4209883a 	add	r4,r8,r8
    2024:	003e5906 	br	198c <__alt_data_end+0xf800198c>
    2028:	ad400404 	addi	r21,r21,16
    202c:	003f1706 	br	1c8c <__alt_data_end+0xf8001c8c>
    2030:	00c01504 	movi	r3,84
    2034:	18802336 	bltu	r3,r2,20c4 <_malloc_r+0x7b0>
    2038:	3804d33a 	srli	r2,r7,12
    203c:	11401bc4 	addi	r5,r2,111
    2040:	10c01b84 	addi	r3,r2,110
    2044:	294b883a 	add	r5,r5,r5
    2048:	003f7b06 	br	1e38 <__alt_data_end+0xf8001e38>
    204c:	9c000217 	ldw	r16,8(r19)
    2050:	00bfff04 	movi	r2,-4
    2054:	80c00117 	ldw	r3,4(r16)
    2058:	1886703a 	and	r3,r3,r2
    205c:	003f5306 	br	1dac <__alt_data_end+0xf8001dac>
    2060:	3083ffcc 	andi	r2,r6,4095
    2064:	103f181e 	bne	r2,zero,1cc8 <__alt_data_end+0xf8001cc8>
    2068:	99000217 	ldw	r4,8(r19)
    206c:	b545883a 	add	r2,r22,r21
    2070:	10800054 	ori	r2,r2,1
    2074:	20800115 	stw	r2,4(r4)
    2078:	003f3e06 	br	1d74 <__alt_data_end+0xf8001d74>
    207c:	01003f84 	movi	r4,254
    2080:	02001fc4 	movi	r8,127
    2084:	01c01f84 	movi	r7,126
    2088:	003e4006 	br	198c <__alt_data_end+0xf800198c>
    208c:	00800074 	movhi	r2,1
    2090:	10908404 	addi	r2,r2,16912
    2094:	15000015 	stw	r20,0(r2)
    2098:	003f1106 	br	1ce0 <__alt_data_end+0xf8001ce0>
    209c:	00800044 	movi	r2,1
    20a0:	002b883a 	mov	r21,zero
    20a4:	003f1f06 	br	1d24 <__alt_data_end+0xf8001d24>
    20a8:	81400204 	addi	r5,r16,8
    20ac:	9009883a 	mov	r4,r18
    20b0:	00067140 	call	6714 <_free_r>
    20b4:	00800074 	movhi	r2,1
    20b8:	1097a904 	addi	r2,r2,24228
    20bc:	10c00017 	ldw	r3,0(r2)
    20c0:	003f2c06 	br	1d74 <__alt_data_end+0xf8001d74>
    20c4:	00c05504 	movi	r3,340
    20c8:	18800536 	bltu	r3,r2,20e0 <_malloc_r+0x7cc>
    20cc:	3804d3fa 	srli	r2,r7,15
    20d0:	11401e04 	addi	r5,r2,120
    20d4:	10c01dc4 	addi	r3,r2,119
    20d8:	294b883a 	add	r5,r5,r5
    20dc:	003f5606 	br	1e38 <__alt_data_end+0xf8001e38>
    20e0:	00c15504 	movi	r3,1364
    20e4:	18800536 	bltu	r3,r2,20fc <_malloc_r+0x7e8>
    20e8:	3804d4ba 	srli	r2,r7,18
    20ec:	11401f44 	addi	r5,r2,125
    20f0:	10c01f04 	addi	r3,r2,124
    20f4:	294b883a 	add	r5,r5,r5
    20f8:	003f4f06 	br	1e38 <__alt_data_end+0xf8001e38>
    20fc:	01403f84 	movi	r5,254
    2100:	00c01f84 	movi	r3,126
    2104:	003f4c06 	br	1e38 <__alt_data_end+0xf8001e38>
    2108:	98800117 	ldw	r2,4(r19)
    210c:	003fa006 	br	1f90 <__alt_data_end+0xf8001f90>
    2110:	8808d0fa 	srli	r4,r17,3
    2114:	20800044 	addi	r2,r4,1
    2118:	1085883a 	add	r2,r2,r2
    211c:	003e9006 	br	1b60 <__alt_data_end+0xf8001b60>

00002120 <_printf_r>:
    2120:	defffd04 	addi	sp,sp,-12
    2124:	2805883a 	mov	r2,r5
    2128:	dfc00015 	stw	ra,0(sp)
    212c:	d9800115 	stw	r6,4(sp)
    2130:	d9c00215 	stw	r7,8(sp)
    2134:	21400217 	ldw	r5,8(r4)
    2138:	d9c00104 	addi	r7,sp,4
    213c:	100d883a 	mov	r6,r2
    2140:	00021e00 	call	21e0 <___vfprintf_internal_r>
    2144:	dfc00017 	ldw	ra,0(sp)
    2148:	dec00304 	addi	sp,sp,12
    214c:	f800283a 	ret

00002150 <printf>:
    2150:	defffc04 	addi	sp,sp,-16
    2154:	dfc00015 	stw	ra,0(sp)
    2158:	d9400115 	stw	r5,4(sp)
    215c:	d9800215 	stw	r6,8(sp)
    2160:	d9c00315 	stw	r7,12(sp)
    2164:	00800074 	movhi	r2,1
    2168:	10908304 	addi	r2,r2,16908
    216c:	10800017 	ldw	r2,0(r2)
    2170:	200b883a 	mov	r5,r4
    2174:	d9800104 	addi	r6,sp,4
    2178:	11000217 	ldw	r4,8(r2)
    217c:	00044bc0 	call	44bc <__vfprintf_internal>
    2180:	dfc00017 	ldw	ra,0(sp)
    2184:	dec00404 	addi	sp,sp,16
    2188:	f800283a 	ret

0000218c <_sbrk_r>:
    218c:	defffd04 	addi	sp,sp,-12
    2190:	dc000015 	stw	r16,0(sp)
    2194:	04000074 	movhi	r16,1
    2198:	dc400115 	stw	r17,4(sp)
    219c:	84179c04 	addi	r16,r16,24176
    21a0:	2023883a 	mov	r17,r4
    21a4:	2809883a 	mov	r4,r5
    21a8:	dfc00215 	stw	ra,8(sp)
    21ac:	80000015 	stw	zero,0(r16)
    21b0:	000eff00 	call	eff0 <sbrk>
    21b4:	00ffffc4 	movi	r3,-1
    21b8:	10c00526 	beq	r2,r3,21d0 <_sbrk_r+0x44>
    21bc:	dfc00217 	ldw	ra,8(sp)
    21c0:	dc400117 	ldw	r17,4(sp)
    21c4:	dc000017 	ldw	r16,0(sp)
    21c8:	dec00304 	addi	sp,sp,12
    21cc:	f800283a 	ret
    21d0:	80c00017 	ldw	r3,0(r16)
    21d4:	183ff926 	beq	r3,zero,21bc <__alt_data_end+0xf80021bc>
    21d8:	88c00015 	stw	r3,0(r17)
    21dc:	003ff706 	br	21bc <__alt_data_end+0xf80021bc>

000021e0 <___vfprintf_internal_r>:
    21e0:	deffb804 	addi	sp,sp,-288
    21e4:	dfc04715 	stw	ra,284(sp)
    21e8:	ddc04515 	stw	r23,276(sp)
    21ec:	dd404315 	stw	r21,268(sp)
    21f0:	d9002d15 	stw	r4,180(sp)
    21f4:	282f883a 	mov	r23,r5
    21f8:	302b883a 	mov	r21,r6
    21fc:	d9c02e15 	stw	r7,184(sp)
    2200:	df004615 	stw	fp,280(sp)
    2204:	dd804415 	stw	r22,272(sp)
    2208:	dd004215 	stw	r20,264(sp)
    220c:	dcc04115 	stw	r19,260(sp)
    2210:	dc804015 	stw	r18,256(sp)
    2214:	dc403f15 	stw	r17,252(sp)
    2218:	dc003e15 	stw	r16,248(sp)
    221c:	00071200 	call	7120 <_localeconv_r>
    2220:	10800017 	ldw	r2,0(r2)
    2224:	1009883a 	mov	r4,r2
    2228:	d8803415 	stw	r2,208(sp)
    222c:	00090640 	call	9064 <strlen>
    2230:	d8803715 	stw	r2,220(sp)
    2234:	d8802d17 	ldw	r2,180(sp)
    2238:	10000226 	beq	r2,zero,2244 <___vfprintf_internal_r+0x64>
    223c:	10800e17 	ldw	r2,56(r2)
    2240:	1000fb26 	beq	r2,zero,2630 <___vfprintf_internal_r+0x450>
    2244:	b880030b 	ldhu	r2,12(r23)
    2248:	10c8000c 	andi	r3,r2,8192
    224c:	1800061e 	bne	r3,zero,2268 <___vfprintf_internal_r+0x88>
    2250:	b9001917 	ldw	r4,100(r23)
    2254:	00f7ffc4 	movi	r3,-8193
    2258:	10880014 	ori	r2,r2,8192
    225c:	20c6703a 	and	r3,r4,r3
    2260:	b880030d 	sth	r2,12(r23)
    2264:	b8c01915 	stw	r3,100(r23)
    2268:	10c0020c 	andi	r3,r2,8
    226c:	1800c326 	beq	r3,zero,257c <___vfprintf_internal_r+0x39c>
    2270:	b8c00417 	ldw	r3,16(r23)
    2274:	1800c126 	beq	r3,zero,257c <___vfprintf_internal_r+0x39c>
    2278:	1080068c 	andi	r2,r2,26
    227c:	00c00284 	movi	r3,10
    2280:	10c0c626 	beq	r2,r3,259c <___vfprintf_internal_r+0x3bc>
    2284:	d8c00404 	addi	r3,sp,16
    2288:	05000074 	movhi	r20,1
    228c:	d9001e04 	addi	r4,sp,120
    2290:	a5083d84 	addi	r20,r20,8438
    2294:	d8c01e15 	stw	r3,120(sp)
    2298:	d8002015 	stw	zero,128(sp)
    229c:	d8001f15 	stw	zero,124(sp)
    22a0:	d8003315 	stw	zero,204(sp)
    22a4:	d8003615 	stw	zero,216(sp)
    22a8:	d8003815 	stw	zero,224(sp)
    22ac:	1811883a 	mov	r8,r3
    22b0:	d8003915 	stw	zero,228(sp)
    22b4:	d8003a15 	stw	zero,232(sp)
    22b8:	d8002f15 	stw	zero,188(sp)
    22bc:	d9002815 	stw	r4,160(sp)
    22c0:	a8800007 	ldb	r2,0(r21)
    22c4:	10028b26 	beq	r2,zero,2cf4 <___vfprintf_internal_r+0xb14>
    22c8:	00c00944 	movi	r3,37
    22cc:	a823883a 	mov	r17,r21
    22d0:	10c0021e 	bne	r2,r3,22dc <___vfprintf_internal_r+0xfc>
    22d4:	00001406 	br	2328 <___vfprintf_internal_r+0x148>
    22d8:	10c00326 	beq	r2,r3,22e8 <___vfprintf_internal_r+0x108>
    22dc:	8c400044 	addi	r17,r17,1
    22e0:	88800007 	ldb	r2,0(r17)
    22e4:	103ffc1e 	bne	r2,zero,22d8 <__alt_data_end+0xf80022d8>
    22e8:	8d61c83a 	sub	r16,r17,r21
    22ec:	80000e26 	beq	r16,zero,2328 <___vfprintf_internal_r+0x148>
    22f0:	d8c02017 	ldw	r3,128(sp)
    22f4:	d8801f17 	ldw	r2,124(sp)
    22f8:	45400015 	stw	r21,0(r8)
    22fc:	1c07883a 	add	r3,r3,r16
    2300:	10800044 	addi	r2,r2,1
    2304:	d8c02015 	stw	r3,128(sp)
    2308:	44000115 	stw	r16,4(r8)
    230c:	d8801f15 	stw	r2,124(sp)
    2310:	00c001c4 	movi	r3,7
    2314:	1880a916 	blt	r3,r2,25bc <___vfprintf_internal_r+0x3dc>
    2318:	42000204 	addi	r8,r8,8
    231c:	d9402f17 	ldw	r5,188(sp)
    2320:	2c0b883a 	add	r5,r5,r16
    2324:	d9402f15 	stw	r5,188(sp)
    2328:	88800007 	ldb	r2,0(r17)
    232c:	1000aa26 	beq	r2,zero,25d8 <___vfprintf_internal_r+0x3f8>
    2330:	8d400044 	addi	r21,r17,1
    2334:	8c400047 	ldb	r17,1(r17)
    2338:	0021883a 	mov	r16,zero
    233c:	00bfffc4 	movi	r2,-1
    2340:	0025883a 	mov	r18,zero
    2344:	dc002905 	stb	r16,164(sp)
    2348:	d8002785 	stb	zero,158(sp)
    234c:	d8002b05 	stb	zero,172(sp)
    2350:	d8802a15 	stw	r2,168(sp)
    2354:	d8003115 	stw	zero,196(sp)
    2358:	04c01604 	movi	r19,88
    235c:	05800244 	movi	r22,9
    2360:	9021883a 	mov	r16,r18
    2364:	4039883a 	mov	fp,r8
    2368:	ad400044 	addi	r21,r21,1
    236c:	88bff804 	addi	r2,r17,-32
    2370:	98833236 	bltu	r19,r2,303c <___vfprintf_internal_r+0xe5c>
    2374:	100490ba 	slli	r2,r2,2
    2378:	00c00034 	movhi	r3,0
    237c:	18c8e304 	addi	r3,r3,9100
    2380:	10c5883a 	add	r2,r2,r3
    2384:	10800017 	ldw	r2,0(r2)
    2388:	1000683a 	jmp	r2
    238c:	00002f34 	movhi	zero,188
    2390:	0000303c 	xorhi	zero,zero,192
    2394:	0000303c 	xorhi	zero,zero,192
    2398:	00002f54 	movui	zero,189
    239c:	0000303c 	xorhi	zero,zero,192
    23a0:	0000303c 	xorhi	zero,zero,192
    23a4:	0000303c 	xorhi	zero,zero,192
    23a8:	0000303c 	xorhi	zero,zero,192
    23ac:	0000303c 	xorhi	zero,zero,192
    23b0:	0000303c 	xorhi	zero,zero,192
    23b4:	0000263c 	xorhi	zero,zero,152
    23b8:	00002e44 	movi	zero,185
    23bc:	0000303c 	xorhi	zero,zero,192
    23c0:	00002500 	call	250 <_start+0x20>
    23c4:	00002660 	cmpeqi	zero,zero,153
    23c8:	0000303c 	xorhi	zero,zero,192
    23cc:	000026b0 	cmpltui	zero,zero,154
    23d0:	000026bc 	xorhi	zero,zero,154
    23d4:	000026bc 	xorhi	zero,zero,154
    23d8:	000026bc 	xorhi	zero,zero,154
    23dc:	000026bc 	xorhi	zero,zero,154
    23e0:	000026bc 	xorhi	zero,zero,154
    23e4:	000026bc 	xorhi	zero,zero,154
    23e8:	000026bc 	xorhi	zero,zero,154
    23ec:	000026bc 	xorhi	zero,zero,154
    23f0:	000026bc 	xorhi	zero,zero,154
    23f4:	0000303c 	xorhi	zero,zero,192
    23f8:	0000303c 	xorhi	zero,zero,192
    23fc:	0000303c 	xorhi	zero,zero,192
    2400:	0000303c 	xorhi	zero,zero,192
    2404:	0000303c 	xorhi	zero,zero,192
    2408:	0000303c 	xorhi	zero,zero,192
    240c:	0000303c 	xorhi	zero,zero,192
    2410:	0000303c 	xorhi	zero,zero,192
    2414:	0000303c 	xorhi	zero,zero,192
    2418:	0000303c 	xorhi	zero,zero,192
    241c:	000026f8 	rdprs	zero,zero,155
    2420:	000027c0 	call	27c <clear_lcd+0x10>
    2424:	0000303c 	xorhi	zero,zero,192
    2428:	000027c0 	call	27c <clear_lcd+0x10>
    242c:	0000303c 	xorhi	zero,zero,192
    2430:	0000303c 	xorhi	zero,zero,192
    2434:	0000303c 	xorhi	zero,zero,192
    2438:	0000303c 	xorhi	zero,zero,192
    243c:	0000286c 	andhi	zero,zero,161
    2440:	0000303c 	xorhi	zero,zero,192
    2444:	0000303c 	xorhi	zero,zero,192
    2448:	00002878 	rdprs	zero,zero,161
    244c:	0000303c 	xorhi	zero,zero,192
    2450:	0000303c 	xorhi	zero,zero,192
    2454:	0000303c 	xorhi	zero,zero,192
    2458:	0000303c 	xorhi	zero,zero,192
    245c:	0000303c 	xorhi	zero,zero,192
    2460:	00002cfc 	xorhi	zero,zero,179
    2464:	0000303c 	xorhi	zero,zero,192
    2468:	0000303c 	xorhi	zero,zero,192
    246c:	00002d68 	cmpgeui	zero,zero,181
    2470:	0000303c 	xorhi	zero,zero,192
    2474:	0000303c 	xorhi	zero,zero,192
    2478:	0000303c 	xorhi	zero,zero,192
    247c:	0000303c 	xorhi	zero,zero,192
    2480:	0000303c 	xorhi	zero,zero,192
    2484:	0000303c 	xorhi	zero,zero,192
    2488:	0000303c 	xorhi	zero,zero,192
    248c:	0000303c 	xorhi	zero,zero,192
    2490:	0000303c 	xorhi	zero,zero,192
    2494:	0000303c 	xorhi	zero,zero,192
    2498:	00002fe0 	cmpeqi	zero,zero,191
    249c:	00002f60 	cmpeqi	zero,zero,189
    24a0:	000027c0 	call	27c <clear_lcd+0x10>
    24a4:	000027c0 	call	27c <clear_lcd+0x10>
    24a8:	000027c0 	call	27c <clear_lcd+0x10>
    24ac:	00002f80 	call	2f8 <disable_led+0x4>
    24b0:	00002f60 	cmpeqi	zero,zero,189
    24b4:	0000303c 	xorhi	zero,zero,192
    24b8:	0000303c 	xorhi	zero,zero,192
    24bc:	00002f8c 	andi	zero,zero,190
    24c0:	0000303c 	xorhi	zero,zero,192
    24c4:	00002fa0 	cmpeqi	zero,zero,190
    24c8:	00002e24 	muli	zero,zero,184
    24cc:	0000250c 	andi	zero,zero,148
    24d0:	00002e5c 	xori	zero,zero,185
    24d4:	0000303c 	xorhi	zero,zero,192
    24d8:	00002e68 	cmpgeui	zero,zero,185
    24dc:	0000303c 	xorhi	zero,zero,192
    24e0:	00002ecc 	andi	zero,zero,187
    24e4:	0000303c 	xorhi	zero,zero,192
    24e8:	0000303c 	xorhi	zero,zero,192
    24ec:	00002eec 	andhi	zero,zero,187
    24f0:	d8c03117 	ldw	r3,196(sp)
    24f4:	d8802e15 	stw	r2,184(sp)
    24f8:	00c7c83a 	sub	r3,zero,r3
    24fc:	d8c03115 	stw	r3,196(sp)
    2500:	84000114 	ori	r16,r16,4
    2504:	ac400007 	ldb	r17,0(r21)
    2508:	003f9706 	br	2368 <__alt_data_end+0xf8002368>
    250c:	00800c04 	movi	r2,48
    2510:	d8802705 	stb	r2,156(sp)
    2514:	00801e04 	movi	r2,120
    2518:	d8802745 	stb	r2,157(sp)
    251c:	d9002a17 	ldw	r4,168(sp)
    2520:	d8802e17 	ldw	r2,184(sp)
    2524:	d8002785 	stb	zero,158(sp)
    2528:	e011883a 	mov	r8,fp
    252c:	10c00104 	addi	r3,r2,4
    2530:	14c00017 	ldw	r19,0(r2)
    2534:	002d883a 	mov	r22,zero
    2538:	80800094 	ori	r2,r16,2
    253c:	2002ca16 	blt	r4,zero,3068 <___vfprintf_internal_r+0xe88>
    2540:	00bfdfc4 	movi	r2,-129
    2544:	80a4703a 	and	r18,r16,r2
    2548:	d8c02e15 	stw	r3,184(sp)
    254c:	94800094 	ori	r18,r18,2
    2550:	9802b41e 	bne	r19,zero,3024 <___vfprintf_internal_r+0xe44>
    2554:	01400074 	movhi	r5,1
    2558:	29483604 	addi	r5,r5,8408
    255c:	d9403915 	stw	r5,228(sp)
    2560:	04401e04 	movi	r17,120
    2564:	d8802a17 	ldw	r2,168(sp)
    2568:	0039883a 	mov	fp,zero
    256c:	1001fa26 	beq	r2,zero,2d58 <___vfprintf_internal_r+0xb78>
    2570:	0027883a 	mov	r19,zero
    2574:	002d883a 	mov	r22,zero
    2578:	00021906 	br	2de0 <___vfprintf_internal_r+0xc00>
    257c:	d9002d17 	ldw	r4,180(sp)
    2580:	b80b883a 	mov	r5,r23
    2584:	00045940 	call	4594 <__swsetup_r>
    2588:	1005dc1e 	bne	r2,zero,3cfc <___vfprintf_internal_r+0x1b1c>
    258c:	b880030b 	ldhu	r2,12(r23)
    2590:	00c00284 	movi	r3,10
    2594:	1080068c 	andi	r2,r2,26
    2598:	10ff3a1e 	bne	r2,r3,2284 <__alt_data_end+0xf8002284>
    259c:	b880038f 	ldh	r2,14(r23)
    25a0:	103f3816 	blt	r2,zero,2284 <__alt_data_end+0xf8002284>
    25a4:	d9c02e17 	ldw	r7,184(sp)
    25a8:	d9002d17 	ldw	r4,180(sp)
    25ac:	a80d883a 	mov	r6,r21
    25b0:	b80b883a 	mov	r5,r23
    25b4:	00044d80 	call	44d8 <__sbprintf>
    25b8:	00001106 	br	2600 <___vfprintf_internal_r+0x420>
    25bc:	d9002d17 	ldw	r4,180(sp)
    25c0:	d9801e04 	addi	r6,sp,120
    25c4:	b80b883a 	mov	r5,r23
    25c8:	00091f80 	call	91f8 <__sprint_r>
    25cc:	1000081e 	bne	r2,zero,25f0 <___vfprintf_internal_r+0x410>
    25d0:	da000404 	addi	r8,sp,16
    25d4:	003f5106 	br	231c <__alt_data_end+0xf800231c>
    25d8:	d8802017 	ldw	r2,128(sp)
    25dc:	10000426 	beq	r2,zero,25f0 <___vfprintf_internal_r+0x410>
    25e0:	d9002d17 	ldw	r4,180(sp)
    25e4:	d9801e04 	addi	r6,sp,120
    25e8:	b80b883a 	mov	r5,r23
    25ec:	00091f80 	call	91f8 <__sprint_r>
    25f0:	b880030b 	ldhu	r2,12(r23)
    25f4:	1080100c 	andi	r2,r2,64
    25f8:	1005c01e 	bne	r2,zero,3cfc <___vfprintf_internal_r+0x1b1c>
    25fc:	d8802f17 	ldw	r2,188(sp)
    2600:	dfc04717 	ldw	ra,284(sp)
    2604:	df004617 	ldw	fp,280(sp)
    2608:	ddc04517 	ldw	r23,276(sp)
    260c:	dd804417 	ldw	r22,272(sp)
    2610:	dd404317 	ldw	r21,268(sp)
    2614:	dd004217 	ldw	r20,264(sp)
    2618:	dcc04117 	ldw	r19,260(sp)
    261c:	dc804017 	ldw	r18,256(sp)
    2620:	dc403f17 	ldw	r17,252(sp)
    2624:	dc003e17 	ldw	r16,248(sp)
    2628:	dec04804 	addi	sp,sp,288
    262c:	f800283a 	ret
    2630:	d9002d17 	ldw	r4,180(sp)
    2634:	00065a00 	call	65a0 <__sinit>
    2638:	003f0206 	br	2244 <__alt_data_end+0xf8002244>
    263c:	d9002e17 	ldw	r4,184(sp)
    2640:	d9402e17 	ldw	r5,184(sp)
    2644:	21000017 	ldw	r4,0(r4)
    2648:	28800104 	addi	r2,r5,4
    264c:	d9003115 	stw	r4,196(sp)
    2650:	203fa716 	blt	r4,zero,24f0 <__alt_data_end+0xf80024f0>
    2654:	d8802e15 	stw	r2,184(sp)
    2658:	ac400007 	ldb	r17,0(r21)
    265c:	003f4206 	br	2368 <__alt_data_end+0xf8002368>
    2660:	ac400007 	ldb	r17,0(r21)
    2664:	01000a84 	movi	r4,42
    2668:	a8c00044 	addi	r3,r21,1
    266c:	89075826 	beq	r17,r4,43d0 <___vfprintf_internal_r+0x21f0>
    2670:	8cbff404 	addi	r18,r17,-48
    2674:	b486ae36 	bltu	r22,r18,4130 <___vfprintf_internal_r+0x1f50>
    2678:	0009883a 	mov	r4,zero
    267c:	1823883a 	mov	r17,r3
    2680:	01400284 	movi	r5,10
    2684:	00017b40 	call	17b4 <__mulsi3>
    2688:	88c00007 	ldb	r3,0(r17)
    268c:	1489883a 	add	r4,r2,r18
    2690:	8d400044 	addi	r21,r17,1
    2694:	1cbff404 	addi	r18,r3,-48
    2698:	a823883a 	mov	r17,r21
    269c:	b4bff82e 	bgeu	r22,r18,2680 <__alt_data_end+0xf8002680>
    26a0:	1823883a 	mov	r17,r3
    26a4:	2005f616 	blt	r4,zero,3e80 <___vfprintf_internal_r+0x1ca0>
    26a8:	d9002a15 	stw	r4,168(sp)
    26ac:	003f2f06 	br	236c <__alt_data_end+0xf800236c>
    26b0:	84002014 	ori	r16,r16,128
    26b4:	ac400007 	ldb	r17,0(r21)
    26b8:	003f2b06 	br	2368 <__alt_data_end+0xf8002368>
    26bc:	8cbff404 	addi	r18,r17,-48
    26c0:	d8003115 	stw	zero,196(sp)
    26c4:	0009883a 	mov	r4,zero
    26c8:	a823883a 	mov	r17,r21
    26cc:	01400284 	movi	r5,10
    26d0:	00017b40 	call	17b4 <__mulsi3>
    26d4:	88c00007 	ldb	r3,0(r17)
    26d8:	9089883a 	add	r4,r18,r2
    26dc:	ad400044 	addi	r21,r21,1
    26e0:	1cbff404 	addi	r18,r3,-48
    26e4:	a823883a 	mov	r17,r21
    26e8:	b4bff82e 	bgeu	r22,r18,26cc <__alt_data_end+0xf80026cc>
    26ec:	1823883a 	mov	r17,r3
    26f0:	d9003115 	stw	r4,196(sp)
    26f4:	003f1d06 	br	236c <__alt_data_end+0xf800236c>
    26f8:	8025883a 	mov	r18,r16
    26fc:	dc002903 	ldbu	r16,164(sp)
    2700:	e011883a 	mov	r8,fp
    2704:	84003fcc 	andi	r16,r16,255
    2708:	8007531e 	bne	r16,zero,4458 <___vfprintf_internal_r+0x2278>
    270c:	94800414 	ori	r18,r18,16
    2710:	9080080c 	andi	r2,r18,32
    2714:	1003a326 	beq	r2,zero,35a4 <___vfprintf_internal_r+0x13c4>
    2718:	d9002e17 	ldw	r4,184(sp)
    271c:	20800117 	ldw	r2,4(r4)
    2720:	24c00017 	ldw	r19,0(r4)
    2724:	21000204 	addi	r4,r4,8
    2728:	d9002e15 	stw	r4,184(sp)
    272c:	102d883a 	mov	r22,r2
    2730:	10047316 	blt	r2,zero,3900 <___vfprintf_internal_r+0x1720>
    2734:	d9002a17 	ldw	r4,168(sp)
    2738:	df002783 	ldbu	fp,158(sp)
    273c:	2003e416 	blt	r4,zero,36d0 <___vfprintf_internal_r+0x14f0>
    2740:	00ffdfc4 	movi	r3,-129
    2744:	9d84b03a 	or	r2,r19,r22
    2748:	90e4703a 	and	r18,r18,r3
    274c:	10018026 	beq	r2,zero,2d50 <___vfprintf_internal_r+0xb70>
    2750:	b003ab26 	beq	r22,zero,3600 <___vfprintf_internal_r+0x1420>
    2754:	dc402915 	stw	r17,164(sp)
    2758:	dc001e04 	addi	r16,sp,120
    275c:	b023883a 	mov	r17,r22
    2760:	402d883a 	mov	r22,r8
    2764:	9809883a 	mov	r4,r19
    2768:	880b883a 	mov	r5,r17
    276c:	01800284 	movi	r6,10
    2770:	000f883a 	mov	r7,zero
    2774:	000b73c0 	call	b73c <__umoddi3>
    2778:	10800c04 	addi	r2,r2,48
    277c:	843fffc4 	addi	r16,r16,-1
    2780:	9809883a 	mov	r4,r19
    2784:	880b883a 	mov	r5,r17
    2788:	80800005 	stb	r2,0(r16)
    278c:	01800284 	movi	r6,10
    2790:	000f883a 	mov	r7,zero
    2794:	000b1400 	call	b140 <__udivdi3>
    2798:	1027883a 	mov	r19,r2
    279c:	10c4b03a 	or	r2,r2,r3
    27a0:	1823883a 	mov	r17,r3
    27a4:	103fef1e 	bne	r2,zero,2764 <__alt_data_end+0xf8002764>
    27a8:	d8c02817 	ldw	r3,160(sp)
    27ac:	dc402917 	ldw	r17,164(sp)
    27b0:	b011883a 	mov	r8,r22
    27b4:	1c07c83a 	sub	r3,r3,r16
    27b8:	d8c02b15 	stw	r3,172(sp)
    27bc:	00005f06 	br	293c <___vfprintf_internal_r+0x75c>
    27c0:	8025883a 	mov	r18,r16
    27c4:	dc002903 	ldbu	r16,164(sp)
    27c8:	e011883a 	mov	r8,fp
    27cc:	84003fcc 	andi	r16,r16,255
    27d0:	80071e1e 	bne	r16,zero,444c <___vfprintf_internal_r+0x226c>
    27d4:	9080020c 	andi	r2,r18,8
    27d8:	1004af26 	beq	r2,zero,3a98 <___vfprintf_internal_r+0x18b8>
    27dc:	d9002e17 	ldw	r4,184(sp)
    27e0:	d9402e17 	ldw	r5,184(sp)
    27e4:	d8802e17 	ldw	r2,184(sp)
    27e8:	21000017 	ldw	r4,0(r4)
    27ec:	29400117 	ldw	r5,4(r5)
    27f0:	10800204 	addi	r2,r2,8
    27f4:	d9003615 	stw	r4,216(sp)
    27f8:	d9403815 	stw	r5,224(sp)
    27fc:	d8802e15 	stw	r2,184(sp)
    2800:	d9003617 	ldw	r4,216(sp)
    2804:	d9403817 	ldw	r5,224(sp)
    2808:	da003d15 	stw	r8,244(sp)
    280c:	04000044 	movi	r16,1
    2810:	0008dd80 	call	8dd8 <__fpclassifyd>
    2814:	da003d17 	ldw	r8,244(sp)
    2818:	1404441e 	bne	r2,r16,392c <___vfprintf_internal_r+0x174c>
    281c:	d9003617 	ldw	r4,216(sp)
    2820:	d9403817 	ldw	r5,224(sp)
    2824:	000d883a 	mov	r6,zero
    2828:	000f883a 	mov	r7,zero
    282c:	000d2940 	call	d294 <__ledf2>
    2830:	da003d17 	ldw	r8,244(sp)
    2834:	1005e316 	blt	r2,zero,3fc4 <___vfprintf_internal_r+0x1de4>
    2838:	df002783 	ldbu	fp,158(sp)
    283c:	008011c4 	movi	r2,71
    2840:	1445580e 	bge	r2,r17,3da4 <___vfprintf_internal_r+0x1bc4>
    2844:	04000074 	movhi	r16,1
    2848:	84082e04 	addi	r16,r16,8376
    284c:	00c000c4 	movi	r3,3
    2850:	00bfdfc4 	movi	r2,-129
    2854:	d8c02915 	stw	r3,164(sp)
    2858:	90a4703a 	and	r18,r18,r2
    285c:	d8c02b15 	stw	r3,172(sp)
    2860:	d8002a15 	stw	zero,168(sp)
    2864:	d8003215 	stw	zero,200(sp)
    2868:	00003a06 	br	2954 <___vfprintf_internal_r+0x774>
    286c:	84000214 	ori	r16,r16,8
    2870:	ac400007 	ldb	r17,0(r21)
    2874:	003ebc06 	br	2368 <__alt_data_end+0xf8002368>
    2878:	8025883a 	mov	r18,r16
    287c:	dc002903 	ldbu	r16,164(sp)
    2880:	e011883a 	mov	r8,fp
    2884:	84003fcc 	andi	r16,r16,255
    2888:	8007001e 	bne	r16,zero,448c <___vfprintf_internal_r+0x22ac>
    288c:	94800414 	ori	r18,r18,16
    2890:	9080080c 	andi	r2,r18,32
    2894:	1002fa26 	beq	r2,zero,3480 <___vfprintf_internal_r+0x12a0>
    2898:	d9002e17 	ldw	r4,184(sp)
    289c:	d9402a17 	ldw	r5,168(sp)
    28a0:	d8002785 	stb	zero,158(sp)
    28a4:	20800204 	addi	r2,r4,8
    28a8:	24c00017 	ldw	r19,0(r4)
    28ac:	25800117 	ldw	r22,4(r4)
    28b0:	2804b116 	blt	r5,zero,3b78 <___vfprintf_internal_r+0x1998>
    28b4:	013fdfc4 	movi	r4,-129
    28b8:	9d86b03a 	or	r3,r19,r22
    28bc:	d8802e15 	stw	r2,184(sp)
    28c0:	9124703a 	and	r18,r18,r4
    28c4:	1802fb1e 	bne	r3,zero,34b4 <___vfprintf_internal_r+0x12d4>
    28c8:	d8c02a17 	ldw	r3,168(sp)
    28cc:	0039883a 	mov	fp,zero
    28d0:	1805e526 	beq	r3,zero,4068 <___vfprintf_internal_r+0x1e88>
    28d4:	0027883a 	mov	r19,zero
    28d8:	002d883a 	mov	r22,zero
    28dc:	dc001e04 	addi	r16,sp,120
    28e0:	9806d0fa 	srli	r3,r19,3
    28e4:	b008977a 	slli	r4,r22,29
    28e8:	b02cd0fa 	srli	r22,r22,3
    28ec:	9cc001cc 	andi	r19,r19,7
    28f0:	98800c04 	addi	r2,r19,48
    28f4:	843fffc4 	addi	r16,r16,-1
    28f8:	20e6b03a 	or	r19,r4,r3
    28fc:	80800005 	stb	r2,0(r16)
    2900:	9d86b03a 	or	r3,r19,r22
    2904:	183ff61e 	bne	r3,zero,28e0 <__alt_data_end+0xf80028e0>
    2908:	90c0004c 	andi	r3,r18,1
    290c:	18014126 	beq	r3,zero,2e14 <___vfprintf_internal_r+0xc34>
    2910:	10803fcc 	andi	r2,r2,255
    2914:	1080201c 	xori	r2,r2,128
    2918:	10bfe004 	addi	r2,r2,-128
    291c:	00c00c04 	movi	r3,48
    2920:	10c13c26 	beq	r2,r3,2e14 <___vfprintf_internal_r+0xc34>
    2924:	80ffffc5 	stb	r3,-1(r16)
    2928:	d8c02817 	ldw	r3,160(sp)
    292c:	80bfffc4 	addi	r2,r16,-1
    2930:	1021883a 	mov	r16,r2
    2934:	1887c83a 	sub	r3,r3,r2
    2938:	d8c02b15 	stw	r3,172(sp)
    293c:	d8802b17 	ldw	r2,172(sp)
    2940:	d9002a17 	ldw	r4,168(sp)
    2944:	1100010e 	bge	r2,r4,294c <___vfprintf_internal_r+0x76c>
    2948:	2005883a 	mov	r2,r4
    294c:	d8802915 	stw	r2,164(sp)
    2950:	d8003215 	stw	zero,200(sp)
    2954:	e7003fcc 	andi	fp,fp,255
    2958:	e700201c 	xori	fp,fp,128
    295c:	e73fe004 	addi	fp,fp,-128
    2960:	e0000326 	beq	fp,zero,2970 <___vfprintf_internal_r+0x790>
    2964:	d8c02917 	ldw	r3,164(sp)
    2968:	18c00044 	addi	r3,r3,1
    296c:	d8c02915 	stw	r3,164(sp)
    2970:	90c0008c 	andi	r3,r18,2
    2974:	d8c02c15 	stw	r3,176(sp)
    2978:	18000326 	beq	r3,zero,2988 <___vfprintf_internal_r+0x7a8>
    297c:	d8c02917 	ldw	r3,164(sp)
    2980:	18c00084 	addi	r3,r3,2
    2984:	d8c02915 	stw	r3,164(sp)
    2988:	90c0210c 	andi	r3,r18,132
    298c:	d8c03015 	stw	r3,192(sp)
    2990:	1801c51e 	bne	r3,zero,30a8 <___vfprintf_internal_r+0xec8>
    2994:	d9003117 	ldw	r4,196(sp)
    2998:	d8c02917 	ldw	r3,164(sp)
    299c:	20e7c83a 	sub	r19,r4,r3
    29a0:	04c1c10e 	bge	zero,r19,30a8 <___vfprintf_internal_r+0xec8>
    29a4:	02400404 	movi	r9,16
    29a8:	d8c02017 	ldw	r3,128(sp)
    29ac:	d8801f17 	ldw	r2,124(sp)
    29b0:	4cc52f0e 	bge	r9,r19,3e70 <___vfprintf_internal_r+0x1c90>
    29b4:	01400074 	movhi	r5,1
    29b8:	29484184 	addi	r5,r5,8454
    29bc:	dc403b15 	stw	r17,236(sp)
    29c0:	d9403515 	stw	r5,212(sp)
    29c4:	9823883a 	mov	r17,r19
    29c8:	482d883a 	mov	r22,r9
    29cc:	9027883a 	mov	r19,r18
    29d0:	070001c4 	movi	fp,7
    29d4:	8025883a 	mov	r18,r16
    29d8:	dc002d17 	ldw	r16,180(sp)
    29dc:	00000306 	br	29ec <___vfprintf_internal_r+0x80c>
    29e0:	8c7ffc04 	addi	r17,r17,-16
    29e4:	42000204 	addi	r8,r8,8
    29e8:	b440130e 	bge	r22,r17,2a38 <___vfprintf_internal_r+0x858>
    29ec:	01000074 	movhi	r4,1
    29f0:	18c00404 	addi	r3,r3,16
    29f4:	10800044 	addi	r2,r2,1
    29f8:	21084184 	addi	r4,r4,8454
    29fc:	41000015 	stw	r4,0(r8)
    2a00:	45800115 	stw	r22,4(r8)
    2a04:	d8c02015 	stw	r3,128(sp)
    2a08:	d8801f15 	stw	r2,124(sp)
    2a0c:	e0bff40e 	bge	fp,r2,29e0 <__alt_data_end+0xf80029e0>
    2a10:	d9801e04 	addi	r6,sp,120
    2a14:	b80b883a 	mov	r5,r23
    2a18:	8009883a 	mov	r4,r16
    2a1c:	00091f80 	call	91f8 <__sprint_r>
    2a20:	103ef31e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    2a24:	8c7ffc04 	addi	r17,r17,-16
    2a28:	d8c02017 	ldw	r3,128(sp)
    2a2c:	d8801f17 	ldw	r2,124(sp)
    2a30:	da000404 	addi	r8,sp,16
    2a34:	b47fed16 	blt	r22,r17,29ec <__alt_data_end+0xf80029ec>
    2a38:	9021883a 	mov	r16,r18
    2a3c:	9825883a 	mov	r18,r19
    2a40:	8827883a 	mov	r19,r17
    2a44:	dc403b17 	ldw	r17,236(sp)
    2a48:	d9403517 	ldw	r5,212(sp)
    2a4c:	98c7883a 	add	r3,r19,r3
    2a50:	10800044 	addi	r2,r2,1
    2a54:	41400015 	stw	r5,0(r8)
    2a58:	44c00115 	stw	r19,4(r8)
    2a5c:	d8c02015 	stw	r3,128(sp)
    2a60:	d8801f15 	stw	r2,124(sp)
    2a64:	010001c4 	movi	r4,7
    2a68:	2082c516 	blt	r4,r2,3580 <___vfprintf_internal_r+0x13a0>
    2a6c:	df002787 	ldb	fp,158(sp)
    2a70:	42000204 	addi	r8,r8,8
    2a74:	e0000c26 	beq	fp,zero,2aa8 <___vfprintf_internal_r+0x8c8>
    2a78:	d8801f17 	ldw	r2,124(sp)
    2a7c:	d9002784 	addi	r4,sp,158
    2a80:	18c00044 	addi	r3,r3,1
    2a84:	10800044 	addi	r2,r2,1
    2a88:	41000015 	stw	r4,0(r8)
    2a8c:	01000044 	movi	r4,1
    2a90:	41000115 	stw	r4,4(r8)
    2a94:	d8c02015 	stw	r3,128(sp)
    2a98:	d8801f15 	stw	r2,124(sp)
    2a9c:	010001c4 	movi	r4,7
    2aa0:	20825e16 	blt	r4,r2,341c <___vfprintf_internal_r+0x123c>
    2aa4:	42000204 	addi	r8,r8,8
    2aa8:	d8802c17 	ldw	r2,176(sp)
    2aac:	10000c26 	beq	r2,zero,2ae0 <___vfprintf_internal_r+0x900>
    2ab0:	d8801f17 	ldw	r2,124(sp)
    2ab4:	d9002704 	addi	r4,sp,156
    2ab8:	18c00084 	addi	r3,r3,2
    2abc:	10800044 	addi	r2,r2,1
    2ac0:	41000015 	stw	r4,0(r8)
    2ac4:	01000084 	movi	r4,2
    2ac8:	41000115 	stw	r4,4(r8)
    2acc:	d8c02015 	stw	r3,128(sp)
    2ad0:	d8801f15 	stw	r2,124(sp)
    2ad4:	010001c4 	movi	r4,7
    2ad8:	20825816 	blt	r4,r2,343c <___vfprintf_internal_r+0x125c>
    2adc:	42000204 	addi	r8,r8,8
    2ae0:	d9003017 	ldw	r4,192(sp)
    2ae4:	00802004 	movi	r2,128
    2ae8:	2081bb26 	beq	r4,r2,31d8 <___vfprintf_internal_r+0xff8>
    2aec:	d9402a17 	ldw	r5,168(sp)
    2af0:	d8802b17 	ldw	r2,172(sp)
    2af4:	28adc83a 	sub	r22,r5,r2
    2af8:	0580310e 	bge	zero,r22,2bc0 <___vfprintf_internal_r+0x9e0>
    2afc:	07000404 	movi	fp,16
    2b00:	d8801f17 	ldw	r2,124(sp)
    2b04:	e584360e 	bge	fp,r22,3be0 <___vfprintf_internal_r+0x1a00>
    2b08:	01400074 	movhi	r5,1
    2b0c:	29483d84 	addi	r5,r5,8438
    2b10:	dc402a15 	stw	r17,168(sp)
    2b14:	d9402c15 	stw	r5,176(sp)
    2b18:	b023883a 	mov	r17,r22
    2b1c:	04c001c4 	movi	r19,7
    2b20:	a82d883a 	mov	r22,r21
    2b24:	902b883a 	mov	r21,r18
    2b28:	8025883a 	mov	r18,r16
    2b2c:	dc002d17 	ldw	r16,180(sp)
    2b30:	00000306 	br	2b40 <___vfprintf_internal_r+0x960>
    2b34:	8c7ffc04 	addi	r17,r17,-16
    2b38:	42000204 	addi	r8,r8,8
    2b3c:	e440110e 	bge	fp,r17,2b84 <___vfprintf_internal_r+0x9a4>
    2b40:	18c00404 	addi	r3,r3,16
    2b44:	10800044 	addi	r2,r2,1
    2b48:	45000015 	stw	r20,0(r8)
    2b4c:	47000115 	stw	fp,4(r8)
    2b50:	d8c02015 	stw	r3,128(sp)
    2b54:	d8801f15 	stw	r2,124(sp)
    2b58:	98bff60e 	bge	r19,r2,2b34 <__alt_data_end+0xf8002b34>
    2b5c:	d9801e04 	addi	r6,sp,120
    2b60:	b80b883a 	mov	r5,r23
    2b64:	8009883a 	mov	r4,r16
    2b68:	00091f80 	call	91f8 <__sprint_r>
    2b6c:	103ea01e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    2b70:	8c7ffc04 	addi	r17,r17,-16
    2b74:	d8c02017 	ldw	r3,128(sp)
    2b78:	d8801f17 	ldw	r2,124(sp)
    2b7c:	da000404 	addi	r8,sp,16
    2b80:	e47fef16 	blt	fp,r17,2b40 <__alt_data_end+0xf8002b40>
    2b84:	9021883a 	mov	r16,r18
    2b88:	a825883a 	mov	r18,r21
    2b8c:	b02b883a 	mov	r21,r22
    2b90:	882d883a 	mov	r22,r17
    2b94:	dc402a17 	ldw	r17,168(sp)
    2b98:	d9002c17 	ldw	r4,176(sp)
    2b9c:	1d87883a 	add	r3,r3,r22
    2ba0:	10800044 	addi	r2,r2,1
    2ba4:	41000015 	stw	r4,0(r8)
    2ba8:	45800115 	stw	r22,4(r8)
    2bac:	d8c02015 	stw	r3,128(sp)
    2bb0:	d8801f15 	stw	r2,124(sp)
    2bb4:	010001c4 	movi	r4,7
    2bb8:	20821016 	blt	r4,r2,33fc <___vfprintf_internal_r+0x121c>
    2bbc:	42000204 	addi	r8,r8,8
    2bc0:	9080400c 	andi	r2,r18,256
    2bc4:	10013a1e 	bne	r2,zero,30b0 <___vfprintf_internal_r+0xed0>
    2bc8:	d9402b17 	ldw	r5,172(sp)
    2bcc:	d8801f17 	ldw	r2,124(sp)
    2bd0:	44000015 	stw	r16,0(r8)
    2bd4:	1947883a 	add	r3,r3,r5
    2bd8:	10800044 	addi	r2,r2,1
    2bdc:	41400115 	stw	r5,4(r8)
    2be0:	d8c02015 	stw	r3,128(sp)
    2be4:	d8801f15 	stw	r2,124(sp)
    2be8:	010001c4 	movi	r4,7
    2bec:	2081f516 	blt	r4,r2,33c4 <___vfprintf_internal_r+0x11e4>
    2bf0:	42000204 	addi	r8,r8,8
    2bf4:	9480010c 	andi	r18,r18,4
    2bf8:	90003226 	beq	r18,zero,2cc4 <___vfprintf_internal_r+0xae4>
    2bfc:	d9403117 	ldw	r5,196(sp)
    2c00:	d8802917 	ldw	r2,164(sp)
    2c04:	28a1c83a 	sub	r16,r5,r2
    2c08:	04002e0e 	bge	zero,r16,2cc4 <___vfprintf_internal_r+0xae4>
    2c0c:	04400404 	movi	r17,16
    2c10:	d8801f17 	ldw	r2,124(sp)
    2c14:	8c04c40e 	bge	r17,r16,3f28 <___vfprintf_internal_r+0x1d48>
    2c18:	01400074 	movhi	r5,1
    2c1c:	29484184 	addi	r5,r5,8454
    2c20:	d9403515 	stw	r5,212(sp)
    2c24:	048001c4 	movi	r18,7
    2c28:	dcc02d17 	ldw	r19,180(sp)
    2c2c:	00000306 	br	2c3c <___vfprintf_internal_r+0xa5c>
    2c30:	843ffc04 	addi	r16,r16,-16
    2c34:	42000204 	addi	r8,r8,8
    2c38:	8c00130e 	bge	r17,r16,2c88 <___vfprintf_internal_r+0xaa8>
    2c3c:	01000074 	movhi	r4,1
    2c40:	18c00404 	addi	r3,r3,16
    2c44:	10800044 	addi	r2,r2,1
    2c48:	21084184 	addi	r4,r4,8454
    2c4c:	41000015 	stw	r4,0(r8)
    2c50:	44400115 	stw	r17,4(r8)
    2c54:	d8c02015 	stw	r3,128(sp)
    2c58:	d8801f15 	stw	r2,124(sp)
    2c5c:	90bff40e 	bge	r18,r2,2c30 <__alt_data_end+0xf8002c30>
    2c60:	d9801e04 	addi	r6,sp,120
    2c64:	b80b883a 	mov	r5,r23
    2c68:	9809883a 	mov	r4,r19
    2c6c:	00091f80 	call	91f8 <__sprint_r>
    2c70:	103e5f1e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    2c74:	843ffc04 	addi	r16,r16,-16
    2c78:	d8c02017 	ldw	r3,128(sp)
    2c7c:	d8801f17 	ldw	r2,124(sp)
    2c80:	da000404 	addi	r8,sp,16
    2c84:	8c3fed16 	blt	r17,r16,2c3c <__alt_data_end+0xf8002c3c>
    2c88:	d9403517 	ldw	r5,212(sp)
    2c8c:	1c07883a 	add	r3,r3,r16
    2c90:	10800044 	addi	r2,r2,1
    2c94:	41400015 	stw	r5,0(r8)
    2c98:	44000115 	stw	r16,4(r8)
    2c9c:	d8c02015 	stw	r3,128(sp)
    2ca0:	d8801f15 	stw	r2,124(sp)
    2ca4:	010001c4 	movi	r4,7
    2ca8:	2080060e 	bge	r4,r2,2cc4 <___vfprintf_internal_r+0xae4>
    2cac:	d9002d17 	ldw	r4,180(sp)
    2cb0:	d9801e04 	addi	r6,sp,120
    2cb4:	b80b883a 	mov	r5,r23
    2cb8:	00091f80 	call	91f8 <__sprint_r>
    2cbc:	103e4c1e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    2cc0:	d8c02017 	ldw	r3,128(sp)
    2cc4:	d8803117 	ldw	r2,196(sp)
    2cc8:	d9002917 	ldw	r4,164(sp)
    2ccc:	1100010e 	bge	r2,r4,2cd4 <___vfprintf_internal_r+0xaf4>
    2cd0:	2005883a 	mov	r2,r4
    2cd4:	d9402f17 	ldw	r5,188(sp)
    2cd8:	288b883a 	add	r5,r5,r2
    2cdc:	d9402f15 	stw	r5,188(sp)
    2ce0:	1801c01e 	bne	r3,zero,33e4 <___vfprintf_internal_r+0x1204>
    2ce4:	a8800007 	ldb	r2,0(r21)
    2ce8:	d8001f15 	stw	zero,124(sp)
    2cec:	da000404 	addi	r8,sp,16
    2cf0:	103d751e 	bne	r2,zero,22c8 <__alt_data_end+0xf80022c8>
    2cf4:	a823883a 	mov	r17,r21
    2cf8:	003d8b06 	br	2328 <__alt_data_end+0xf8002328>
    2cfc:	8025883a 	mov	r18,r16
    2d00:	dc002903 	ldbu	r16,164(sp)
    2d04:	e011883a 	mov	r8,fp
    2d08:	84003fcc 	andi	r16,r16,255
    2d0c:	8005e51e 	bne	r16,zero,44a4 <___vfprintf_internal_r+0x22c4>
    2d10:	94800414 	ori	r18,r18,16
    2d14:	9080080c 	andi	r2,r18,32
    2d18:	10022b26 	beq	r2,zero,35c8 <___vfprintf_internal_r+0x13e8>
    2d1c:	d9002e17 	ldw	r4,184(sp)
    2d20:	d9402a17 	ldw	r5,168(sp)
    2d24:	d8002785 	stb	zero,158(sp)
    2d28:	20c00204 	addi	r3,r4,8
    2d2c:	24c00017 	ldw	r19,0(r4)
    2d30:	25800117 	ldw	r22,4(r4)
    2d34:	28042e16 	blt	r5,zero,3df0 <___vfprintf_internal_r+0x1c10>
    2d38:	013fdfc4 	movi	r4,-129
    2d3c:	9d84b03a 	or	r2,r19,r22
    2d40:	d8c02e15 	stw	r3,184(sp)
    2d44:	9124703a 	and	r18,r18,r4
    2d48:	0039883a 	mov	fp,zero
    2d4c:	103e801e 	bne	r2,zero,2750 <__alt_data_end+0xf8002750>
    2d50:	d9002a17 	ldw	r4,168(sp)
    2d54:	2002e01e 	bne	r4,zero,38d8 <___vfprintf_internal_r+0x16f8>
    2d58:	d8002a15 	stw	zero,168(sp)
    2d5c:	d8002b15 	stw	zero,172(sp)
    2d60:	dc001e04 	addi	r16,sp,120
    2d64:	003ef506 	br	293c <__alt_data_end+0xf800293c>
    2d68:	8025883a 	mov	r18,r16
    2d6c:	dc002903 	ldbu	r16,164(sp)
    2d70:	e011883a 	mov	r8,fp
    2d74:	84003fcc 	andi	r16,r16,255
    2d78:	8005ba1e 	bne	r16,zero,4464 <___vfprintf_internal_r+0x2284>
    2d7c:	01000074 	movhi	r4,1
    2d80:	21083104 	addi	r4,r4,8388
    2d84:	d9003915 	stw	r4,228(sp)
    2d88:	9080080c 	andi	r2,r18,32
    2d8c:	10006126 	beq	r2,zero,2f14 <___vfprintf_internal_r+0xd34>
    2d90:	d9402e17 	ldw	r5,184(sp)
    2d94:	2cc00017 	ldw	r19,0(r5)
    2d98:	2d800117 	ldw	r22,4(r5)
    2d9c:	29400204 	addi	r5,r5,8
    2da0:	d9402e15 	stw	r5,184(sp)
    2da4:	9080004c 	andi	r2,r18,1
    2da8:	1001ac26 	beq	r2,zero,345c <___vfprintf_internal_r+0x127c>
    2dac:	9d84b03a 	or	r2,r19,r22
    2db0:	10038526 	beq	r2,zero,3bc8 <___vfprintf_internal_r+0x19e8>
    2db4:	d8c02a17 	ldw	r3,168(sp)
    2db8:	00800c04 	movi	r2,48
    2dbc:	d8802705 	stb	r2,156(sp)
    2dc0:	dc402745 	stb	r17,157(sp)
    2dc4:	d8002785 	stb	zero,158(sp)
    2dc8:	90800094 	ori	r2,r18,2
    2dcc:	18047916 	blt	r3,zero,3fb4 <___vfprintf_internal_r+0x1dd4>
    2dd0:	00bfdfc4 	movi	r2,-129
    2dd4:	90a4703a 	and	r18,r18,r2
    2dd8:	94800094 	ori	r18,r18,2
    2ddc:	0039883a 	mov	fp,zero
    2de0:	d9003917 	ldw	r4,228(sp)
    2de4:	dc001e04 	addi	r16,sp,120
    2de8:	988003cc 	andi	r2,r19,15
    2dec:	b006973a 	slli	r3,r22,28
    2df0:	2085883a 	add	r2,r4,r2
    2df4:	9826d13a 	srli	r19,r19,4
    2df8:	10800003 	ldbu	r2,0(r2)
    2dfc:	b02cd13a 	srli	r22,r22,4
    2e00:	843fffc4 	addi	r16,r16,-1
    2e04:	1ce6b03a 	or	r19,r3,r19
    2e08:	80800005 	stb	r2,0(r16)
    2e0c:	9d84b03a 	or	r2,r19,r22
    2e10:	103ff51e 	bne	r2,zero,2de8 <__alt_data_end+0xf8002de8>
    2e14:	d8c02817 	ldw	r3,160(sp)
    2e18:	1c07c83a 	sub	r3,r3,r16
    2e1c:	d8c02b15 	stw	r3,172(sp)
    2e20:	003ec606 	br	293c <__alt_data_end+0xf800293c>
    2e24:	8025883a 	mov	r18,r16
    2e28:	dc002903 	ldbu	r16,164(sp)
    2e2c:	e011883a 	mov	r8,fp
    2e30:	84003fcc 	andi	r16,r16,255
    2e34:	803e9626 	beq	r16,zero,2890 <__alt_data_end+0xf8002890>
    2e38:	d8c02b03 	ldbu	r3,172(sp)
    2e3c:	d8c02785 	stb	r3,158(sp)
    2e40:	003e9306 	br	2890 <__alt_data_end+0xf8002890>
    2e44:	00c00044 	movi	r3,1
    2e48:	d8c02905 	stb	r3,164(sp)
    2e4c:	00c00ac4 	movi	r3,43
    2e50:	d8c02b05 	stb	r3,172(sp)
    2e54:	ac400007 	ldb	r17,0(r21)
    2e58:	003d4306 	br	2368 <__alt_data_end+0xf8002368>
    2e5c:	84000814 	ori	r16,r16,32
    2e60:	ac400007 	ldb	r17,0(r21)
    2e64:	003d4006 	br	2368 <__alt_data_end+0xf8002368>
    2e68:	d8802e17 	ldw	r2,184(sp)
    2e6c:	8025883a 	mov	r18,r16
    2e70:	d8002785 	stb	zero,158(sp)
    2e74:	14000017 	ldw	r16,0(r2)
    2e78:	e011883a 	mov	r8,fp
    2e7c:	14c00104 	addi	r19,r2,4
    2e80:	80042d26 	beq	r16,zero,3f38 <___vfprintf_internal_r+0x1d58>
    2e84:	d8c02a17 	ldw	r3,168(sp)
    2e88:	1803e416 	blt	r3,zero,3e1c <___vfprintf_internal_r+0x1c3c>
    2e8c:	180d883a 	mov	r6,r3
    2e90:	000b883a 	mov	r5,zero
    2e94:	8009883a 	mov	r4,r16
    2e98:	df003d15 	stw	fp,244(sp)
    2e9c:	000730c0 	call	730c <memchr>
    2ea0:	da003d17 	ldw	r8,244(sp)
    2ea4:	10046826 	beq	r2,zero,4048 <___vfprintf_internal_r+0x1e68>
    2ea8:	1405c83a 	sub	r2,r2,r16
    2eac:	d8802b15 	stw	r2,172(sp)
    2eb0:	1003e016 	blt	r2,zero,3e34 <___vfprintf_internal_r+0x1c54>
    2eb4:	df002783 	ldbu	fp,158(sp)
    2eb8:	d8802915 	stw	r2,164(sp)
    2ebc:	dcc02e15 	stw	r19,184(sp)
    2ec0:	d8002a15 	stw	zero,168(sp)
    2ec4:	d8003215 	stw	zero,200(sp)
    2ec8:	003ea206 	br	2954 <__alt_data_end+0xf8002954>
    2ecc:	8025883a 	mov	r18,r16
    2ed0:	dc002903 	ldbu	r16,164(sp)
    2ed4:	e011883a 	mov	r8,fp
    2ed8:	84003fcc 	andi	r16,r16,255
    2edc:	803f8d26 	beq	r16,zero,2d14 <__alt_data_end+0xf8002d14>
    2ee0:	d8c02b03 	ldbu	r3,172(sp)
    2ee4:	d8c02785 	stb	r3,158(sp)
    2ee8:	003f8a06 	br	2d14 <__alt_data_end+0xf8002d14>
    2eec:	8025883a 	mov	r18,r16
    2ef0:	dc002903 	ldbu	r16,164(sp)
    2ef4:	e011883a 	mov	r8,fp
    2ef8:	84003fcc 	andi	r16,r16,255
    2efc:	8005661e 	bne	r16,zero,4498 <___vfprintf_internal_r+0x22b8>
    2f00:	01000074 	movhi	r4,1
    2f04:	21083604 	addi	r4,r4,8408
    2f08:	d9003915 	stw	r4,228(sp)
    2f0c:	9080080c 	andi	r2,r18,32
    2f10:	103f9f1e 	bne	r2,zero,2d90 <__alt_data_end+0xf8002d90>
    2f14:	9080040c 	andi	r2,r18,16
    2f18:	1002eb26 	beq	r2,zero,3ac8 <___vfprintf_internal_r+0x18e8>
    2f1c:	d8802e17 	ldw	r2,184(sp)
    2f20:	002d883a 	mov	r22,zero
    2f24:	14c00017 	ldw	r19,0(r2)
    2f28:	10800104 	addi	r2,r2,4
    2f2c:	d8802e15 	stw	r2,184(sp)
    2f30:	003f9c06 	br	2da4 <__alt_data_end+0xf8002da4>
    2f34:	d8802b07 	ldb	r2,172(sp)
    2f38:	1002e11e 	bne	r2,zero,3ac0 <___vfprintf_internal_r+0x18e0>
    2f3c:	00c00044 	movi	r3,1
    2f40:	d8c02905 	stb	r3,164(sp)
    2f44:	00c00804 	movi	r3,32
    2f48:	d8c02b05 	stb	r3,172(sp)
    2f4c:	ac400007 	ldb	r17,0(r21)
    2f50:	003d0506 	br	2368 <__alt_data_end+0xf8002368>
    2f54:	84000054 	ori	r16,r16,1
    2f58:	ac400007 	ldb	r17,0(r21)
    2f5c:	003d0206 	br	2368 <__alt_data_end+0xf8002368>
    2f60:	8025883a 	mov	r18,r16
    2f64:	dc002903 	ldbu	r16,164(sp)
    2f68:	e011883a 	mov	r8,fp
    2f6c:	84003fcc 	andi	r16,r16,255
    2f70:	803de726 	beq	r16,zero,2710 <__alt_data_end+0xf8002710>
    2f74:	d8c02b03 	ldbu	r3,172(sp)
    2f78:	d8c02785 	stb	r3,158(sp)
    2f7c:	003de406 	br	2710 <__alt_data_end+0xf8002710>
    2f80:	84001014 	ori	r16,r16,64
    2f84:	ac400007 	ldb	r17,0(r21)
    2f88:	003cf706 	br	2368 <__alt_data_end+0xf8002368>
    2f8c:	ac400007 	ldb	r17,0(r21)
    2f90:	00801b04 	movi	r2,108
    2f94:	88838f26 	beq	r17,r2,3dd4 <___vfprintf_internal_r+0x1bf4>
    2f98:	84000414 	ori	r16,r16,16
    2f9c:	003cf206 	br	2368 <__alt_data_end+0xf8002368>
    2fa0:	8025883a 	mov	r18,r16
    2fa4:	dc002903 	ldbu	r16,164(sp)
    2fa8:	e011883a 	mov	r8,fp
    2fac:	84003fcc 	andi	r16,r16,255
    2fb0:	80053f1e 	bne	r16,zero,44b0 <___vfprintf_internal_r+0x22d0>
    2fb4:	9080080c 	andi	r2,r18,32
    2fb8:	1002d226 	beq	r2,zero,3b04 <___vfprintf_internal_r+0x1924>
    2fbc:	d9002e17 	ldw	r4,184(sp)
    2fc0:	d9402f17 	ldw	r5,188(sp)
    2fc4:	20800017 	ldw	r2,0(r4)
    2fc8:	2807d7fa 	srai	r3,r5,31
    2fcc:	21000104 	addi	r4,r4,4
    2fd0:	d9002e15 	stw	r4,184(sp)
    2fd4:	11400015 	stw	r5,0(r2)
    2fd8:	10c00115 	stw	r3,4(r2)
    2fdc:	003cb806 	br	22c0 <__alt_data_end+0xf80022c0>
    2fe0:	d8c02e17 	ldw	r3,184(sp)
    2fe4:	d9002e17 	ldw	r4,184(sp)
    2fe8:	8025883a 	mov	r18,r16
    2fec:	18800017 	ldw	r2,0(r3)
    2ff0:	21000104 	addi	r4,r4,4
    2ff4:	00c00044 	movi	r3,1
    2ff8:	e011883a 	mov	r8,fp
    2ffc:	d8c02915 	stw	r3,164(sp)
    3000:	d8002785 	stb	zero,158(sp)
    3004:	d8801405 	stb	r2,80(sp)
    3008:	d9002e15 	stw	r4,184(sp)
    300c:	d8c02b15 	stw	r3,172(sp)
    3010:	d8002a15 	stw	zero,168(sp)
    3014:	d8003215 	stw	zero,200(sp)
    3018:	dc001404 	addi	r16,sp,80
    301c:	0039883a 	mov	fp,zero
    3020:	003e5306 	br	2970 <__alt_data_end+0xf8002970>
    3024:	01000074 	movhi	r4,1
    3028:	21083604 	addi	r4,r4,8408
    302c:	0039883a 	mov	fp,zero
    3030:	d9003915 	stw	r4,228(sp)
    3034:	04401e04 	movi	r17,120
    3038:	003f6906 	br	2de0 <__alt_data_end+0xf8002de0>
    303c:	8025883a 	mov	r18,r16
    3040:	dc002903 	ldbu	r16,164(sp)
    3044:	e011883a 	mov	r8,fp
    3048:	84003fcc 	andi	r16,r16,255
    304c:	8005081e 	bne	r16,zero,4470 <___vfprintf_internal_r+0x2290>
    3050:	883d6126 	beq	r17,zero,25d8 <__alt_data_end+0xf80025d8>
    3054:	00c00044 	movi	r3,1
    3058:	d8c02915 	stw	r3,164(sp)
    305c:	dc401405 	stb	r17,80(sp)
    3060:	d8002785 	stb	zero,158(sp)
    3064:	003fe906 	br	300c <__alt_data_end+0xf800300c>
    3068:	01400074 	movhi	r5,1
    306c:	29483604 	addi	r5,r5,8408
    3070:	d9403915 	stw	r5,228(sp)
    3074:	d8c02e15 	stw	r3,184(sp)
    3078:	1025883a 	mov	r18,r2
    307c:	04401e04 	movi	r17,120
    3080:	9d84b03a 	or	r2,r19,r22
    3084:	1000fc1e 	bne	r2,zero,3478 <___vfprintf_internal_r+0x1298>
    3088:	0039883a 	mov	fp,zero
    308c:	00800084 	movi	r2,2
    3090:	10803fcc 	andi	r2,r2,255
    3094:	00c00044 	movi	r3,1
    3098:	10c20f26 	beq	r2,r3,38d8 <___vfprintf_internal_r+0x16f8>
    309c:	00c00084 	movi	r3,2
    30a0:	10fd3326 	beq	r2,r3,2570 <__alt_data_end+0xf8002570>
    30a4:	003e0b06 	br	28d4 <__alt_data_end+0xf80028d4>
    30a8:	d8c02017 	ldw	r3,128(sp)
    30ac:	003e7106 	br	2a74 <__alt_data_end+0xf8002a74>
    30b0:	00801944 	movi	r2,101
    30b4:	14407e0e 	bge	r2,r17,32b0 <___vfprintf_internal_r+0x10d0>
    30b8:	d9003617 	ldw	r4,216(sp)
    30bc:	d9403817 	ldw	r5,224(sp)
    30c0:	000d883a 	mov	r6,zero
    30c4:	000f883a 	mov	r7,zero
    30c8:	d8c03c15 	stw	r3,240(sp)
    30cc:	da003d15 	stw	r8,244(sp)
    30d0:	000d1300 	call	d130 <__eqdf2>
    30d4:	d8c03c17 	ldw	r3,240(sp)
    30d8:	da003d17 	ldw	r8,244(sp)
    30dc:	1000f71e 	bne	r2,zero,34bc <___vfprintf_internal_r+0x12dc>
    30e0:	d8801f17 	ldw	r2,124(sp)
    30e4:	01000074 	movhi	r4,1
    30e8:	21083d04 	addi	r4,r4,8436
    30ec:	18c00044 	addi	r3,r3,1
    30f0:	10800044 	addi	r2,r2,1
    30f4:	41000015 	stw	r4,0(r8)
    30f8:	01000044 	movi	r4,1
    30fc:	41000115 	stw	r4,4(r8)
    3100:	d8c02015 	stw	r3,128(sp)
    3104:	d8801f15 	stw	r2,124(sp)
    3108:	010001c4 	movi	r4,7
    310c:	2082b816 	blt	r4,r2,3bf0 <___vfprintf_internal_r+0x1a10>
    3110:	42000204 	addi	r8,r8,8
    3114:	d8802617 	ldw	r2,152(sp)
    3118:	d9403317 	ldw	r5,204(sp)
    311c:	11400216 	blt	r2,r5,3128 <___vfprintf_internal_r+0xf48>
    3120:	9080004c 	andi	r2,r18,1
    3124:	103eb326 	beq	r2,zero,2bf4 <__alt_data_end+0xf8002bf4>
    3128:	d8803717 	ldw	r2,220(sp)
    312c:	d9003417 	ldw	r4,208(sp)
    3130:	d9403717 	ldw	r5,220(sp)
    3134:	1887883a 	add	r3,r3,r2
    3138:	d8801f17 	ldw	r2,124(sp)
    313c:	41000015 	stw	r4,0(r8)
    3140:	41400115 	stw	r5,4(r8)
    3144:	10800044 	addi	r2,r2,1
    3148:	d8c02015 	stw	r3,128(sp)
    314c:	d8801f15 	stw	r2,124(sp)
    3150:	010001c4 	movi	r4,7
    3154:	20832916 	blt	r4,r2,3dfc <___vfprintf_internal_r+0x1c1c>
    3158:	42000204 	addi	r8,r8,8
    315c:	d8803317 	ldw	r2,204(sp)
    3160:	143fffc4 	addi	r16,r2,-1
    3164:	043ea30e 	bge	zero,r16,2bf4 <__alt_data_end+0xf8002bf4>
    3168:	04400404 	movi	r17,16
    316c:	d8801f17 	ldw	r2,124(sp)
    3170:	8c00880e 	bge	r17,r16,3394 <___vfprintf_internal_r+0x11b4>
    3174:	01400074 	movhi	r5,1
    3178:	29483d84 	addi	r5,r5,8438
    317c:	d9402c15 	stw	r5,176(sp)
    3180:	058001c4 	movi	r22,7
    3184:	dcc02d17 	ldw	r19,180(sp)
    3188:	00000306 	br	3198 <___vfprintf_internal_r+0xfb8>
    318c:	42000204 	addi	r8,r8,8
    3190:	843ffc04 	addi	r16,r16,-16
    3194:	8c00820e 	bge	r17,r16,33a0 <___vfprintf_internal_r+0x11c0>
    3198:	18c00404 	addi	r3,r3,16
    319c:	10800044 	addi	r2,r2,1
    31a0:	45000015 	stw	r20,0(r8)
    31a4:	44400115 	stw	r17,4(r8)
    31a8:	d8c02015 	stw	r3,128(sp)
    31ac:	d8801f15 	stw	r2,124(sp)
    31b0:	b0bff60e 	bge	r22,r2,318c <__alt_data_end+0xf800318c>
    31b4:	d9801e04 	addi	r6,sp,120
    31b8:	b80b883a 	mov	r5,r23
    31bc:	9809883a 	mov	r4,r19
    31c0:	00091f80 	call	91f8 <__sprint_r>
    31c4:	103d0a1e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    31c8:	d8c02017 	ldw	r3,128(sp)
    31cc:	d8801f17 	ldw	r2,124(sp)
    31d0:	da000404 	addi	r8,sp,16
    31d4:	003fee06 	br	3190 <__alt_data_end+0xf8003190>
    31d8:	d9403117 	ldw	r5,196(sp)
    31dc:	d8802917 	ldw	r2,164(sp)
    31e0:	28adc83a 	sub	r22,r5,r2
    31e4:	05be410e 	bge	zero,r22,2aec <__alt_data_end+0xf8002aec>
    31e8:	07000404 	movi	fp,16
    31ec:	d8801f17 	ldw	r2,124(sp)
    31f0:	e5838f0e 	bge	fp,r22,4030 <___vfprintf_internal_r+0x1e50>
    31f4:	01400074 	movhi	r5,1
    31f8:	29483d84 	addi	r5,r5,8438
    31fc:	dc403015 	stw	r17,192(sp)
    3200:	d9402c15 	stw	r5,176(sp)
    3204:	b023883a 	mov	r17,r22
    3208:	04c001c4 	movi	r19,7
    320c:	a82d883a 	mov	r22,r21
    3210:	902b883a 	mov	r21,r18
    3214:	8025883a 	mov	r18,r16
    3218:	dc002d17 	ldw	r16,180(sp)
    321c:	00000306 	br	322c <___vfprintf_internal_r+0x104c>
    3220:	8c7ffc04 	addi	r17,r17,-16
    3224:	42000204 	addi	r8,r8,8
    3228:	e440110e 	bge	fp,r17,3270 <___vfprintf_internal_r+0x1090>
    322c:	18c00404 	addi	r3,r3,16
    3230:	10800044 	addi	r2,r2,1
    3234:	45000015 	stw	r20,0(r8)
    3238:	47000115 	stw	fp,4(r8)
    323c:	d8c02015 	stw	r3,128(sp)
    3240:	d8801f15 	stw	r2,124(sp)
    3244:	98bff60e 	bge	r19,r2,3220 <__alt_data_end+0xf8003220>
    3248:	d9801e04 	addi	r6,sp,120
    324c:	b80b883a 	mov	r5,r23
    3250:	8009883a 	mov	r4,r16
    3254:	00091f80 	call	91f8 <__sprint_r>
    3258:	103ce51e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    325c:	8c7ffc04 	addi	r17,r17,-16
    3260:	d8c02017 	ldw	r3,128(sp)
    3264:	d8801f17 	ldw	r2,124(sp)
    3268:	da000404 	addi	r8,sp,16
    326c:	e47fef16 	blt	fp,r17,322c <__alt_data_end+0xf800322c>
    3270:	9021883a 	mov	r16,r18
    3274:	a825883a 	mov	r18,r21
    3278:	b02b883a 	mov	r21,r22
    327c:	882d883a 	mov	r22,r17
    3280:	dc403017 	ldw	r17,192(sp)
    3284:	d9002c17 	ldw	r4,176(sp)
    3288:	1d87883a 	add	r3,r3,r22
    328c:	10800044 	addi	r2,r2,1
    3290:	41000015 	stw	r4,0(r8)
    3294:	45800115 	stw	r22,4(r8)
    3298:	d8c02015 	stw	r3,128(sp)
    329c:	d8801f15 	stw	r2,124(sp)
    32a0:	010001c4 	movi	r4,7
    32a4:	20818e16 	blt	r4,r2,38e0 <___vfprintf_internal_r+0x1700>
    32a8:	42000204 	addi	r8,r8,8
    32ac:	003e0f06 	br	2aec <__alt_data_end+0xf8002aec>
    32b0:	d9403317 	ldw	r5,204(sp)
    32b4:	00800044 	movi	r2,1
    32b8:	18c00044 	addi	r3,r3,1
    32bc:	1141530e 	bge	r2,r5,380c <___vfprintf_internal_r+0x162c>
    32c0:	dc401f17 	ldw	r17,124(sp)
    32c4:	00800044 	movi	r2,1
    32c8:	40800115 	stw	r2,4(r8)
    32cc:	8c400044 	addi	r17,r17,1
    32d0:	44000015 	stw	r16,0(r8)
    32d4:	d8c02015 	stw	r3,128(sp)
    32d8:	dc401f15 	stw	r17,124(sp)
    32dc:	008001c4 	movi	r2,7
    32e0:	14416b16 	blt	r2,r17,3890 <___vfprintf_internal_r+0x16b0>
    32e4:	42000204 	addi	r8,r8,8
    32e8:	d8803717 	ldw	r2,220(sp)
    32ec:	d9003417 	ldw	r4,208(sp)
    32f0:	8c400044 	addi	r17,r17,1
    32f4:	10c7883a 	add	r3,r2,r3
    32f8:	40800115 	stw	r2,4(r8)
    32fc:	41000015 	stw	r4,0(r8)
    3300:	d8c02015 	stw	r3,128(sp)
    3304:	dc401f15 	stw	r17,124(sp)
    3308:	008001c4 	movi	r2,7
    330c:	14416916 	blt	r2,r17,38b4 <___vfprintf_internal_r+0x16d4>
    3310:	45800204 	addi	r22,r8,8
    3314:	d9003617 	ldw	r4,216(sp)
    3318:	d9403817 	ldw	r5,224(sp)
    331c:	000d883a 	mov	r6,zero
    3320:	000f883a 	mov	r7,zero
    3324:	d8c03c15 	stw	r3,240(sp)
    3328:	000d1300 	call	d130 <__eqdf2>
    332c:	d8c03c17 	ldw	r3,240(sp)
    3330:	1000bc26 	beq	r2,zero,3624 <___vfprintf_internal_r+0x1444>
    3334:	d9403317 	ldw	r5,204(sp)
    3338:	84000044 	addi	r16,r16,1
    333c:	8c400044 	addi	r17,r17,1
    3340:	28bfffc4 	addi	r2,r5,-1
    3344:	1887883a 	add	r3,r3,r2
    3348:	b0800115 	stw	r2,4(r22)
    334c:	b4000015 	stw	r16,0(r22)
    3350:	d8c02015 	stw	r3,128(sp)
    3354:	dc401f15 	stw	r17,124(sp)
    3358:	008001c4 	movi	r2,7
    335c:	14414316 	blt	r2,r17,386c <___vfprintf_internal_r+0x168c>
    3360:	b5800204 	addi	r22,r22,8
    3364:	d9003a17 	ldw	r4,232(sp)
    3368:	df0022c4 	addi	fp,sp,139
    336c:	8c400044 	addi	r17,r17,1
    3370:	20c7883a 	add	r3,r4,r3
    3374:	b7000015 	stw	fp,0(r22)
    3378:	b1000115 	stw	r4,4(r22)
    337c:	d8c02015 	stw	r3,128(sp)
    3380:	dc401f15 	stw	r17,124(sp)
    3384:	008001c4 	movi	r2,7
    3388:	14400e16 	blt	r2,r17,33c4 <___vfprintf_internal_r+0x11e4>
    338c:	b2000204 	addi	r8,r22,8
    3390:	003e1806 	br	2bf4 <__alt_data_end+0xf8002bf4>
    3394:	01000074 	movhi	r4,1
    3398:	21083d84 	addi	r4,r4,8438
    339c:	d9002c15 	stw	r4,176(sp)
    33a0:	d9002c17 	ldw	r4,176(sp)
    33a4:	1c07883a 	add	r3,r3,r16
    33a8:	44000115 	stw	r16,4(r8)
    33ac:	41000015 	stw	r4,0(r8)
    33b0:	10800044 	addi	r2,r2,1
    33b4:	d8c02015 	stw	r3,128(sp)
    33b8:	d8801f15 	stw	r2,124(sp)
    33bc:	010001c4 	movi	r4,7
    33c0:	20be0b0e 	bge	r4,r2,2bf0 <__alt_data_end+0xf8002bf0>
    33c4:	d9002d17 	ldw	r4,180(sp)
    33c8:	d9801e04 	addi	r6,sp,120
    33cc:	b80b883a 	mov	r5,r23
    33d0:	00091f80 	call	91f8 <__sprint_r>
    33d4:	103c861e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    33d8:	d8c02017 	ldw	r3,128(sp)
    33dc:	da000404 	addi	r8,sp,16
    33e0:	003e0406 	br	2bf4 <__alt_data_end+0xf8002bf4>
    33e4:	d9002d17 	ldw	r4,180(sp)
    33e8:	d9801e04 	addi	r6,sp,120
    33ec:	b80b883a 	mov	r5,r23
    33f0:	00091f80 	call	91f8 <__sprint_r>
    33f4:	103e3b26 	beq	r2,zero,2ce4 <__alt_data_end+0xf8002ce4>
    33f8:	003c7d06 	br	25f0 <__alt_data_end+0xf80025f0>
    33fc:	d9002d17 	ldw	r4,180(sp)
    3400:	d9801e04 	addi	r6,sp,120
    3404:	b80b883a 	mov	r5,r23
    3408:	00091f80 	call	91f8 <__sprint_r>
    340c:	103c781e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    3410:	d8c02017 	ldw	r3,128(sp)
    3414:	da000404 	addi	r8,sp,16
    3418:	003de906 	br	2bc0 <__alt_data_end+0xf8002bc0>
    341c:	d9002d17 	ldw	r4,180(sp)
    3420:	d9801e04 	addi	r6,sp,120
    3424:	b80b883a 	mov	r5,r23
    3428:	00091f80 	call	91f8 <__sprint_r>
    342c:	103c701e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    3430:	d8c02017 	ldw	r3,128(sp)
    3434:	da000404 	addi	r8,sp,16
    3438:	003d9b06 	br	2aa8 <__alt_data_end+0xf8002aa8>
    343c:	d9002d17 	ldw	r4,180(sp)
    3440:	d9801e04 	addi	r6,sp,120
    3444:	b80b883a 	mov	r5,r23
    3448:	00091f80 	call	91f8 <__sprint_r>
    344c:	103c681e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    3450:	d8c02017 	ldw	r3,128(sp)
    3454:	da000404 	addi	r8,sp,16
    3458:	003da106 	br	2ae0 <__alt_data_end+0xf8002ae0>
    345c:	d9402a17 	ldw	r5,168(sp)
    3460:	d8002785 	stb	zero,158(sp)
    3464:	283f0616 	blt	r5,zero,3080 <__alt_data_end+0xf8003080>
    3468:	00ffdfc4 	movi	r3,-129
    346c:	9d84b03a 	or	r2,r19,r22
    3470:	90e4703a 	and	r18,r18,r3
    3474:	103c3b26 	beq	r2,zero,2564 <__alt_data_end+0xf8002564>
    3478:	0039883a 	mov	fp,zero
    347c:	003e5806 	br	2de0 <__alt_data_end+0xf8002de0>
    3480:	9080040c 	andi	r2,r18,16
    3484:	1001b326 	beq	r2,zero,3b54 <___vfprintf_internal_r+0x1974>
    3488:	d8c02e17 	ldw	r3,184(sp)
    348c:	d9002a17 	ldw	r4,168(sp)
    3490:	d8002785 	stb	zero,158(sp)
    3494:	18800104 	addi	r2,r3,4
    3498:	1cc00017 	ldw	r19,0(r3)
    349c:	002d883a 	mov	r22,zero
    34a0:	2001b516 	blt	r4,zero,3b78 <___vfprintf_internal_r+0x1998>
    34a4:	00ffdfc4 	movi	r3,-129
    34a8:	d8802e15 	stw	r2,184(sp)
    34ac:	90e4703a 	and	r18,r18,r3
    34b0:	983d0526 	beq	r19,zero,28c8 <__alt_data_end+0xf80028c8>
    34b4:	0039883a 	mov	fp,zero
    34b8:	003d0806 	br	28dc <__alt_data_end+0xf80028dc>
    34bc:	dc402617 	ldw	r17,152(sp)
    34c0:	0441d30e 	bge	zero,r17,3c10 <___vfprintf_internal_r+0x1a30>
    34c4:	dc403217 	ldw	r17,200(sp)
    34c8:	d8803317 	ldw	r2,204(sp)
    34cc:	1440010e 	bge	r2,r17,34d4 <___vfprintf_internal_r+0x12f4>
    34d0:	1023883a 	mov	r17,r2
    34d4:	04400a0e 	bge	zero,r17,3500 <___vfprintf_internal_r+0x1320>
    34d8:	d8801f17 	ldw	r2,124(sp)
    34dc:	1c47883a 	add	r3,r3,r17
    34e0:	44000015 	stw	r16,0(r8)
    34e4:	10800044 	addi	r2,r2,1
    34e8:	44400115 	stw	r17,4(r8)
    34ec:	d8c02015 	stw	r3,128(sp)
    34f0:	d8801f15 	stw	r2,124(sp)
    34f4:	010001c4 	movi	r4,7
    34f8:	20826516 	blt	r4,r2,3e90 <___vfprintf_internal_r+0x1cb0>
    34fc:	42000204 	addi	r8,r8,8
    3500:	88026116 	blt	r17,zero,3e88 <___vfprintf_internal_r+0x1ca8>
    3504:	d9003217 	ldw	r4,200(sp)
    3508:	2463c83a 	sub	r17,r4,r17
    350c:	04407b0e 	bge	zero,r17,36fc <___vfprintf_internal_r+0x151c>
    3510:	05800404 	movi	r22,16
    3514:	d8801f17 	ldw	r2,124(sp)
    3518:	b4419d0e 	bge	r22,r17,3b90 <___vfprintf_internal_r+0x19b0>
    351c:	01000074 	movhi	r4,1
    3520:	21083d84 	addi	r4,r4,8438
    3524:	d9002c15 	stw	r4,176(sp)
    3528:	070001c4 	movi	fp,7
    352c:	dcc02d17 	ldw	r19,180(sp)
    3530:	00000306 	br	3540 <___vfprintf_internal_r+0x1360>
    3534:	42000204 	addi	r8,r8,8
    3538:	8c7ffc04 	addi	r17,r17,-16
    353c:	b441970e 	bge	r22,r17,3b9c <___vfprintf_internal_r+0x19bc>
    3540:	18c00404 	addi	r3,r3,16
    3544:	10800044 	addi	r2,r2,1
    3548:	45000015 	stw	r20,0(r8)
    354c:	45800115 	stw	r22,4(r8)
    3550:	d8c02015 	stw	r3,128(sp)
    3554:	d8801f15 	stw	r2,124(sp)
    3558:	e0bff60e 	bge	fp,r2,3534 <__alt_data_end+0xf8003534>
    355c:	d9801e04 	addi	r6,sp,120
    3560:	b80b883a 	mov	r5,r23
    3564:	9809883a 	mov	r4,r19
    3568:	00091f80 	call	91f8 <__sprint_r>
    356c:	103c201e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    3570:	d8c02017 	ldw	r3,128(sp)
    3574:	d8801f17 	ldw	r2,124(sp)
    3578:	da000404 	addi	r8,sp,16
    357c:	003fee06 	br	3538 <__alt_data_end+0xf8003538>
    3580:	d9002d17 	ldw	r4,180(sp)
    3584:	d9801e04 	addi	r6,sp,120
    3588:	b80b883a 	mov	r5,r23
    358c:	00091f80 	call	91f8 <__sprint_r>
    3590:	103c171e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    3594:	d8c02017 	ldw	r3,128(sp)
    3598:	df002787 	ldb	fp,158(sp)
    359c:	da000404 	addi	r8,sp,16
    35a0:	003d3406 	br	2a74 <__alt_data_end+0xf8002a74>
    35a4:	9080040c 	andi	r2,r18,16
    35a8:	10016126 	beq	r2,zero,3b30 <___vfprintf_internal_r+0x1950>
    35ac:	d9402e17 	ldw	r5,184(sp)
    35b0:	2cc00017 	ldw	r19,0(r5)
    35b4:	29400104 	addi	r5,r5,4
    35b8:	d9402e15 	stw	r5,184(sp)
    35bc:	982dd7fa 	srai	r22,r19,31
    35c0:	b005883a 	mov	r2,r22
    35c4:	003c5a06 	br	2730 <__alt_data_end+0xf8002730>
    35c8:	9080040c 	andi	r2,r18,16
    35cc:	10003526 	beq	r2,zero,36a4 <___vfprintf_internal_r+0x14c4>
    35d0:	d8c02e17 	ldw	r3,184(sp)
    35d4:	d9002a17 	ldw	r4,168(sp)
    35d8:	d8002785 	stb	zero,158(sp)
    35dc:	18800104 	addi	r2,r3,4
    35e0:	1cc00017 	ldw	r19,0(r3)
    35e4:	002d883a 	mov	r22,zero
    35e8:	20003716 	blt	r4,zero,36c8 <___vfprintf_internal_r+0x14e8>
    35ec:	00ffdfc4 	movi	r3,-129
    35f0:	d8802e15 	stw	r2,184(sp)
    35f4:	90e4703a 	and	r18,r18,r3
    35f8:	0039883a 	mov	fp,zero
    35fc:	983dd426 	beq	r19,zero,2d50 <__alt_data_end+0xf8002d50>
    3600:	00800244 	movi	r2,9
    3604:	14fc5336 	bltu	r2,r19,2754 <__alt_data_end+0xf8002754>
    3608:	d8c02817 	ldw	r3,160(sp)
    360c:	dc001dc4 	addi	r16,sp,119
    3610:	9cc00c04 	addi	r19,r19,48
    3614:	1c07c83a 	sub	r3,r3,r16
    3618:	dcc01dc5 	stb	r19,119(sp)
    361c:	d8c02b15 	stw	r3,172(sp)
    3620:	003cc606 	br	293c <__alt_data_end+0xf800293c>
    3624:	d8803317 	ldw	r2,204(sp)
    3628:	143fffc4 	addi	r16,r2,-1
    362c:	043f4d0e 	bge	zero,r16,3364 <__alt_data_end+0xf8003364>
    3630:	07000404 	movi	fp,16
    3634:	e400810e 	bge	fp,r16,383c <___vfprintf_internal_r+0x165c>
    3638:	01400074 	movhi	r5,1
    363c:	29483d84 	addi	r5,r5,8438
    3640:	d9402c15 	stw	r5,176(sp)
    3644:	01c001c4 	movi	r7,7
    3648:	dcc02d17 	ldw	r19,180(sp)
    364c:	00000306 	br	365c <___vfprintf_internal_r+0x147c>
    3650:	b5800204 	addi	r22,r22,8
    3654:	843ffc04 	addi	r16,r16,-16
    3658:	e4007b0e 	bge	fp,r16,3848 <___vfprintf_internal_r+0x1668>
    365c:	18c00404 	addi	r3,r3,16
    3660:	8c400044 	addi	r17,r17,1
    3664:	b5000015 	stw	r20,0(r22)
    3668:	b7000115 	stw	fp,4(r22)
    366c:	d8c02015 	stw	r3,128(sp)
    3670:	dc401f15 	stw	r17,124(sp)
    3674:	3c7ff60e 	bge	r7,r17,3650 <__alt_data_end+0xf8003650>
    3678:	d9801e04 	addi	r6,sp,120
    367c:	b80b883a 	mov	r5,r23
    3680:	9809883a 	mov	r4,r19
    3684:	d9c03c15 	stw	r7,240(sp)
    3688:	00091f80 	call	91f8 <__sprint_r>
    368c:	d9c03c17 	ldw	r7,240(sp)
    3690:	103bd71e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    3694:	d8c02017 	ldw	r3,128(sp)
    3698:	dc401f17 	ldw	r17,124(sp)
    369c:	dd800404 	addi	r22,sp,16
    36a0:	003fec06 	br	3654 <__alt_data_end+0xf8003654>
    36a4:	9080100c 	andi	r2,r18,64
    36a8:	d8002785 	stb	zero,158(sp)
    36ac:	10010e26 	beq	r2,zero,3ae8 <___vfprintf_internal_r+0x1908>
    36b0:	d9402e17 	ldw	r5,184(sp)
    36b4:	d8c02a17 	ldw	r3,168(sp)
    36b8:	002d883a 	mov	r22,zero
    36bc:	28800104 	addi	r2,r5,4
    36c0:	2cc0000b 	ldhu	r19,0(r5)
    36c4:	183fc90e 	bge	r3,zero,35ec <__alt_data_end+0xf80035ec>
    36c8:	d8802e15 	stw	r2,184(sp)
    36cc:	0039883a 	mov	fp,zero
    36d0:	9d84b03a 	or	r2,r19,r22
    36d4:	103c1e1e 	bne	r2,zero,2750 <__alt_data_end+0xf8002750>
    36d8:	00800044 	movi	r2,1
    36dc:	003e6c06 	br	3090 <__alt_data_end+0xf8003090>
    36e0:	d9002d17 	ldw	r4,180(sp)
    36e4:	d9801e04 	addi	r6,sp,120
    36e8:	b80b883a 	mov	r5,r23
    36ec:	00091f80 	call	91f8 <__sprint_r>
    36f0:	103bbf1e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    36f4:	d8c02017 	ldw	r3,128(sp)
    36f8:	da000404 	addi	r8,sp,16
    36fc:	d9003217 	ldw	r4,200(sp)
    3700:	d8802617 	ldw	r2,152(sp)
    3704:	d9403317 	ldw	r5,204(sp)
    3708:	8123883a 	add	r17,r16,r4
    370c:	11400216 	blt	r2,r5,3718 <___vfprintf_internal_r+0x1538>
    3710:	9100004c 	andi	r4,r18,1
    3714:	20000d26 	beq	r4,zero,374c <___vfprintf_internal_r+0x156c>
    3718:	d9003717 	ldw	r4,220(sp)
    371c:	d9403417 	ldw	r5,208(sp)
    3720:	1907883a 	add	r3,r3,r4
    3724:	d9001f17 	ldw	r4,124(sp)
    3728:	41400015 	stw	r5,0(r8)
    372c:	d9403717 	ldw	r5,220(sp)
    3730:	21000044 	addi	r4,r4,1
    3734:	d8c02015 	stw	r3,128(sp)
    3738:	41400115 	stw	r5,4(r8)
    373c:	d9001f15 	stw	r4,124(sp)
    3740:	014001c4 	movi	r5,7
    3744:	2901e816 	blt	r5,r4,3ee8 <___vfprintf_internal_r+0x1d08>
    3748:	42000204 	addi	r8,r8,8
    374c:	d9003317 	ldw	r4,204(sp)
    3750:	8121883a 	add	r16,r16,r4
    3754:	2085c83a 	sub	r2,r4,r2
    3758:	8461c83a 	sub	r16,r16,r17
    375c:	1400010e 	bge	r2,r16,3764 <___vfprintf_internal_r+0x1584>
    3760:	1021883a 	mov	r16,r2
    3764:	04000a0e 	bge	zero,r16,3790 <___vfprintf_internal_r+0x15b0>
    3768:	d9001f17 	ldw	r4,124(sp)
    376c:	1c07883a 	add	r3,r3,r16
    3770:	44400015 	stw	r17,0(r8)
    3774:	21000044 	addi	r4,r4,1
    3778:	44000115 	stw	r16,4(r8)
    377c:	d8c02015 	stw	r3,128(sp)
    3780:	d9001f15 	stw	r4,124(sp)
    3784:	014001c4 	movi	r5,7
    3788:	2901fb16 	blt	r5,r4,3f78 <___vfprintf_internal_r+0x1d98>
    378c:	42000204 	addi	r8,r8,8
    3790:	8001f716 	blt	r16,zero,3f70 <___vfprintf_internal_r+0x1d90>
    3794:	1421c83a 	sub	r16,r2,r16
    3798:	043d160e 	bge	zero,r16,2bf4 <__alt_data_end+0xf8002bf4>
    379c:	04400404 	movi	r17,16
    37a0:	d8801f17 	ldw	r2,124(sp)
    37a4:	8c3efb0e 	bge	r17,r16,3394 <__alt_data_end+0xf8003394>
    37a8:	01400074 	movhi	r5,1
    37ac:	29483d84 	addi	r5,r5,8438
    37b0:	d9402c15 	stw	r5,176(sp)
    37b4:	058001c4 	movi	r22,7
    37b8:	dcc02d17 	ldw	r19,180(sp)
    37bc:	00000306 	br	37cc <___vfprintf_internal_r+0x15ec>
    37c0:	42000204 	addi	r8,r8,8
    37c4:	843ffc04 	addi	r16,r16,-16
    37c8:	8c3ef50e 	bge	r17,r16,33a0 <__alt_data_end+0xf80033a0>
    37cc:	18c00404 	addi	r3,r3,16
    37d0:	10800044 	addi	r2,r2,1
    37d4:	45000015 	stw	r20,0(r8)
    37d8:	44400115 	stw	r17,4(r8)
    37dc:	d8c02015 	stw	r3,128(sp)
    37e0:	d8801f15 	stw	r2,124(sp)
    37e4:	b0bff60e 	bge	r22,r2,37c0 <__alt_data_end+0xf80037c0>
    37e8:	d9801e04 	addi	r6,sp,120
    37ec:	b80b883a 	mov	r5,r23
    37f0:	9809883a 	mov	r4,r19
    37f4:	00091f80 	call	91f8 <__sprint_r>
    37f8:	103b7d1e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    37fc:	d8c02017 	ldw	r3,128(sp)
    3800:	d8801f17 	ldw	r2,124(sp)
    3804:	da000404 	addi	r8,sp,16
    3808:	003fee06 	br	37c4 <__alt_data_end+0xf80037c4>
    380c:	9088703a 	and	r4,r18,r2
    3810:	203eab1e 	bne	r4,zero,32c0 <__alt_data_end+0xf80032c0>
    3814:	dc401f17 	ldw	r17,124(sp)
    3818:	40800115 	stw	r2,4(r8)
    381c:	44000015 	stw	r16,0(r8)
    3820:	8c400044 	addi	r17,r17,1
    3824:	d8c02015 	stw	r3,128(sp)
    3828:	dc401f15 	stw	r17,124(sp)
    382c:	008001c4 	movi	r2,7
    3830:	14400e16 	blt	r2,r17,386c <___vfprintf_internal_r+0x168c>
    3834:	45800204 	addi	r22,r8,8
    3838:	003eca06 	br	3364 <__alt_data_end+0xf8003364>
    383c:	01000074 	movhi	r4,1
    3840:	21083d84 	addi	r4,r4,8438
    3844:	d9002c15 	stw	r4,176(sp)
    3848:	d8802c17 	ldw	r2,176(sp)
    384c:	1c07883a 	add	r3,r3,r16
    3850:	8c400044 	addi	r17,r17,1
    3854:	b0800015 	stw	r2,0(r22)
    3858:	b4000115 	stw	r16,4(r22)
    385c:	d8c02015 	stw	r3,128(sp)
    3860:	dc401f15 	stw	r17,124(sp)
    3864:	008001c4 	movi	r2,7
    3868:	147ebd0e 	bge	r2,r17,3360 <__alt_data_end+0xf8003360>
    386c:	d9002d17 	ldw	r4,180(sp)
    3870:	d9801e04 	addi	r6,sp,120
    3874:	b80b883a 	mov	r5,r23
    3878:	00091f80 	call	91f8 <__sprint_r>
    387c:	103b5c1e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    3880:	d8c02017 	ldw	r3,128(sp)
    3884:	dc401f17 	ldw	r17,124(sp)
    3888:	dd800404 	addi	r22,sp,16
    388c:	003eb506 	br	3364 <__alt_data_end+0xf8003364>
    3890:	d9002d17 	ldw	r4,180(sp)
    3894:	d9801e04 	addi	r6,sp,120
    3898:	b80b883a 	mov	r5,r23
    389c:	00091f80 	call	91f8 <__sprint_r>
    38a0:	103b531e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    38a4:	d8c02017 	ldw	r3,128(sp)
    38a8:	dc401f17 	ldw	r17,124(sp)
    38ac:	da000404 	addi	r8,sp,16
    38b0:	003e8d06 	br	32e8 <__alt_data_end+0xf80032e8>
    38b4:	d9002d17 	ldw	r4,180(sp)
    38b8:	d9801e04 	addi	r6,sp,120
    38bc:	b80b883a 	mov	r5,r23
    38c0:	00091f80 	call	91f8 <__sprint_r>
    38c4:	103b4a1e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    38c8:	d8c02017 	ldw	r3,128(sp)
    38cc:	dc401f17 	ldw	r17,124(sp)
    38d0:	dd800404 	addi	r22,sp,16
    38d4:	003e8f06 	br	3314 <__alt_data_end+0xf8003314>
    38d8:	0027883a 	mov	r19,zero
    38dc:	003f4a06 	br	3608 <__alt_data_end+0xf8003608>
    38e0:	d9002d17 	ldw	r4,180(sp)
    38e4:	d9801e04 	addi	r6,sp,120
    38e8:	b80b883a 	mov	r5,r23
    38ec:	00091f80 	call	91f8 <__sprint_r>
    38f0:	103b3f1e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    38f4:	d8c02017 	ldw	r3,128(sp)
    38f8:	da000404 	addi	r8,sp,16
    38fc:	003c7b06 	br	2aec <__alt_data_end+0xf8002aec>
    3900:	d9402a17 	ldw	r5,168(sp)
    3904:	04e7c83a 	sub	r19,zero,r19
    3908:	07000b44 	movi	fp,45
    390c:	9804c03a 	cmpne	r2,r19,zero
    3910:	05adc83a 	sub	r22,zero,r22
    3914:	df002785 	stb	fp,158(sp)
    3918:	b0adc83a 	sub	r22,r22,r2
    391c:	28017b16 	blt	r5,zero,3f0c <___vfprintf_internal_r+0x1d2c>
    3920:	00bfdfc4 	movi	r2,-129
    3924:	90a4703a 	and	r18,r18,r2
    3928:	003b8906 	br	2750 <__alt_data_end+0xf8002750>
    392c:	d9003617 	ldw	r4,216(sp)
    3930:	d9403817 	ldw	r5,224(sp)
    3934:	da003d15 	stw	r8,244(sp)
    3938:	0008dd80 	call	8dd8 <__fpclassifyd>
    393c:	da003d17 	ldw	r8,244(sp)
    3940:	1000f026 	beq	r2,zero,3d04 <___vfprintf_internal_r+0x1b24>
    3944:	d9002a17 	ldw	r4,168(sp)
    3948:	05bff7c4 	movi	r22,-33
    394c:	00bfffc4 	movi	r2,-1
    3950:	8dac703a 	and	r22,r17,r22
    3954:	20820026 	beq	r4,r2,4158 <___vfprintf_internal_r+0x1f78>
    3958:	008011c4 	movi	r2,71
    395c:	b081f726 	beq	r22,r2,413c <___vfprintf_internal_r+0x1f5c>
    3960:	d9003817 	ldw	r4,224(sp)
    3964:	90c04014 	ori	r3,r18,256
    3968:	d8c02c15 	stw	r3,176(sp)
    396c:	20021516 	blt	r4,zero,41c4 <___vfprintf_internal_r+0x1fe4>
    3970:	dcc03817 	ldw	r19,224(sp)
    3974:	d8002905 	stb	zero,164(sp)
    3978:	00801984 	movi	r2,102
    397c:	8881f926 	beq	r17,r2,4164 <___vfprintf_internal_r+0x1f84>
    3980:	00801184 	movi	r2,70
    3984:	88821c26 	beq	r17,r2,41f8 <___vfprintf_internal_r+0x2018>
    3988:	00801144 	movi	r2,69
    398c:	b081ef26 	beq	r22,r2,414c <___vfprintf_internal_r+0x1f6c>
    3990:	d8c02a17 	ldw	r3,168(sp)
    3994:	d8802104 	addi	r2,sp,132
    3998:	d8800315 	stw	r2,12(sp)
    399c:	d9403617 	ldw	r5,216(sp)
    39a0:	d8802504 	addi	r2,sp,148
    39a4:	d9002d17 	ldw	r4,180(sp)
    39a8:	d8800215 	stw	r2,8(sp)
    39ac:	d8802604 	addi	r2,sp,152
    39b0:	d8c00015 	stw	r3,0(sp)
    39b4:	d8800115 	stw	r2,4(sp)
    39b8:	01c00084 	movi	r7,2
    39bc:	980d883a 	mov	r6,r19
    39c0:	d8c03c15 	stw	r3,240(sp)
    39c4:	da003d15 	stw	r8,244(sp)
    39c8:	00049100 	call	4910 <_dtoa_r>
    39cc:	1021883a 	mov	r16,r2
    39d0:	008019c4 	movi	r2,103
    39d4:	d8c03c17 	ldw	r3,240(sp)
    39d8:	da003d17 	ldw	r8,244(sp)
    39dc:	88817126 	beq	r17,r2,3fa4 <___vfprintf_internal_r+0x1dc4>
    39e0:	008011c4 	movi	r2,71
    39e4:	88829126 	beq	r17,r2,442c <___vfprintf_internal_r+0x224c>
    39e8:	80f9883a 	add	fp,r16,r3
    39ec:	d9003617 	ldw	r4,216(sp)
    39f0:	000d883a 	mov	r6,zero
    39f4:	000f883a 	mov	r7,zero
    39f8:	980b883a 	mov	r5,r19
    39fc:	da003d15 	stw	r8,244(sp)
    3a00:	000d1300 	call	d130 <__eqdf2>
    3a04:	da003d17 	ldw	r8,244(sp)
    3a08:	10018d26 	beq	r2,zero,4040 <___vfprintf_internal_r+0x1e60>
    3a0c:	d8802117 	ldw	r2,132(sp)
    3a10:	1700062e 	bgeu	r2,fp,3a2c <___vfprintf_internal_r+0x184c>
    3a14:	01000c04 	movi	r4,48
    3a18:	10c00044 	addi	r3,r2,1
    3a1c:	d8c02115 	stw	r3,132(sp)
    3a20:	11000005 	stb	r4,0(r2)
    3a24:	d8802117 	ldw	r2,132(sp)
    3a28:	173ffb36 	bltu	r2,fp,3a18 <__alt_data_end+0xf8003a18>
    3a2c:	1405c83a 	sub	r2,r2,r16
    3a30:	d8803315 	stw	r2,204(sp)
    3a34:	008011c4 	movi	r2,71
    3a38:	b0817626 	beq	r22,r2,4014 <___vfprintf_internal_r+0x1e34>
    3a3c:	00801944 	movi	r2,101
    3a40:	1442800e 	bge	r2,r17,4444 <___vfprintf_internal_r+0x2264>
    3a44:	d8c02617 	ldw	r3,152(sp)
    3a48:	00801984 	movi	r2,102
    3a4c:	d8c03215 	stw	r3,200(sp)
    3a50:	8881fe26 	beq	r17,r2,424c <___vfprintf_internal_r+0x206c>
    3a54:	d8c03217 	ldw	r3,200(sp)
    3a58:	d9003317 	ldw	r4,204(sp)
    3a5c:	1901dd16 	blt	r3,r4,41d4 <___vfprintf_internal_r+0x1ff4>
    3a60:	9480004c 	andi	r18,r18,1
    3a64:	90022b1e 	bne	r18,zero,4314 <___vfprintf_internal_r+0x2134>
    3a68:	1805883a 	mov	r2,r3
    3a6c:	18028316 	blt	r3,zero,447c <___vfprintf_internal_r+0x229c>
    3a70:	d8c03217 	ldw	r3,200(sp)
    3a74:	044019c4 	movi	r17,103
    3a78:	d8c02b15 	stw	r3,172(sp)
    3a7c:	df002907 	ldb	fp,164(sp)
    3a80:	e001531e 	bne	fp,zero,3fd0 <___vfprintf_internal_r+0x1df0>
    3a84:	df002783 	ldbu	fp,158(sp)
    3a88:	d8802915 	stw	r2,164(sp)
    3a8c:	dc802c17 	ldw	r18,176(sp)
    3a90:	d8002a15 	stw	zero,168(sp)
    3a94:	003baf06 	br	2954 <__alt_data_end+0xf8002954>
    3a98:	d8c02e17 	ldw	r3,184(sp)
    3a9c:	d9002e17 	ldw	r4,184(sp)
    3aa0:	d9402e17 	ldw	r5,184(sp)
    3aa4:	18c00017 	ldw	r3,0(r3)
    3aa8:	21000117 	ldw	r4,4(r4)
    3aac:	29400204 	addi	r5,r5,8
    3ab0:	d8c03615 	stw	r3,216(sp)
    3ab4:	d9003815 	stw	r4,224(sp)
    3ab8:	d9402e15 	stw	r5,184(sp)
    3abc:	003b5006 	br	2800 <__alt_data_end+0xf8002800>
    3ac0:	ac400007 	ldb	r17,0(r21)
    3ac4:	003a2806 	br	2368 <__alt_data_end+0xf8002368>
    3ac8:	9080100c 	andi	r2,r18,64
    3acc:	1000a826 	beq	r2,zero,3d70 <___vfprintf_internal_r+0x1b90>
    3ad0:	d8c02e17 	ldw	r3,184(sp)
    3ad4:	002d883a 	mov	r22,zero
    3ad8:	1cc0000b 	ldhu	r19,0(r3)
    3adc:	18c00104 	addi	r3,r3,4
    3ae0:	d8c02e15 	stw	r3,184(sp)
    3ae4:	003caf06 	br	2da4 <__alt_data_end+0xf8002da4>
    3ae8:	d9002e17 	ldw	r4,184(sp)
    3aec:	d9402a17 	ldw	r5,168(sp)
    3af0:	002d883a 	mov	r22,zero
    3af4:	20800104 	addi	r2,r4,4
    3af8:	24c00017 	ldw	r19,0(r4)
    3afc:	283ebb0e 	bge	r5,zero,35ec <__alt_data_end+0xf80035ec>
    3b00:	003ef106 	br	36c8 <__alt_data_end+0xf80036c8>
    3b04:	9080040c 	andi	r2,r18,16
    3b08:	1000921e 	bne	r2,zero,3d54 <___vfprintf_internal_r+0x1b74>
    3b0c:	9480100c 	andi	r18,r18,64
    3b10:	90013926 	beq	r18,zero,3ff8 <___vfprintf_internal_r+0x1e18>
    3b14:	d9402e17 	ldw	r5,184(sp)
    3b18:	d8c02f17 	ldw	r3,188(sp)
    3b1c:	28800017 	ldw	r2,0(r5)
    3b20:	29400104 	addi	r5,r5,4
    3b24:	d9402e15 	stw	r5,184(sp)
    3b28:	10c0000d 	sth	r3,0(r2)
    3b2c:	0039e406 	br	22c0 <__alt_data_end+0xf80022c0>
    3b30:	9080100c 	andi	r2,r18,64
    3b34:	10008026 	beq	r2,zero,3d38 <___vfprintf_internal_r+0x1b58>
    3b38:	d8802e17 	ldw	r2,184(sp)
    3b3c:	14c0000f 	ldh	r19,0(r2)
    3b40:	10800104 	addi	r2,r2,4
    3b44:	d8802e15 	stw	r2,184(sp)
    3b48:	982dd7fa 	srai	r22,r19,31
    3b4c:	b005883a 	mov	r2,r22
    3b50:	003af706 	br	2730 <__alt_data_end+0xf8002730>
    3b54:	9080100c 	andi	r2,r18,64
    3b58:	d8002785 	stb	zero,158(sp)
    3b5c:	10008a1e 	bne	r2,zero,3d88 <___vfprintf_internal_r+0x1ba8>
    3b60:	d9002e17 	ldw	r4,184(sp)
    3b64:	d9402a17 	ldw	r5,168(sp)
    3b68:	002d883a 	mov	r22,zero
    3b6c:	20800104 	addi	r2,r4,4
    3b70:	24c00017 	ldw	r19,0(r4)
    3b74:	283e4b0e 	bge	r5,zero,34a4 <__alt_data_end+0xf80034a4>
    3b78:	9d86b03a 	or	r3,r19,r22
    3b7c:	d8802e15 	stw	r2,184(sp)
    3b80:	183e4c1e 	bne	r3,zero,34b4 <__alt_data_end+0xf80034b4>
    3b84:	0039883a 	mov	fp,zero
    3b88:	0005883a 	mov	r2,zero
    3b8c:	003d4006 	br	3090 <__alt_data_end+0xf8003090>
    3b90:	01400074 	movhi	r5,1
    3b94:	29483d84 	addi	r5,r5,8438
    3b98:	d9402c15 	stw	r5,176(sp)
    3b9c:	d9402c17 	ldw	r5,176(sp)
    3ba0:	1c47883a 	add	r3,r3,r17
    3ba4:	10800044 	addi	r2,r2,1
    3ba8:	41400015 	stw	r5,0(r8)
    3bac:	44400115 	stw	r17,4(r8)
    3bb0:	d8c02015 	stw	r3,128(sp)
    3bb4:	d8801f15 	stw	r2,124(sp)
    3bb8:	010001c4 	movi	r4,7
    3bbc:	20bec816 	blt	r4,r2,36e0 <__alt_data_end+0xf80036e0>
    3bc0:	42000204 	addi	r8,r8,8
    3bc4:	003ecd06 	br	36fc <__alt_data_end+0xf80036fc>
    3bc8:	d9002a17 	ldw	r4,168(sp)
    3bcc:	d8002785 	stb	zero,158(sp)
    3bd0:	203d2d16 	blt	r4,zero,3088 <__alt_data_end+0xf8003088>
    3bd4:	00bfdfc4 	movi	r2,-129
    3bd8:	90a4703a 	and	r18,r18,r2
    3bdc:	003a6106 	br	2564 <__alt_data_end+0xf8002564>
    3be0:	01000074 	movhi	r4,1
    3be4:	21083d84 	addi	r4,r4,8438
    3be8:	d9002c15 	stw	r4,176(sp)
    3bec:	003bea06 	br	2b98 <__alt_data_end+0xf8002b98>
    3bf0:	d9002d17 	ldw	r4,180(sp)
    3bf4:	d9801e04 	addi	r6,sp,120
    3bf8:	b80b883a 	mov	r5,r23
    3bfc:	00091f80 	call	91f8 <__sprint_r>
    3c00:	103a7b1e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    3c04:	d8c02017 	ldw	r3,128(sp)
    3c08:	da000404 	addi	r8,sp,16
    3c0c:	003d4106 	br	3114 <__alt_data_end+0xf8003114>
    3c10:	d8801f17 	ldw	r2,124(sp)
    3c14:	01400074 	movhi	r5,1
    3c18:	01000044 	movi	r4,1
    3c1c:	18c00044 	addi	r3,r3,1
    3c20:	10800044 	addi	r2,r2,1
    3c24:	29483d04 	addi	r5,r5,8436
    3c28:	41000115 	stw	r4,4(r8)
    3c2c:	41400015 	stw	r5,0(r8)
    3c30:	d8c02015 	stw	r3,128(sp)
    3c34:	d8801f15 	stw	r2,124(sp)
    3c38:	010001c4 	movi	r4,7
    3c3c:	20805c16 	blt	r4,r2,3db0 <___vfprintf_internal_r+0x1bd0>
    3c40:	42000204 	addi	r8,r8,8
    3c44:	8800041e 	bne	r17,zero,3c58 <___vfprintf_internal_r+0x1a78>
    3c48:	d8803317 	ldw	r2,204(sp)
    3c4c:	1000021e 	bne	r2,zero,3c58 <___vfprintf_internal_r+0x1a78>
    3c50:	9080004c 	andi	r2,r18,1
    3c54:	103be726 	beq	r2,zero,2bf4 <__alt_data_end+0xf8002bf4>
    3c58:	d9003717 	ldw	r4,220(sp)
    3c5c:	d8801f17 	ldw	r2,124(sp)
    3c60:	d9403417 	ldw	r5,208(sp)
    3c64:	20c7883a 	add	r3,r4,r3
    3c68:	10800044 	addi	r2,r2,1
    3c6c:	41000115 	stw	r4,4(r8)
    3c70:	41400015 	stw	r5,0(r8)
    3c74:	d8c02015 	stw	r3,128(sp)
    3c78:	d8801f15 	stw	r2,124(sp)
    3c7c:	010001c4 	movi	r4,7
    3c80:	20812116 	blt	r4,r2,4108 <___vfprintf_internal_r+0x1f28>
    3c84:	42000204 	addi	r8,r8,8
    3c88:	0463c83a 	sub	r17,zero,r17
    3c8c:	0440730e 	bge	zero,r17,3e5c <___vfprintf_internal_r+0x1c7c>
    3c90:	05800404 	movi	r22,16
    3c94:	b440860e 	bge	r22,r17,3eb0 <___vfprintf_internal_r+0x1cd0>
    3c98:	01400074 	movhi	r5,1
    3c9c:	29483d84 	addi	r5,r5,8438
    3ca0:	d9402c15 	stw	r5,176(sp)
    3ca4:	070001c4 	movi	fp,7
    3ca8:	dcc02d17 	ldw	r19,180(sp)
    3cac:	00000306 	br	3cbc <___vfprintf_internal_r+0x1adc>
    3cb0:	42000204 	addi	r8,r8,8
    3cb4:	8c7ffc04 	addi	r17,r17,-16
    3cb8:	b440800e 	bge	r22,r17,3ebc <___vfprintf_internal_r+0x1cdc>
    3cbc:	18c00404 	addi	r3,r3,16
    3cc0:	10800044 	addi	r2,r2,1
    3cc4:	45000015 	stw	r20,0(r8)
    3cc8:	45800115 	stw	r22,4(r8)
    3ccc:	d8c02015 	stw	r3,128(sp)
    3cd0:	d8801f15 	stw	r2,124(sp)
    3cd4:	e0bff60e 	bge	fp,r2,3cb0 <__alt_data_end+0xf8003cb0>
    3cd8:	d9801e04 	addi	r6,sp,120
    3cdc:	b80b883a 	mov	r5,r23
    3ce0:	9809883a 	mov	r4,r19
    3ce4:	00091f80 	call	91f8 <__sprint_r>
    3ce8:	103a411e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    3cec:	d8c02017 	ldw	r3,128(sp)
    3cf0:	d8801f17 	ldw	r2,124(sp)
    3cf4:	da000404 	addi	r8,sp,16
    3cf8:	003fee06 	br	3cb4 <__alt_data_end+0xf8003cb4>
    3cfc:	00bfffc4 	movi	r2,-1
    3d00:	003a3f06 	br	2600 <__alt_data_end+0xf8002600>
    3d04:	008011c4 	movi	r2,71
    3d08:	1440b816 	blt	r2,r17,3fec <___vfprintf_internal_r+0x1e0c>
    3d0c:	04000074 	movhi	r16,1
    3d10:	84082f04 	addi	r16,r16,8380
    3d14:	00c000c4 	movi	r3,3
    3d18:	00bfdfc4 	movi	r2,-129
    3d1c:	d8c02915 	stw	r3,164(sp)
    3d20:	90a4703a 	and	r18,r18,r2
    3d24:	df002783 	ldbu	fp,158(sp)
    3d28:	d8c02b15 	stw	r3,172(sp)
    3d2c:	d8002a15 	stw	zero,168(sp)
    3d30:	d8003215 	stw	zero,200(sp)
    3d34:	003b0706 	br	2954 <__alt_data_end+0xf8002954>
    3d38:	d8c02e17 	ldw	r3,184(sp)
    3d3c:	1cc00017 	ldw	r19,0(r3)
    3d40:	18c00104 	addi	r3,r3,4
    3d44:	d8c02e15 	stw	r3,184(sp)
    3d48:	982dd7fa 	srai	r22,r19,31
    3d4c:	b005883a 	mov	r2,r22
    3d50:	003a7706 	br	2730 <__alt_data_end+0xf8002730>
    3d54:	d8c02e17 	ldw	r3,184(sp)
    3d58:	d9002f17 	ldw	r4,188(sp)
    3d5c:	18800017 	ldw	r2,0(r3)
    3d60:	18c00104 	addi	r3,r3,4
    3d64:	d8c02e15 	stw	r3,184(sp)
    3d68:	11000015 	stw	r4,0(r2)
    3d6c:	00395406 	br	22c0 <__alt_data_end+0xf80022c0>
    3d70:	d9002e17 	ldw	r4,184(sp)
    3d74:	002d883a 	mov	r22,zero
    3d78:	24c00017 	ldw	r19,0(r4)
    3d7c:	21000104 	addi	r4,r4,4
    3d80:	d9002e15 	stw	r4,184(sp)
    3d84:	003c0706 	br	2da4 <__alt_data_end+0xf8002da4>
    3d88:	d9402e17 	ldw	r5,184(sp)
    3d8c:	d8c02a17 	ldw	r3,168(sp)
    3d90:	002d883a 	mov	r22,zero
    3d94:	28800104 	addi	r2,r5,4
    3d98:	2cc0000b 	ldhu	r19,0(r5)
    3d9c:	183dc10e 	bge	r3,zero,34a4 <__alt_data_end+0xf80034a4>
    3da0:	003f7506 	br	3b78 <__alt_data_end+0xf8003b78>
    3da4:	04000074 	movhi	r16,1
    3da8:	84082d04 	addi	r16,r16,8372
    3dac:	003aa706 	br	284c <__alt_data_end+0xf800284c>
    3db0:	d9002d17 	ldw	r4,180(sp)
    3db4:	d9801e04 	addi	r6,sp,120
    3db8:	b80b883a 	mov	r5,r23
    3dbc:	00091f80 	call	91f8 <__sprint_r>
    3dc0:	103a0b1e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    3dc4:	dc402617 	ldw	r17,152(sp)
    3dc8:	d8c02017 	ldw	r3,128(sp)
    3dcc:	da000404 	addi	r8,sp,16
    3dd0:	003f9c06 	br	3c44 <__alt_data_end+0xf8003c44>
    3dd4:	ac400043 	ldbu	r17,1(r21)
    3dd8:	84000814 	ori	r16,r16,32
    3ddc:	ad400044 	addi	r21,r21,1
    3de0:	8c403fcc 	andi	r17,r17,255
    3de4:	8c40201c 	xori	r17,r17,128
    3de8:	8c7fe004 	addi	r17,r17,-128
    3dec:	00395e06 	br	2368 <__alt_data_end+0xf8002368>
    3df0:	d8c02e15 	stw	r3,184(sp)
    3df4:	0039883a 	mov	fp,zero
    3df8:	003e3506 	br	36d0 <__alt_data_end+0xf80036d0>
    3dfc:	d9002d17 	ldw	r4,180(sp)
    3e00:	d9801e04 	addi	r6,sp,120
    3e04:	b80b883a 	mov	r5,r23
    3e08:	00091f80 	call	91f8 <__sprint_r>
    3e0c:	1039f81e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    3e10:	d8c02017 	ldw	r3,128(sp)
    3e14:	da000404 	addi	r8,sp,16
    3e18:	003cd006 	br	315c <__alt_data_end+0xf800315c>
    3e1c:	8009883a 	mov	r4,r16
    3e20:	df003d15 	stw	fp,244(sp)
    3e24:	00090640 	call	9064 <strlen>
    3e28:	d8802b15 	stw	r2,172(sp)
    3e2c:	da003d17 	ldw	r8,244(sp)
    3e30:	103c200e 	bge	r2,zero,2eb4 <__alt_data_end+0xf8002eb4>
    3e34:	0005883a 	mov	r2,zero
    3e38:	003c1e06 	br	2eb4 <__alt_data_end+0xf8002eb4>
    3e3c:	d9002d17 	ldw	r4,180(sp)
    3e40:	d9801e04 	addi	r6,sp,120
    3e44:	b80b883a 	mov	r5,r23
    3e48:	00091f80 	call	91f8 <__sprint_r>
    3e4c:	1039e81e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    3e50:	d8c02017 	ldw	r3,128(sp)
    3e54:	d8801f17 	ldw	r2,124(sp)
    3e58:	da000404 	addi	r8,sp,16
    3e5c:	d9403317 	ldw	r5,204(sp)
    3e60:	10800044 	addi	r2,r2,1
    3e64:	44000015 	stw	r16,0(r8)
    3e68:	28c7883a 	add	r3,r5,r3
    3e6c:	003b5b06 	br	2bdc <__alt_data_end+0xf8002bdc>
    3e70:	01000074 	movhi	r4,1
    3e74:	21084184 	addi	r4,r4,8454
    3e78:	d9003515 	stw	r4,212(sp)
    3e7c:	003af206 	br	2a48 <__alt_data_end+0xf8002a48>
    3e80:	013fffc4 	movi	r4,-1
    3e84:	003a0806 	br	26a8 <__alt_data_end+0xf80026a8>
    3e88:	0023883a 	mov	r17,zero
    3e8c:	003d9d06 	br	3504 <__alt_data_end+0xf8003504>
    3e90:	d9002d17 	ldw	r4,180(sp)
    3e94:	d9801e04 	addi	r6,sp,120
    3e98:	b80b883a 	mov	r5,r23
    3e9c:	00091f80 	call	91f8 <__sprint_r>
    3ea0:	1039d31e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    3ea4:	d8c02017 	ldw	r3,128(sp)
    3ea8:	da000404 	addi	r8,sp,16
    3eac:	003d9406 	br	3500 <__alt_data_end+0xf8003500>
    3eb0:	01000074 	movhi	r4,1
    3eb4:	21083d84 	addi	r4,r4,8438
    3eb8:	d9002c15 	stw	r4,176(sp)
    3ebc:	d9002c17 	ldw	r4,176(sp)
    3ec0:	1c47883a 	add	r3,r3,r17
    3ec4:	10800044 	addi	r2,r2,1
    3ec8:	41000015 	stw	r4,0(r8)
    3ecc:	44400115 	stw	r17,4(r8)
    3ed0:	d8c02015 	stw	r3,128(sp)
    3ed4:	d8801f15 	stw	r2,124(sp)
    3ed8:	010001c4 	movi	r4,7
    3edc:	20bfd716 	blt	r4,r2,3e3c <__alt_data_end+0xf8003e3c>
    3ee0:	42000204 	addi	r8,r8,8
    3ee4:	003fdd06 	br	3e5c <__alt_data_end+0xf8003e5c>
    3ee8:	d9002d17 	ldw	r4,180(sp)
    3eec:	d9801e04 	addi	r6,sp,120
    3ef0:	b80b883a 	mov	r5,r23
    3ef4:	00091f80 	call	91f8 <__sprint_r>
    3ef8:	1039bd1e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    3efc:	d8802617 	ldw	r2,152(sp)
    3f00:	d8c02017 	ldw	r3,128(sp)
    3f04:	da000404 	addi	r8,sp,16
    3f08:	003e1006 	br	374c <__alt_data_end+0xf800374c>
    3f0c:	00800044 	movi	r2,1
    3f10:	10803fcc 	andi	r2,r2,255
    3f14:	00c00044 	movi	r3,1
    3f18:	10fa0d26 	beq	r2,r3,2750 <__alt_data_end+0xf8002750>
    3f1c:	00c00084 	movi	r3,2
    3f20:	10fbaf26 	beq	r2,r3,2de0 <__alt_data_end+0xf8002de0>
    3f24:	003a6d06 	br	28dc <__alt_data_end+0xf80028dc>
    3f28:	01000074 	movhi	r4,1
    3f2c:	21084184 	addi	r4,r4,8454
    3f30:	d9003515 	stw	r4,212(sp)
    3f34:	003b5406 	br	2c88 <__alt_data_end+0xf8002c88>
    3f38:	d8802a17 	ldw	r2,168(sp)
    3f3c:	00c00184 	movi	r3,6
    3f40:	1880012e 	bgeu	r3,r2,3f48 <___vfprintf_internal_r+0x1d68>
    3f44:	1805883a 	mov	r2,r3
    3f48:	d8802b15 	stw	r2,172(sp)
    3f4c:	1000ef16 	blt	r2,zero,430c <___vfprintf_internal_r+0x212c>
    3f50:	04000074 	movhi	r16,1
    3f54:	d8802915 	stw	r2,164(sp)
    3f58:	dcc02e15 	stw	r19,184(sp)
    3f5c:	d8002a15 	stw	zero,168(sp)
    3f60:	d8003215 	stw	zero,200(sp)
    3f64:	84083b04 	addi	r16,r16,8428
    3f68:	0039883a 	mov	fp,zero
    3f6c:	003a8006 	br	2970 <__alt_data_end+0xf8002970>
    3f70:	0021883a 	mov	r16,zero
    3f74:	003e0706 	br	3794 <__alt_data_end+0xf8003794>
    3f78:	d9002d17 	ldw	r4,180(sp)
    3f7c:	d9801e04 	addi	r6,sp,120
    3f80:	b80b883a 	mov	r5,r23
    3f84:	00091f80 	call	91f8 <__sprint_r>
    3f88:	1039991e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    3f8c:	d8802617 	ldw	r2,152(sp)
    3f90:	d9403317 	ldw	r5,204(sp)
    3f94:	d8c02017 	ldw	r3,128(sp)
    3f98:	da000404 	addi	r8,sp,16
    3f9c:	2885c83a 	sub	r2,r5,r2
    3fa0:	003dfb06 	br	3790 <__alt_data_end+0xf8003790>
    3fa4:	9080004c 	andi	r2,r18,1
    3fa8:	103e8f1e 	bne	r2,zero,39e8 <__alt_data_end+0xf80039e8>
    3fac:	d8802117 	ldw	r2,132(sp)
    3fb0:	003e9e06 	br	3a2c <__alt_data_end+0xf8003a2c>
    3fb4:	1025883a 	mov	r18,r2
    3fb8:	0039883a 	mov	fp,zero
    3fbc:	00800084 	movi	r2,2
    3fc0:	003fd306 	br	3f10 <__alt_data_end+0xf8003f10>
    3fc4:	07000b44 	movi	fp,45
    3fc8:	df002785 	stb	fp,158(sp)
    3fcc:	003a1b06 	br	283c <__alt_data_end+0xf800283c>
    3fd0:	00c00b44 	movi	r3,45
    3fd4:	d8c02785 	stb	r3,158(sp)
    3fd8:	d8802915 	stw	r2,164(sp)
    3fdc:	dc802c17 	ldw	r18,176(sp)
    3fe0:	d8002a15 	stw	zero,168(sp)
    3fe4:	07000b44 	movi	fp,45
    3fe8:	003a5e06 	br	2964 <__alt_data_end+0xf8002964>
    3fec:	04000074 	movhi	r16,1
    3ff0:	84083004 	addi	r16,r16,8384
    3ff4:	003f4706 	br	3d14 <__alt_data_end+0xf8003d14>
    3ff8:	d9002e17 	ldw	r4,184(sp)
    3ffc:	d9402f17 	ldw	r5,188(sp)
    4000:	20800017 	ldw	r2,0(r4)
    4004:	21000104 	addi	r4,r4,4
    4008:	d9002e15 	stw	r4,184(sp)
    400c:	11400015 	stw	r5,0(r2)
    4010:	0038ab06 	br	22c0 <__alt_data_end+0xf80022c0>
    4014:	dd802617 	ldw	r22,152(sp)
    4018:	00bfff44 	movi	r2,-3
    401c:	b0801c16 	blt	r22,r2,4090 <___vfprintf_internal_r+0x1eb0>
    4020:	d9402a17 	ldw	r5,168(sp)
    4024:	2d801a16 	blt	r5,r22,4090 <___vfprintf_internal_r+0x1eb0>
    4028:	dd803215 	stw	r22,200(sp)
    402c:	003e8906 	br	3a54 <__alt_data_end+0xf8003a54>
    4030:	01000074 	movhi	r4,1
    4034:	21083d84 	addi	r4,r4,8438
    4038:	d9002c15 	stw	r4,176(sp)
    403c:	003c9106 	br	3284 <__alt_data_end+0xf8003284>
    4040:	e005883a 	mov	r2,fp
    4044:	003e7906 	br	3a2c <__alt_data_end+0xf8003a2c>
    4048:	d9002a17 	ldw	r4,168(sp)
    404c:	df002783 	ldbu	fp,158(sp)
    4050:	dcc02e15 	stw	r19,184(sp)
    4054:	d9002915 	stw	r4,164(sp)
    4058:	d9002b15 	stw	r4,172(sp)
    405c:	d8002a15 	stw	zero,168(sp)
    4060:	d8003215 	stw	zero,200(sp)
    4064:	003a3b06 	br	2954 <__alt_data_end+0xf8002954>
    4068:	9080004c 	andi	r2,r18,1
    406c:	0039883a 	mov	fp,zero
    4070:	10000426 	beq	r2,zero,4084 <___vfprintf_internal_r+0x1ea4>
    4074:	00800c04 	movi	r2,48
    4078:	dc001dc4 	addi	r16,sp,119
    407c:	d8801dc5 	stb	r2,119(sp)
    4080:	003b6406 	br	2e14 <__alt_data_end+0xf8002e14>
    4084:	d8002b15 	stw	zero,172(sp)
    4088:	dc001e04 	addi	r16,sp,120
    408c:	003a2b06 	br	293c <__alt_data_end+0xf800293c>
    4090:	8c7fff84 	addi	r17,r17,-2
    4094:	b5bfffc4 	addi	r22,r22,-1
    4098:	dd802615 	stw	r22,152(sp)
    409c:	dc4022c5 	stb	r17,139(sp)
    40a0:	b000bf16 	blt	r22,zero,43a0 <___vfprintf_internal_r+0x21c0>
    40a4:	00800ac4 	movi	r2,43
    40a8:	d8802305 	stb	r2,140(sp)
    40ac:	00800244 	movi	r2,9
    40b0:	15807016 	blt	r2,r22,4274 <___vfprintf_internal_r+0x2094>
    40b4:	00800c04 	movi	r2,48
    40b8:	b5800c04 	addi	r22,r22,48
    40bc:	d8802345 	stb	r2,141(sp)
    40c0:	dd802385 	stb	r22,142(sp)
    40c4:	d88023c4 	addi	r2,sp,143
    40c8:	df0022c4 	addi	fp,sp,139
    40cc:	d8c03317 	ldw	r3,204(sp)
    40d0:	1739c83a 	sub	fp,r2,fp
    40d4:	d9003317 	ldw	r4,204(sp)
    40d8:	e0c7883a 	add	r3,fp,r3
    40dc:	df003a15 	stw	fp,232(sp)
    40e0:	d8c02b15 	stw	r3,172(sp)
    40e4:	00800044 	movi	r2,1
    40e8:	1100b30e 	bge	r2,r4,43b8 <___vfprintf_internal_r+0x21d8>
    40ec:	d8c02b17 	ldw	r3,172(sp)
    40f0:	18c00044 	addi	r3,r3,1
    40f4:	d8c02b15 	stw	r3,172(sp)
    40f8:	1805883a 	mov	r2,r3
    40fc:	1800ac16 	blt	r3,zero,43b0 <___vfprintf_internal_r+0x21d0>
    4100:	d8003215 	stw	zero,200(sp)
    4104:	003e5d06 	br	3a7c <__alt_data_end+0xf8003a7c>
    4108:	d9002d17 	ldw	r4,180(sp)
    410c:	d9801e04 	addi	r6,sp,120
    4110:	b80b883a 	mov	r5,r23
    4114:	00091f80 	call	91f8 <__sprint_r>
    4118:	1039351e 	bne	r2,zero,25f0 <__alt_data_end+0xf80025f0>
    411c:	dc402617 	ldw	r17,152(sp)
    4120:	d8c02017 	ldw	r3,128(sp)
    4124:	d8801f17 	ldw	r2,124(sp)
    4128:	da000404 	addi	r8,sp,16
    412c:	003ed606 	br	3c88 <__alt_data_end+0xf8003c88>
    4130:	182b883a 	mov	r21,r3
    4134:	d8002a15 	stw	zero,168(sp)
    4138:	00388c06 	br	236c <__alt_data_end+0xf800236c>
    413c:	d8802a17 	ldw	r2,168(sp)
    4140:	103e071e 	bne	r2,zero,3960 <__alt_data_end+0xf8003960>
    4144:	dc002a15 	stw	r16,168(sp)
    4148:	003e0506 	br	3960 <__alt_data_end+0xf8003960>
    414c:	d9002a17 	ldw	r4,168(sp)
    4150:	20c00044 	addi	r3,r4,1
    4154:	003e0f06 	br	3994 <__alt_data_end+0xf8003994>
    4158:	01400184 	movi	r5,6
    415c:	d9402a15 	stw	r5,168(sp)
    4160:	003dff06 	br	3960 <__alt_data_end+0xf8003960>
    4164:	d8802104 	addi	r2,sp,132
    4168:	d8800315 	stw	r2,12(sp)
    416c:	d8802504 	addi	r2,sp,148
    4170:	d8800215 	stw	r2,8(sp)
    4174:	d8802604 	addi	r2,sp,152
    4178:	d8800115 	stw	r2,4(sp)
    417c:	d8802a17 	ldw	r2,168(sp)
    4180:	d9403617 	ldw	r5,216(sp)
    4184:	d9002d17 	ldw	r4,180(sp)
    4188:	d8800015 	stw	r2,0(sp)
    418c:	01c000c4 	movi	r7,3
    4190:	980d883a 	mov	r6,r19
    4194:	da003d15 	stw	r8,244(sp)
    4198:	00049100 	call	4910 <_dtoa_r>
    419c:	d8c02a17 	ldw	r3,168(sp)
    41a0:	da003d17 	ldw	r8,244(sp)
    41a4:	1021883a 	mov	r16,r2
    41a8:	10f9883a 	add	fp,r2,r3
    41ac:	81000007 	ldb	r4,0(r16)
    41b0:	00800c04 	movi	r2,48
    41b4:	20805e26 	beq	r4,r2,4330 <___vfprintf_internal_r+0x2150>
    41b8:	d8c02617 	ldw	r3,152(sp)
    41bc:	e0f9883a 	add	fp,fp,r3
    41c0:	003e0a06 	br	39ec <__alt_data_end+0xf80039ec>
    41c4:	00c00b44 	movi	r3,45
    41c8:	24e0003c 	xorhi	r19,r4,32768
    41cc:	d8c02905 	stb	r3,164(sp)
    41d0:	003de906 	br	3978 <__alt_data_end+0xf8003978>
    41d4:	d8c03217 	ldw	r3,200(sp)
    41d8:	00c07a0e 	bge	zero,r3,43c4 <___vfprintf_internal_r+0x21e4>
    41dc:	00800044 	movi	r2,1
    41e0:	d9003317 	ldw	r4,204(sp)
    41e4:	1105883a 	add	r2,r2,r4
    41e8:	d8802b15 	stw	r2,172(sp)
    41ec:	10004e16 	blt	r2,zero,4328 <___vfprintf_internal_r+0x2148>
    41f0:	044019c4 	movi	r17,103
    41f4:	003e2106 	br	3a7c <__alt_data_end+0xf8003a7c>
    41f8:	d9002a17 	ldw	r4,168(sp)
    41fc:	d8802104 	addi	r2,sp,132
    4200:	d8800315 	stw	r2,12(sp)
    4204:	d9000015 	stw	r4,0(sp)
    4208:	d8802504 	addi	r2,sp,148
    420c:	d9403617 	ldw	r5,216(sp)
    4210:	d9002d17 	ldw	r4,180(sp)
    4214:	d8800215 	stw	r2,8(sp)
    4218:	d8802604 	addi	r2,sp,152
    421c:	d8800115 	stw	r2,4(sp)
    4220:	01c000c4 	movi	r7,3
    4224:	980d883a 	mov	r6,r19
    4228:	da003d15 	stw	r8,244(sp)
    422c:	00049100 	call	4910 <_dtoa_r>
    4230:	d8c02a17 	ldw	r3,168(sp)
    4234:	da003d17 	ldw	r8,244(sp)
    4238:	1021883a 	mov	r16,r2
    423c:	00801184 	movi	r2,70
    4240:	80f9883a 	add	fp,r16,r3
    4244:	88bfd926 	beq	r17,r2,41ac <__alt_data_end+0xf80041ac>
    4248:	003de806 	br	39ec <__alt_data_end+0xf80039ec>
    424c:	d9002a17 	ldw	r4,168(sp)
    4250:	00c04d0e 	bge	zero,r3,4388 <___vfprintf_internal_r+0x21a8>
    4254:	2000441e 	bne	r4,zero,4368 <___vfprintf_internal_r+0x2188>
    4258:	9480004c 	andi	r18,r18,1
    425c:	9000421e 	bne	r18,zero,4368 <___vfprintf_internal_r+0x2188>
    4260:	1805883a 	mov	r2,r3
    4264:	18006f16 	blt	r3,zero,4424 <___vfprintf_internal_r+0x2244>
    4268:	d8c03217 	ldw	r3,200(sp)
    426c:	d8c02b15 	stw	r3,172(sp)
    4270:	003e0206 	br	3a7c <__alt_data_end+0xf8003a7c>
    4274:	df0022c4 	addi	fp,sp,139
    4278:	dc002a15 	stw	r16,168(sp)
    427c:	4027883a 	mov	r19,r8
    4280:	e021883a 	mov	r16,fp
    4284:	b009883a 	mov	r4,r22
    4288:	01400284 	movi	r5,10
    428c:	000bd840 	call	bd84 <__modsi3>
    4290:	10800c04 	addi	r2,r2,48
    4294:	843fffc4 	addi	r16,r16,-1
    4298:	b009883a 	mov	r4,r22
    429c:	01400284 	movi	r5,10
    42a0:	80800005 	stb	r2,0(r16)
    42a4:	000bd000 	call	bd00 <__divsi3>
    42a8:	102d883a 	mov	r22,r2
    42ac:	00800244 	movi	r2,9
    42b0:	15bff416 	blt	r2,r22,4284 <__alt_data_end+0xf8004284>
    42b4:	9811883a 	mov	r8,r19
    42b8:	b0800c04 	addi	r2,r22,48
    42bc:	8027883a 	mov	r19,r16
    42c0:	997fffc4 	addi	r5,r19,-1
    42c4:	98bfffc5 	stb	r2,-1(r19)
    42c8:	dc002a17 	ldw	r16,168(sp)
    42cc:	2f006d2e 	bgeu	r5,fp,4484 <___vfprintf_internal_r+0x22a4>
    42d0:	d9c02384 	addi	r7,sp,142
    42d4:	3ccfc83a 	sub	r7,r7,r19
    42d8:	d9002344 	addi	r4,sp,141
    42dc:	e1cf883a 	add	r7,fp,r7
    42e0:	00000106 	br	42e8 <___vfprintf_internal_r+0x2108>
    42e4:	28800003 	ldbu	r2,0(r5)
    42e8:	20800005 	stb	r2,0(r4)
    42ec:	21000044 	addi	r4,r4,1
    42f0:	29400044 	addi	r5,r5,1
    42f4:	393ffb1e 	bne	r7,r4,42e4 <__alt_data_end+0xf80042e4>
    42f8:	d8802304 	addi	r2,sp,140
    42fc:	14c5c83a 	sub	r2,r2,r19
    4300:	d8c02344 	addi	r3,sp,141
    4304:	1885883a 	add	r2,r3,r2
    4308:	003f7006 	br	40cc <__alt_data_end+0xf80040cc>
    430c:	0005883a 	mov	r2,zero
    4310:	003f0f06 	br	3f50 <__alt_data_end+0xf8003f50>
    4314:	d8c03217 	ldw	r3,200(sp)
    4318:	18c00044 	addi	r3,r3,1
    431c:	d8c02b15 	stw	r3,172(sp)
    4320:	1805883a 	mov	r2,r3
    4324:	183fb20e 	bge	r3,zero,41f0 <__alt_data_end+0xf80041f0>
    4328:	0005883a 	mov	r2,zero
    432c:	003fb006 	br	41f0 <__alt_data_end+0xf80041f0>
    4330:	d9003617 	ldw	r4,216(sp)
    4334:	000d883a 	mov	r6,zero
    4338:	000f883a 	mov	r7,zero
    433c:	980b883a 	mov	r5,r19
    4340:	d8c03c15 	stw	r3,240(sp)
    4344:	da003d15 	stw	r8,244(sp)
    4348:	000d1300 	call	d130 <__eqdf2>
    434c:	d8c03c17 	ldw	r3,240(sp)
    4350:	da003d17 	ldw	r8,244(sp)
    4354:	103f9826 	beq	r2,zero,41b8 <__alt_data_end+0xf80041b8>
    4358:	00800044 	movi	r2,1
    435c:	10c7c83a 	sub	r3,r2,r3
    4360:	d8c02615 	stw	r3,152(sp)
    4364:	003f9506 	br	41bc <__alt_data_end+0xf80041bc>
    4368:	d9002a17 	ldw	r4,168(sp)
    436c:	d8c03217 	ldw	r3,200(sp)
    4370:	20800044 	addi	r2,r4,1
    4374:	1885883a 	add	r2,r3,r2
    4378:	d8802b15 	stw	r2,172(sp)
    437c:	103dbf0e 	bge	r2,zero,3a7c <__alt_data_end+0xf8003a7c>
    4380:	0005883a 	mov	r2,zero
    4384:	003dbd06 	br	3a7c <__alt_data_end+0xf8003a7c>
    4388:	2000201e 	bne	r4,zero,440c <___vfprintf_internal_r+0x222c>
    438c:	9480004c 	andi	r18,r18,1
    4390:	90001e1e 	bne	r18,zero,440c <___vfprintf_internal_r+0x222c>
    4394:	00800044 	movi	r2,1
    4398:	d8802b15 	stw	r2,172(sp)
    439c:	003db706 	br	3a7c <__alt_data_end+0xf8003a7c>
    43a0:	00800b44 	movi	r2,45
    43a4:	05adc83a 	sub	r22,zero,r22
    43a8:	d8802305 	stb	r2,140(sp)
    43ac:	003f3f06 	br	40ac <__alt_data_end+0xf80040ac>
    43b0:	0005883a 	mov	r2,zero
    43b4:	003f5206 	br	4100 <__alt_data_end+0xf8004100>
    43b8:	90a4703a 	and	r18,r18,r2
    43bc:	903f4e26 	beq	r18,zero,40f8 <__alt_data_end+0xf80040f8>
    43c0:	003f4a06 	br	40ec <__alt_data_end+0xf80040ec>
    43c4:	00800084 	movi	r2,2
    43c8:	10c5c83a 	sub	r2,r2,r3
    43cc:	003f8406 	br	41e0 <__alt_data_end+0xf80041e0>
    43d0:	d9402e17 	ldw	r5,184(sp)
    43d4:	d9002e17 	ldw	r4,184(sp)
    43d8:	ac400043 	ldbu	r17,1(r21)
    43dc:	29400017 	ldw	r5,0(r5)
    43e0:	20800104 	addi	r2,r4,4
    43e4:	d8802e15 	stw	r2,184(sp)
    43e8:	d9402a15 	stw	r5,168(sp)
    43ec:	182b883a 	mov	r21,r3
    43f0:	283e7b0e 	bge	r5,zero,3de0 <__alt_data_end+0xf8003de0>
    43f4:	8c403fcc 	andi	r17,r17,255
    43f8:	017fffc4 	movi	r5,-1
    43fc:	8c40201c 	xori	r17,r17,128
    4400:	d9402a15 	stw	r5,168(sp)
    4404:	8c7fe004 	addi	r17,r17,-128
    4408:	0037d706 	br	2368 <__alt_data_end+0xf8002368>
    440c:	d8c02a17 	ldw	r3,168(sp)
    4410:	18c00084 	addi	r3,r3,2
    4414:	d8c02b15 	stw	r3,172(sp)
    4418:	1805883a 	mov	r2,r3
    441c:	183d970e 	bge	r3,zero,3a7c <__alt_data_end+0xf8003a7c>
    4420:	003fd706 	br	4380 <__alt_data_end+0xf8004380>
    4424:	0005883a 	mov	r2,zero
    4428:	003f8f06 	br	4268 <__alt_data_end+0xf8004268>
    442c:	9080004c 	andi	r2,r18,1
    4430:	103f821e 	bne	r2,zero,423c <__alt_data_end+0xf800423c>
    4434:	d8802117 	ldw	r2,132(sp)
    4438:	1405c83a 	sub	r2,r2,r16
    443c:	d8803315 	stw	r2,204(sp)
    4440:	b47ef426 	beq	r22,r17,4014 <__alt_data_end+0xf8004014>
    4444:	dd802617 	ldw	r22,152(sp)
    4448:	003f1206 	br	4094 <__alt_data_end+0xf8004094>
    444c:	d8c02b03 	ldbu	r3,172(sp)
    4450:	d8c02785 	stb	r3,158(sp)
    4454:	0038df06 	br	27d4 <__alt_data_end+0xf80027d4>
    4458:	d8c02b03 	ldbu	r3,172(sp)
    445c:	d8c02785 	stb	r3,158(sp)
    4460:	0038aa06 	br	270c <__alt_data_end+0xf800270c>
    4464:	d8c02b03 	ldbu	r3,172(sp)
    4468:	d8c02785 	stb	r3,158(sp)
    446c:	003a4306 	br	2d7c <__alt_data_end+0xf8002d7c>
    4470:	d8c02b03 	ldbu	r3,172(sp)
    4474:	d8c02785 	stb	r3,158(sp)
    4478:	003af506 	br	3050 <__alt_data_end+0xf8003050>
    447c:	0005883a 	mov	r2,zero
    4480:	003d7b06 	br	3a70 <__alt_data_end+0xf8003a70>
    4484:	d8802344 	addi	r2,sp,141
    4488:	003f1006 	br	40cc <__alt_data_end+0xf80040cc>
    448c:	d8c02b03 	ldbu	r3,172(sp)
    4490:	d8c02785 	stb	r3,158(sp)
    4494:	0038fd06 	br	288c <__alt_data_end+0xf800288c>
    4498:	d8c02b03 	ldbu	r3,172(sp)
    449c:	d8c02785 	stb	r3,158(sp)
    44a0:	003a9706 	br	2f00 <__alt_data_end+0xf8002f00>
    44a4:	d8c02b03 	ldbu	r3,172(sp)
    44a8:	d8c02785 	stb	r3,158(sp)
    44ac:	003a1806 	br	2d10 <__alt_data_end+0xf8002d10>
    44b0:	d8c02b03 	ldbu	r3,172(sp)
    44b4:	d8c02785 	stb	r3,158(sp)
    44b8:	003abe06 	br	2fb4 <__alt_data_end+0xf8002fb4>

000044bc <__vfprintf_internal>:
    44bc:	00800074 	movhi	r2,1
    44c0:	10908304 	addi	r2,r2,16908
    44c4:	300f883a 	mov	r7,r6
    44c8:	280d883a 	mov	r6,r5
    44cc:	200b883a 	mov	r5,r4
    44d0:	11000017 	ldw	r4,0(r2)
    44d4:	00021e01 	jmpi	21e0 <___vfprintf_internal_r>

000044d8 <__sbprintf>:
    44d8:	2880030b 	ldhu	r2,12(r5)
    44dc:	2ac01917 	ldw	r11,100(r5)
    44e0:	2a80038b 	ldhu	r10,14(r5)
    44e4:	2a400717 	ldw	r9,28(r5)
    44e8:	2a000917 	ldw	r8,36(r5)
    44ec:	defee204 	addi	sp,sp,-1144
    44f0:	00c10004 	movi	r3,1024
    44f4:	dc011a15 	stw	r16,1128(sp)
    44f8:	10bfff4c 	andi	r2,r2,65533
    44fc:	2821883a 	mov	r16,r5
    4500:	d8cb883a 	add	r5,sp,r3
    4504:	dc811c15 	stw	r18,1136(sp)
    4508:	dc411b15 	stw	r17,1132(sp)
    450c:	dfc11d15 	stw	ra,1140(sp)
    4510:	2025883a 	mov	r18,r4
    4514:	d881030d 	sth	r2,1036(sp)
    4518:	dac11915 	stw	r11,1124(sp)
    451c:	da81038d 	sth	r10,1038(sp)
    4520:	da410715 	stw	r9,1052(sp)
    4524:	da010915 	stw	r8,1060(sp)
    4528:	dec10015 	stw	sp,1024(sp)
    452c:	dec10415 	stw	sp,1040(sp)
    4530:	d8c10215 	stw	r3,1032(sp)
    4534:	d8c10515 	stw	r3,1044(sp)
    4538:	d8010615 	stw	zero,1048(sp)
    453c:	00021e00 	call	21e0 <___vfprintf_internal_r>
    4540:	1023883a 	mov	r17,r2
    4544:	10000416 	blt	r2,zero,4558 <__sbprintf+0x80>
    4548:	d9410004 	addi	r5,sp,1024
    454c:	9009883a 	mov	r4,r18
    4550:	00061b40 	call	61b4 <_fflush_r>
    4554:	10000d1e 	bne	r2,zero,458c <__sbprintf+0xb4>
    4558:	d881030b 	ldhu	r2,1036(sp)
    455c:	1080100c 	andi	r2,r2,64
    4560:	10000326 	beq	r2,zero,4570 <__sbprintf+0x98>
    4564:	8080030b 	ldhu	r2,12(r16)
    4568:	10801014 	ori	r2,r2,64
    456c:	8080030d 	sth	r2,12(r16)
    4570:	8805883a 	mov	r2,r17
    4574:	dfc11d17 	ldw	ra,1140(sp)
    4578:	dc811c17 	ldw	r18,1136(sp)
    457c:	dc411b17 	ldw	r17,1132(sp)
    4580:	dc011a17 	ldw	r16,1128(sp)
    4584:	dec11e04 	addi	sp,sp,1144
    4588:	f800283a 	ret
    458c:	047fffc4 	movi	r17,-1
    4590:	003ff106 	br	4558 <__alt_data_end+0xf8004558>

00004594 <__swsetup_r>:
    4594:	00800074 	movhi	r2,1
    4598:	defffd04 	addi	sp,sp,-12
    459c:	10908304 	addi	r2,r2,16908
    45a0:	dc400115 	stw	r17,4(sp)
    45a4:	2023883a 	mov	r17,r4
    45a8:	11000017 	ldw	r4,0(r2)
    45ac:	dc000015 	stw	r16,0(sp)
    45b0:	dfc00215 	stw	ra,8(sp)
    45b4:	2821883a 	mov	r16,r5
    45b8:	20000226 	beq	r4,zero,45c4 <__swsetup_r+0x30>
    45bc:	20800e17 	ldw	r2,56(r4)
    45c0:	10003126 	beq	r2,zero,4688 <__swsetup_r+0xf4>
    45c4:	8080030b 	ldhu	r2,12(r16)
    45c8:	10c0020c 	andi	r3,r2,8
    45cc:	1009883a 	mov	r4,r2
    45d0:	18000f26 	beq	r3,zero,4610 <__swsetup_r+0x7c>
    45d4:	80c00417 	ldw	r3,16(r16)
    45d8:	18001526 	beq	r3,zero,4630 <__swsetup_r+0x9c>
    45dc:	1100004c 	andi	r4,r2,1
    45e0:	20001c1e 	bne	r4,zero,4654 <__swsetup_r+0xc0>
    45e4:	1080008c 	andi	r2,r2,2
    45e8:	1000291e 	bne	r2,zero,4690 <__swsetup_r+0xfc>
    45ec:	80800517 	ldw	r2,20(r16)
    45f0:	80800215 	stw	r2,8(r16)
    45f4:	18001c26 	beq	r3,zero,4668 <__swsetup_r+0xd4>
    45f8:	0005883a 	mov	r2,zero
    45fc:	dfc00217 	ldw	ra,8(sp)
    4600:	dc400117 	ldw	r17,4(sp)
    4604:	dc000017 	ldw	r16,0(sp)
    4608:	dec00304 	addi	sp,sp,12
    460c:	f800283a 	ret
    4610:	2080040c 	andi	r2,r4,16
    4614:	10002e26 	beq	r2,zero,46d0 <__swsetup_r+0x13c>
    4618:	2080010c 	andi	r2,r4,4
    461c:	10001e1e 	bne	r2,zero,4698 <__swsetup_r+0x104>
    4620:	80c00417 	ldw	r3,16(r16)
    4624:	20800214 	ori	r2,r4,8
    4628:	8080030d 	sth	r2,12(r16)
    462c:	183feb1e 	bne	r3,zero,45dc <__alt_data_end+0xf80045dc>
    4630:	1100a00c 	andi	r4,r2,640
    4634:	01408004 	movi	r5,512
    4638:	217fe826 	beq	r4,r5,45dc <__alt_data_end+0xf80045dc>
    463c:	800b883a 	mov	r5,r16
    4640:	8809883a 	mov	r4,r17
    4644:	00071500 	call	7150 <__smakebuf_r>
    4648:	8080030b 	ldhu	r2,12(r16)
    464c:	80c00417 	ldw	r3,16(r16)
    4650:	003fe206 	br	45dc <__alt_data_end+0xf80045dc>
    4654:	80800517 	ldw	r2,20(r16)
    4658:	80000215 	stw	zero,8(r16)
    465c:	0085c83a 	sub	r2,zero,r2
    4660:	80800615 	stw	r2,24(r16)
    4664:	183fe41e 	bne	r3,zero,45f8 <__alt_data_end+0xf80045f8>
    4668:	80c0030b 	ldhu	r3,12(r16)
    466c:	0005883a 	mov	r2,zero
    4670:	1900200c 	andi	r4,r3,128
    4674:	203fe126 	beq	r4,zero,45fc <__alt_data_end+0xf80045fc>
    4678:	18c01014 	ori	r3,r3,64
    467c:	80c0030d 	sth	r3,12(r16)
    4680:	00bfffc4 	movi	r2,-1
    4684:	003fdd06 	br	45fc <__alt_data_end+0xf80045fc>
    4688:	00065a00 	call	65a0 <__sinit>
    468c:	003fcd06 	br	45c4 <__alt_data_end+0xf80045c4>
    4690:	0005883a 	mov	r2,zero
    4694:	003fd606 	br	45f0 <__alt_data_end+0xf80045f0>
    4698:	81400c17 	ldw	r5,48(r16)
    469c:	28000626 	beq	r5,zero,46b8 <__swsetup_r+0x124>
    46a0:	80801004 	addi	r2,r16,64
    46a4:	28800326 	beq	r5,r2,46b4 <__swsetup_r+0x120>
    46a8:	8809883a 	mov	r4,r17
    46ac:	00067140 	call	6714 <_free_r>
    46b0:	8100030b 	ldhu	r4,12(r16)
    46b4:	80000c15 	stw	zero,48(r16)
    46b8:	80c00417 	ldw	r3,16(r16)
    46bc:	00bff6c4 	movi	r2,-37
    46c0:	1108703a 	and	r4,r2,r4
    46c4:	80000115 	stw	zero,4(r16)
    46c8:	80c00015 	stw	r3,0(r16)
    46cc:	003fd506 	br	4624 <__alt_data_end+0xf8004624>
    46d0:	00800244 	movi	r2,9
    46d4:	88800015 	stw	r2,0(r17)
    46d8:	20801014 	ori	r2,r4,64
    46dc:	8080030d 	sth	r2,12(r16)
    46e0:	00bfffc4 	movi	r2,-1
    46e4:	003fc506 	br	45fc <__alt_data_end+0xf80045fc>

000046e8 <quorem>:
    46e8:	defff204 	addi	sp,sp,-56
    46ec:	ddc00b15 	stw	r23,44(sp)
    46f0:	20800417 	ldw	r2,16(r4)
    46f4:	2dc00417 	ldw	r23,16(r5)
    46f8:	dfc00d15 	stw	ra,52(sp)
    46fc:	df000c15 	stw	fp,48(sp)
    4700:	dd800a15 	stw	r22,40(sp)
    4704:	dd400915 	stw	r21,36(sp)
    4708:	dd000815 	stw	r20,32(sp)
    470c:	dcc00715 	stw	r19,28(sp)
    4710:	dc800615 	stw	r18,24(sp)
    4714:	dc400515 	stw	r17,20(sp)
    4718:	dc000415 	stw	r16,16(sp)
    471c:	15c07a16 	blt	r2,r23,4908 <quorem+0x220>
    4720:	bdffffc4 	addi	r23,r23,-1
    4724:	bde9883a 	add	r20,r23,r23
    4728:	28c00504 	addi	r3,r5,20
    472c:	a529883a 	add	r20,r20,r20
    4730:	1d39883a 	add	fp,r3,r20
    4734:	24c00504 	addi	r19,r4,20
    4738:	d9400215 	stw	r5,8(sp)
    473c:	9d29883a 	add	r20,r19,r20
    4740:	e1400017 	ldw	r5,0(fp)
    4744:	d9000015 	stw	r4,0(sp)
    4748:	a1000017 	ldw	r4,0(r20)
    474c:	29400044 	addi	r5,r5,1
    4750:	d8c00115 	stw	r3,4(sp)
    4754:	dd000315 	stw	r20,12(sp)
    4758:	000bdf80 	call	bdf8 <__udivsi3>
    475c:	1025883a 	mov	r18,r2
    4760:	10003026 	beq	r2,zero,4824 <quorem+0x13c>
    4764:	dc400117 	ldw	r17,4(sp)
    4768:	9829883a 	mov	r20,r19
    476c:	002d883a 	mov	r22,zero
    4770:	0021883a 	mov	r16,zero
    4774:	8d400017 	ldw	r21,0(r17)
    4778:	900b883a 	mov	r5,r18
    477c:	8c400104 	addi	r17,r17,4
    4780:	a93fffcc 	andi	r4,r21,65535
    4784:	00017b40 	call	17b4 <__mulsi3>
    4788:	a808d43a 	srli	r4,r21,16
    478c:	900b883a 	mov	r5,r18
    4790:	15ad883a 	add	r22,r2,r22
    4794:	00017b40 	call	17b4 <__mulsi3>
    4798:	a1000017 	ldw	r4,0(r20)
    479c:	b00cd43a 	srli	r6,r22,16
    47a0:	b0ffffcc 	andi	r3,r22,65535
    47a4:	217fffcc 	andi	r5,r4,65535
    47a8:	2c21883a 	add	r16,r5,r16
    47ac:	80c7c83a 	sub	r3,r16,r3
    47b0:	2008d43a 	srli	r4,r4,16
    47b4:	1185883a 	add	r2,r2,r6
    47b8:	1821d43a 	srai	r16,r3,16
    47bc:	117fffcc 	andi	r5,r2,65535
    47c0:	2149c83a 	sub	r4,r4,r5
    47c4:	2421883a 	add	r16,r4,r16
    47c8:	8008943a 	slli	r4,r16,16
    47cc:	18ffffcc 	andi	r3,r3,65535
    47d0:	102cd43a 	srli	r22,r2,16
    47d4:	20c8b03a 	or	r4,r4,r3
    47d8:	a1000015 	stw	r4,0(r20)
    47dc:	8021d43a 	srai	r16,r16,16
    47e0:	a5000104 	addi	r20,r20,4
    47e4:	e47fe32e 	bgeu	fp,r17,4774 <__alt_data_end+0xf8004774>
    47e8:	d8c00317 	ldw	r3,12(sp)
    47ec:	18800017 	ldw	r2,0(r3)
    47f0:	10000c1e 	bne	r2,zero,4824 <quorem+0x13c>
    47f4:	18bfff04 	addi	r2,r3,-4
    47f8:	9880082e 	bgeu	r19,r2,481c <quorem+0x134>
    47fc:	18ffff17 	ldw	r3,-4(r3)
    4800:	18000326 	beq	r3,zero,4810 <quorem+0x128>
    4804:	00000506 	br	481c <quorem+0x134>
    4808:	10c00017 	ldw	r3,0(r2)
    480c:	1800031e 	bne	r3,zero,481c <quorem+0x134>
    4810:	10bfff04 	addi	r2,r2,-4
    4814:	bdffffc4 	addi	r23,r23,-1
    4818:	98bffb36 	bltu	r19,r2,4808 <__alt_data_end+0xf8004808>
    481c:	d8c00017 	ldw	r3,0(sp)
    4820:	1dc00415 	stw	r23,16(r3)
    4824:	d9400217 	ldw	r5,8(sp)
    4828:	d9000017 	ldw	r4,0(sp)
    482c:	00081400 	call	8140 <__mcmp>
    4830:	10002816 	blt	r2,zero,48d4 <quorem+0x1ec>
    4834:	dc400117 	ldw	r17,4(sp)
    4838:	94800044 	addi	r18,r18,1
    483c:	980d883a 	mov	r6,r19
    4840:	0007883a 	mov	r3,zero
    4844:	31000017 	ldw	r4,0(r6)
    4848:	89400017 	ldw	r5,0(r17)
    484c:	31800104 	addi	r6,r6,4
    4850:	20bfffcc 	andi	r2,r4,65535
    4854:	10c7883a 	add	r3,r2,r3
    4858:	28bfffcc 	andi	r2,r5,65535
    485c:	1885c83a 	sub	r2,r3,r2
    4860:	280ad43a 	srli	r5,r5,16
    4864:	2008d43a 	srli	r4,r4,16
    4868:	1007d43a 	srai	r3,r2,16
    486c:	10bfffcc 	andi	r2,r2,65535
    4870:	2149c83a 	sub	r4,r4,r5
    4874:	20c9883a 	add	r4,r4,r3
    4878:	200a943a 	slli	r5,r4,16
    487c:	8c400104 	addi	r17,r17,4
    4880:	2007d43a 	srai	r3,r4,16
    4884:	2884b03a 	or	r2,r5,r2
    4888:	30bfff15 	stw	r2,-4(r6)
    488c:	e47fed2e 	bgeu	fp,r17,4844 <__alt_data_end+0xf8004844>
    4890:	bdc5883a 	add	r2,r23,r23
    4894:	1085883a 	add	r2,r2,r2
    4898:	9887883a 	add	r3,r19,r2
    489c:	18800017 	ldw	r2,0(r3)
    48a0:	10000c1e 	bne	r2,zero,48d4 <quorem+0x1ec>
    48a4:	18bfff04 	addi	r2,r3,-4
    48a8:	9880082e 	bgeu	r19,r2,48cc <quorem+0x1e4>
    48ac:	18ffff17 	ldw	r3,-4(r3)
    48b0:	18000326 	beq	r3,zero,48c0 <quorem+0x1d8>
    48b4:	00000506 	br	48cc <quorem+0x1e4>
    48b8:	10c00017 	ldw	r3,0(r2)
    48bc:	1800031e 	bne	r3,zero,48cc <quorem+0x1e4>
    48c0:	10bfff04 	addi	r2,r2,-4
    48c4:	bdffffc4 	addi	r23,r23,-1
    48c8:	98bffb36 	bltu	r19,r2,48b8 <__alt_data_end+0xf80048b8>
    48cc:	d8c00017 	ldw	r3,0(sp)
    48d0:	1dc00415 	stw	r23,16(r3)
    48d4:	9005883a 	mov	r2,r18
    48d8:	dfc00d17 	ldw	ra,52(sp)
    48dc:	df000c17 	ldw	fp,48(sp)
    48e0:	ddc00b17 	ldw	r23,44(sp)
    48e4:	dd800a17 	ldw	r22,40(sp)
    48e8:	dd400917 	ldw	r21,36(sp)
    48ec:	dd000817 	ldw	r20,32(sp)
    48f0:	dcc00717 	ldw	r19,28(sp)
    48f4:	dc800617 	ldw	r18,24(sp)
    48f8:	dc400517 	ldw	r17,20(sp)
    48fc:	dc000417 	ldw	r16,16(sp)
    4900:	dec00e04 	addi	sp,sp,56
    4904:	f800283a 	ret
    4908:	0005883a 	mov	r2,zero
    490c:	003ff206 	br	48d8 <__alt_data_end+0xf80048d8>

00004910 <_dtoa_r>:
    4910:	20801017 	ldw	r2,64(r4)
    4914:	deffde04 	addi	sp,sp,-136
    4918:	df002015 	stw	fp,128(sp)
    491c:	dcc01b15 	stw	r19,108(sp)
    4920:	dc801a15 	stw	r18,104(sp)
    4924:	dc401915 	stw	r17,100(sp)
    4928:	dc001815 	stw	r16,96(sp)
    492c:	dfc02115 	stw	ra,132(sp)
    4930:	ddc01f15 	stw	r23,124(sp)
    4934:	dd801e15 	stw	r22,120(sp)
    4938:	dd401d15 	stw	r21,116(sp)
    493c:	dd001c15 	stw	r20,112(sp)
    4940:	d9c00315 	stw	r7,12(sp)
    4944:	2039883a 	mov	fp,r4
    4948:	3023883a 	mov	r17,r6
    494c:	2825883a 	mov	r18,r5
    4950:	dc002417 	ldw	r16,144(sp)
    4954:	3027883a 	mov	r19,r6
    4958:	10000826 	beq	r2,zero,497c <_dtoa_r+0x6c>
    495c:	21801117 	ldw	r6,68(r4)
    4960:	00c00044 	movi	r3,1
    4964:	100b883a 	mov	r5,r2
    4968:	1986983a 	sll	r3,r3,r6
    496c:	11800115 	stw	r6,4(r2)
    4970:	10c00215 	stw	r3,8(r2)
    4974:	00078640 	call	7864 <_Bfree>
    4978:	e0001015 	stw	zero,64(fp)
    497c:	88002e16 	blt	r17,zero,4a38 <_dtoa_r+0x128>
    4980:	80000015 	stw	zero,0(r16)
    4984:	889ffc2c 	andhi	r2,r17,32752
    4988:	00dffc34 	movhi	r3,32752
    498c:	10c01c26 	beq	r2,r3,4a00 <_dtoa_r+0xf0>
    4990:	000d883a 	mov	r6,zero
    4994:	000f883a 	mov	r7,zero
    4998:	9009883a 	mov	r4,r18
    499c:	980b883a 	mov	r5,r19
    49a0:	000d1300 	call	d130 <__eqdf2>
    49a4:	10002b1e 	bne	r2,zero,4a54 <_dtoa_r+0x144>
    49a8:	d9c02317 	ldw	r7,140(sp)
    49ac:	00800044 	movi	r2,1
    49b0:	38800015 	stw	r2,0(r7)
    49b4:	d8802517 	ldw	r2,148(sp)
    49b8:	10019e26 	beq	r2,zero,5034 <_dtoa_r+0x724>
    49bc:	d8c02517 	ldw	r3,148(sp)
    49c0:	00800074 	movhi	r2,1
    49c4:	10883d44 	addi	r2,r2,8437
    49c8:	18800015 	stw	r2,0(r3)
    49cc:	10bfffc4 	addi	r2,r2,-1
    49d0:	dfc02117 	ldw	ra,132(sp)
    49d4:	df002017 	ldw	fp,128(sp)
    49d8:	ddc01f17 	ldw	r23,124(sp)
    49dc:	dd801e17 	ldw	r22,120(sp)
    49e0:	dd401d17 	ldw	r21,116(sp)
    49e4:	dd001c17 	ldw	r20,112(sp)
    49e8:	dcc01b17 	ldw	r19,108(sp)
    49ec:	dc801a17 	ldw	r18,104(sp)
    49f0:	dc401917 	ldw	r17,100(sp)
    49f4:	dc001817 	ldw	r16,96(sp)
    49f8:	dec02204 	addi	sp,sp,136
    49fc:	f800283a 	ret
    4a00:	d8c02317 	ldw	r3,140(sp)
    4a04:	0089c3c4 	movi	r2,9999
    4a08:	18800015 	stw	r2,0(r3)
    4a0c:	90017726 	beq	r18,zero,4fec <_dtoa_r+0x6dc>
    4a10:	00800074 	movhi	r2,1
    4a14:	10884904 	addi	r2,r2,8484
    4a18:	d9002517 	ldw	r4,148(sp)
    4a1c:	203fec26 	beq	r4,zero,49d0 <__alt_data_end+0xf80049d0>
    4a20:	10c000c7 	ldb	r3,3(r2)
    4a24:	1801781e 	bne	r3,zero,5008 <_dtoa_r+0x6f8>
    4a28:	10c000c4 	addi	r3,r2,3
    4a2c:	d9802517 	ldw	r6,148(sp)
    4a30:	30c00015 	stw	r3,0(r6)
    4a34:	003fe606 	br	49d0 <__alt_data_end+0xf80049d0>
    4a38:	04e00034 	movhi	r19,32768
    4a3c:	9cffffc4 	addi	r19,r19,-1
    4a40:	00800044 	movi	r2,1
    4a44:	8ce6703a 	and	r19,r17,r19
    4a48:	80800015 	stw	r2,0(r16)
    4a4c:	9823883a 	mov	r17,r19
    4a50:	003fcc06 	br	4984 <__alt_data_end+0xf8004984>
    4a54:	d8800204 	addi	r2,sp,8
    4a58:	d8800015 	stw	r2,0(sp)
    4a5c:	d9c00104 	addi	r7,sp,4
    4a60:	900b883a 	mov	r5,r18
    4a64:	980d883a 	mov	r6,r19
    4a68:	e009883a 	mov	r4,fp
    4a6c:	8820d53a 	srli	r16,r17,20
    4a70:	000850c0 	call	850c <__d2b>
    4a74:	d8800915 	stw	r2,36(sp)
    4a78:	8001651e 	bne	r16,zero,5010 <_dtoa_r+0x700>
    4a7c:	dd800217 	ldw	r22,8(sp)
    4a80:	dc000117 	ldw	r16,4(sp)
    4a84:	00800804 	movi	r2,32
    4a88:	b421883a 	add	r16,r22,r16
    4a8c:	80c10c84 	addi	r3,r16,1074
    4a90:	10c2d10e 	bge	r2,r3,55d8 <_dtoa_r+0xcc8>
    4a94:	00801004 	movi	r2,64
    4a98:	81010484 	addi	r4,r16,1042
    4a9c:	10c7c83a 	sub	r3,r2,r3
    4aa0:	9108d83a 	srl	r4,r18,r4
    4aa4:	88e2983a 	sll	r17,r17,r3
    4aa8:	2448b03a 	or	r4,r4,r17
    4aac:	000e64c0 	call	e64c <__floatunsidf>
    4ab0:	017f8434 	movhi	r5,65040
    4ab4:	01800044 	movi	r6,1
    4ab8:	1009883a 	mov	r4,r2
    4abc:	194b883a 	add	r5,r3,r5
    4ac0:	843fffc4 	addi	r16,r16,-1
    4ac4:	d9801115 	stw	r6,68(sp)
    4ac8:	000d883a 	mov	r6,zero
    4acc:	01cffe34 	movhi	r7,16376
    4ad0:	000dbf40 	call	dbf4 <__subdf3>
    4ad4:	0198dbf4 	movhi	r6,25455
    4ad8:	01cff4f4 	movhi	r7,16339
    4adc:	3190d844 	addi	r6,r6,17249
    4ae0:	39e1e9c4 	addi	r7,r7,-30809
    4ae4:	1009883a 	mov	r4,r2
    4ae8:	180b883a 	mov	r5,r3
    4aec:	000d3880 	call	d388 <__muldf3>
    4af0:	01a2d874 	movhi	r6,35681
    4af4:	01cff1f4 	movhi	r7,16327
    4af8:	31b22cc4 	addi	r6,r6,-14157
    4afc:	39e28a04 	addi	r7,r7,-30168
    4b00:	180b883a 	mov	r5,r3
    4b04:	1009883a 	mov	r4,r2
    4b08:	000beb40 	call	beb4 <__adddf3>
    4b0c:	8009883a 	mov	r4,r16
    4b10:	1029883a 	mov	r20,r2
    4b14:	1823883a 	mov	r17,r3
    4b18:	000e5700 	call	e570 <__floatsidf>
    4b1c:	019427f4 	movhi	r6,20639
    4b20:	01cff4f4 	movhi	r7,16339
    4b24:	319e7ec4 	addi	r6,r6,31227
    4b28:	39d104c4 	addi	r7,r7,17427
    4b2c:	1009883a 	mov	r4,r2
    4b30:	180b883a 	mov	r5,r3
    4b34:	000d3880 	call	d388 <__muldf3>
    4b38:	100d883a 	mov	r6,r2
    4b3c:	180f883a 	mov	r7,r3
    4b40:	a009883a 	mov	r4,r20
    4b44:	880b883a 	mov	r5,r17
    4b48:	000beb40 	call	beb4 <__adddf3>
    4b4c:	1009883a 	mov	r4,r2
    4b50:	180b883a 	mov	r5,r3
    4b54:	1029883a 	mov	r20,r2
    4b58:	1823883a 	mov	r17,r3
    4b5c:	000e4f00 	call	e4f0 <__fixdfsi>
    4b60:	000d883a 	mov	r6,zero
    4b64:	000f883a 	mov	r7,zero
    4b68:	a009883a 	mov	r4,r20
    4b6c:	880b883a 	mov	r5,r17
    4b70:	d8800515 	stw	r2,20(sp)
    4b74:	000d2940 	call	d294 <__ledf2>
    4b78:	10028716 	blt	r2,zero,5598 <_dtoa_r+0xc88>
    4b7c:	d8c00517 	ldw	r3,20(sp)
    4b80:	00800584 	movi	r2,22
    4b84:	10c27536 	bltu	r2,r3,555c <_dtoa_r+0xc4c>
    4b88:	180490fa 	slli	r2,r3,3
    4b8c:	00c00074 	movhi	r3,1
    4b90:	18c86404 	addi	r3,r3,8592
    4b94:	1885883a 	add	r2,r3,r2
    4b98:	11000017 	ldw	r4,0(r2)
    4b9c:	11400117 	ldw	r5,4(r2)
    4ba0:	900d883a 	mov	r6,r18
    4ba4:	980f883a 	mov	r7,r19
    4ba8:	000d1b80 	call	d1b8 <__gedf2>
    4bac:	00828d0e 	bge	zero,r2,55e4 <_dtoa_r+0xcd4>
    4bb0:	d9000517 	ldw	r4,20(sp)
    4bb4:	d8000e15 	stw	zero,56(sp)
    4bb8:	213fffc4 	addi	r4,r4,-1
    4bbc:	d9000515 	stw	r4,20(sp)
    4bc0:	b42dc83a 	sub	r22,r22,r16
    4bc4:	b5bfffc4 	addi	r22,r22,-1
    4bc8:	b0026f16 	blt	r22,zero,5588 <_dtoa_r+0xc78>
    4bcc:	d8000815 	stw	zero,32(sp)
    4bd0:	d9c00517 	ldw	r7,20(sp)
    4bd4:	38026416 	blt	r7,zero,5568 <_dtoa_r+0xc58>
    4bd8:	b1ed883a 	add	r22,r22,r7
    4bdc:	d9c00d15 	stw	r7,52(sp)
    4be0:	d8000a15 	stw	zero,40(sp)
    4be4:	d9800317 	ldw	r6,12(sp)
    4be8:	00800244 	movi	r2,9
    4bec:	11811436 	bltu	r2,r6,5040 <_dtoa_r+0x730>
    4bf0:	00800144 	movi	r2,5
    4bf4:	1184e10e 	bge	r2,r6,5f7c <_dtoa_r+0x166c>
    4bf8:	31bfff04 	addi	r6,r6,-4
    4bfc:	d9800315 	stw	r6,12(sp)
    4c00:	0023883a 	mov	r17,zero
    4c04:	d9800317 	ldw	r6,12(sp)
    4c08:	008000c4 	movi	r2,3
    4c0c:	30836726 	beq	r6,r2,59ac <_dtoa_r+0x109c>
    4c10:	1183410e 	bge	r2,r6,5918 <_dtoa_r+0x1008>
    4c14:	d9c00317 	ldw	r7,12(sp)
    4c18:	00800104 	movi	r2,4
    4c1c:	38827c26 	beq	r7,r2,5610 <_dtoa_r+0xd00>
    4c20:	00800144 	movi	r2,5
    4c24:	3884c41e 	bne	r7,r2,5f38 <_dtoa_r+0x1628>
    4c28:	00800044 	movi	r2,1
    4c2c:	d8800b15 	stw	r2,44(sp)
    4c30:	d8c00517 	ldw	r3,20(sp)
    4c34:	d9002217 	ldw	r4,136(sp)
    4c38:	1907883a 	add	r3,r3,r4
    4c3c:	19800044 	addi	r6,r3,1
    4c40:	d8c00c15 	stw	r3,48(sp)
    4c44:	d9800615 	stw	r6,24(sp)
    4c48:	0183a40e 	bge	zero,r6,5adc <_dtoa_r+0x11cc>
    4c4c:	d9800617 	ldw	r6,24(sp)
    4c50:	3021883a 	mov	r16,r6
    4c54:	e0001115 	stw	zero,68(fp)
    4c58:	008005c4 	movi	r2,23
    4c5c:	1184c92e 	bgeu	r2,r6,5f84 <_dtoa_r+0x1674>
    4c60:	00c00044 	movi	r3,1
    4c64:	00800104 	movi	r2,4
    4c68:	1085883a 	add	r2,r2,r2
    4c6c:	11000504 	addi	r4,r2,20
    4c70:	180b883a 	mov	r5,r3
    4c74:	18c00044 	addi	r3,r3,1
    4c78:	313ffb2e 	bgeu	r6,r4,4c68 <__alt_data_end+0xf8004c68>
    4c7c:	e1401115 	stw	r5,68(fp)
    4c80:	e009883a 	mov	r4,fp
    4c84:	00077bc0 	call	77bc <_Balloc>
    4c88:	d8800715 	stw	r2,28(sp)
    4c8c:	e0801015 	stw	r2,64(fp)
    4c90:	00800384 	movi	r2,14
    4c94:	1400f736 	bltu	r2,r16,5074 <_dtoa_r+0x764>
    4c98:	8800f626 	beq	r17,zero,5074 <_dtoa_r+0x764>
    4c9c:	d9c00517 	ldw	r7,20(sp)
    4ca0:	01c39a0e 	bge	zero,r7,5b0c <_dtoa_r+0x11fc>
    4ca4:	388003cc 	andi	r2,r7,15
    4ca8:	100490fa 	slli	r2,r2,3
    4cac:	382bd13a 	srai	r21,r7,4
    4cb0:	00c00074 	movhi	r3,1
    4cb4:	18c86404 	addi	r3,r3,8592
    4cb8:	1885883a 	add	r2,r3,r2
    4cbc:	a8c0040c 	andi	r3,r21,16
    4cc0:	12400017 	ldw	r9,0(r2)
    4cc4:	12000117 	ldw	r8,4(r2)
    4cc8:	18037926 	beq	r3,zero,5ab0 <_dtoa_r+0x11a0>
    4ccc:	00800074 	movhi	r2,1
    4cd0:	10885a04 	addi	r2,r2,8552
    4cd4:	11800817 	ldw	r6,32(r2)
    4cd8:	11c00917 	ldw	r7,36(r2)
    4cdc:	9009883a 	mov	r4,r18
    4ce0:	980b883a 	mov	r5,r19
    4ce4:	da001715 	stw	r8,92(sp)
    4ce8:	da401615 	stw	r9,88(sp)
    4cec:	000c7600 	call	c760 <__divdf3>
    4cf0:	da001717 	ldw	r8,92(sp)
    4cf4:	da401617 	ldw	r9,88(sp)
    4cf8:	ad4003cc 	andi	r21,r21,15
    4cfc:	040000c4 	movi	r16,3
    4d00:	1023883a 	mov	r17,r2
    4d04:	1829883a 	mov	r20,r3
    4d08:	a8001126 	beq	r21,zero,4d50 <_dtoa_r+0x440>
    4d0c:	05c00074 	movhi	r23,1
    4d10:	bdc85a04 	addi	r23,r23,8552
    4d14:	4805883a 	mov	r2,r9
    4d18:	4007883a 	mov	r3,r8
    4d1c:	a980004c 	andi	r6,r21,1
    4d20:	1009883a 	mov	r4,r2
    4d24:	a82bd07a 	srai	r21,r21,1
    4d28:	180b883a 	mov	r5,r3
    4d2c:	30000426 	beq	r6,zero,4d40 <_dtoa_r+0x430>
    4d30:	b9800017 	ldw	r6,0(r23)
    4d34:	b9c00117 	ldw	r7,4(r23)
    4d38:	84000044 	addi	r16,r16,1
    4d3c:	000d3880 	call	d388 <__muldf3>
    4d40:	bdc00204 	addi	r23,r23,8
    4d44:	a83ff51e 	bne	r21,zero,4d1c <__alt_data_end+0xf8004d1c>
    4d48:	1013883a 	mov	r9,r2
    4d4c:	1811883a 	mov	r8,r3
    4d50:	480d883a 	mov	r6,r9
    4d54:	400f883a 	mov	r7,r8
    4d58:	8809883a 	mov	r4,r17
    4d5c:	a00b883a 	mov	r5,r20
    4d60:	000c7600 	call	c760 <__divdf3>
    4d64:	d8800f15 	stw	r2,60(sp)
    4d68:	d8c01015 	stw	r3,64(sp)
    4d6c:	d8c00e17 	ldw	r3,56(sp)
    4d70:	18000626 	beq	r3,zero,4d8c <_dtoa_r+0x47c>
    4d74:	d9000f17 	ldw	r4,60(sp)
    4d78:	d9401017 	ldw	r5,64(sp)
    4d7c:	000d883a 	mov	r6,zero
    4d80:	01cffc34 	movhi	r7,16368
    4d84:	000d2940 	call	d294 <__ledf2>
    4d88:	10040b16 	blt	r2,zero,5db8 <_dtoa_r+0x14a8>
    4d8c:	8009883a 	mov	r4,r16
    4d90:	000e5700 	call	e570 <__floatsidf>
    4d94:	d9800f17 	ldw	r6,60(sp)
    4d98:	d9c01017 	ldw	r7,64(sp)
    4d9c:	1009883a 	mov	r4,r2
    4da0:	180b883a 	mov	r5,r3
    4da4:	000d3880 	call	d388 <__muldf3>
    4da8:	000d883a 	mov	r6,zero
    4dac:	01d00734 	movhi	r7,16412
    4db0:	1009883a 	mov	r4,r2
    4db4:	180b883a 	mov	r5,r3
    4db8:	000beb40 	call	beb4 <__adddf3>
    4dbc:	1021883a 	mov	r16,r2
    4dc0:	d8800617 	ldw	r2,24(sp)
    4dc4:	047f3034 	movhi	r17,64704
    4dc8:	1c63883a 	add	r17,r3,r17
    4dcc:	10031826 	beq	r2,zero,5a30 <_dtoa_r+0x1120>
    4dd0:	d8c00517 	ldw	r3,20(sp)
    4dd4:	db000617 	ldw	r12,24(sp)
    4dd8:	d8c01315 	stw	r3,76(sp)
    4ddc:	d9000b17 	ldw	r4,44(sp)
    4de0:	20038f26 	beq	r4,zero,5c20 <_dtoa_r+0x1310>
    4de4:	60bfffc4 	addi	r2,r12,-1
    4de8:	100490fa 	slli	r2,r2,3
    4dec:	00c00074 	movhi	r3,1
    4df0:	18c86404 	addi	r3,r3,8592
    4df4:	1885883a 	add	r2,r3,r2
    4df8:	11800017 	ldw	r6,0(r2)
    4dfc:	11c00117 	ldw	r7,4(r2)
    4e00:	d8800717 	ldw	r2,28(sp)
    4e04:	0009883a 	mov	r4,zero
    4e08:	014ff834 	movhi	r5,16352
    4e0c:	db001615 	stw	r12,88(sp)
    4e10:	15c00044 	addi	r23,r2,1
    4e14:	000c7600 	call	c760 <__divdf3>
    4e18:	800d883a 	mov	r6,r16
    4e1c:	880f883a 	mov	r7,r17
    4e20:	1009883a 	mov	r4,r2
    4e24:	180b883a 	mov	r5,r3
    4e28:	000dbf40 	call	dbf4 <__subdf3>
    4e2c:	d9401017 	ldw	r5,64(sp)
    4e30:	d9000f17 	ldw	r4,60(sp)
    4e34:	102b883a 	mov	r21,r2
    4e38:	d8c01215 	stw	r3,72(sp)
    4e3c:	000e4f00 	call	e4f0 <__fixdfsi>
    4e40:	1009883a 	mov	r4,r2
    4e44:	1029883a 	mov	r20,r2
    4e48:	000e5700 	call	e570 <__floatsidf>
    4e4c:	d9000f17 	ldw	r4,60(sp)
    4e50:	d9401017 	ldw	r5,64(sp)
    4e54:	100d883a 	mov	r6,r2
    4e58:	180f883a 	mov	r7,r3
    4e5c:	000dbf40 	call	dbf4 <__subdf3>
    4e60:	1823883a 	mov	r17,r3
    4e64:	d8c00717 	ldw	r3,28(sp)
    4e68:	d9401217 	ldw	r5,72(sp)
    4e6c:	a2000c04 	addi	r8,r20,48
    4e70:	1021883a 	mov	r16,r2
    4e74:	1a000005 	stb	r8,0(r3)
    4e78:	800d883a 	mov	r6,r16
    4e7c:	880f883a 	mov	r7,r17
    4e80:	a809883a 	mov	r4,r21
    4e84:	4029883a 	mov	r20,r8
    4e88:	000d1b80 	call	d1b8 <__gedf2>
    4e8c:	00841d16 	blt	zero,r2,5f04 <_dtoa_r+0x15f4>
    4e90:	800d883a 	mov	r6,r16
    4e94:	880f883a 	mov	r7,r17
    4e98:	0009883a 	mov	r4,zero
    4e9c:	014ffc34 	movhi	r5,16368
    4ea0:	000dbf40 	call	dbf4 <__subdf3>
    4ea4:	d9401217 	ldw	r5,72(sp)
    4ea8:	100d883a 	mov	r6,r2
    4eac:	180f883a 	mov	r7,r3
    4eb0:	a809883a 	mov	r4,r21
    4eb4:	000d1b80 	call	d1b8 <__gedf2>
    4eb8:	db001617 	ldw	r12,88(sp)
    4ebc:	00840e16 	blt	zero,r2,5ef8 <_dtoa_r+0x15e8>
    4ec0:	00800044 	movi	r2,1
    4ec4:	13006b0e 	bge	r2,r12,5074 <_dtoa_r+0x764>
    4ec8:	d9000717 	ldw	r4,28(sp)
    4ecc:	dd800f15 	stw	r22,60(sp)
    4ed0:	dcc01015 	stw	r19,64(sp)
    4ed4:	2319883a 	add	r12,r4,r12
    4ed8:	dcc01217 	ldw	r19,72(sp)
    4edc:	602d883a 	mov	r22,r12
    4ee0:	dc801215 	stw	r18,72(sp)
    4ee4:	b825883a 	mov	r18,r23
    4ee8:	00000906 	br	4f10 <_dtoa_r+0x600>
    4eec:	000dbf40 	call	dbf4 <__subdf3>
    4ef0:	a80d883a 	mov	r6,r21
    4ef4:	980f883a 	mov	r7,r19
    4ef8:	1009883a 	mov	r4,r2
    4efc:	180b883a 	mov	r5,r3
    4f00:	000d2940 	call	d294 <__ledf2>
    4f04:	1003e816 	blt	r2,zero,5ea8 <_dtoa_r+0x1598>
    4f08:	b825883a 	mov	r18,r23
    4f0c:	bd83e926 	beq	r23,r22,5eb4 <_dtoa_r+0x15a4>
    4f10:	a809883a 	mov	r4,r21
    4f14:	980b883a 	mov	r5,r19
    4f18:	000d883a 	mov	r6,zero
    4f1c:	01d00934 	movhi	r7,16420
    4f20:	000d3880 	call	d388 <__muldf3>
    4f24:	000d883a 	mov	r6,zero
    4f28:	01d00934 	movhi	r7,16420
    4f2c:	8009883a 	mov	r4,r16
    4f30:	880b883a 	mov	r5,r17
    4f34:	102b883a 	mov	r21,r2
    4f38:	1827883a 	mov	r19,r3
    4f3c:	000d3880 	call	d388 <__muldf3>
    4f40:	180b883a 	mov	r5,r3
    4f44:	1009883a 	mov	r4,r2
    4f48:	1821883a 	mov	r16,r3
    4f4c:	1023883a 	mov	r17,r2
    4f50:	000e4f00 	call	e4f0 <__fixdfsi>
    4f54:	1009883a 	mov	r4,r2
    4f58:	1029883a 	mov	r20,r2
    4f5c:	000e5700 	call	e570 <__floatsidf>
    4f60:	8809883a 	mov	r4,r17
    4f64:	800b883a 	mov	r5,r16
    4f68:	100d883a 	mov	r6,r2
    4f6c:	180f883a 	mov	r7,r3
    4f70:	000dbf40 	call	dbf4 <__subdf3>
    4f74:	a5000c04 	addi	r20,r20,48
    4f78:	a80d883a 	mov	r6,r21
    4f7c:	980f883a 	mov	r7,r19
    4f80:	1009883a 	mov	r4,r2
    4f84:	180b883a 	mov	r5,r3
    4f88:	95000005 	stb	r20,0(r18)
    4f8c:	1021883a 	mov	r16,r2
    4f90:	1823883a 	mov	r17,r3
    4f94:	000d2940 	call	d294 <__ledf2>
    4f98:	bdc00044 	addi	r23,r23,1
    4f9c:	800d883a 	mov	r6,r16
    4fa0:	880f883a 	mov	r7,r17
    4fa4:	0009883a 	mov	r4,zero
    4fa8:	014ffc34 	movhi	r5,16368
    4fac:	103fcf0e 	bge	r2,zero,4eec <__alt_data_end+0xf8004eec>
    4fb0:	d8c01317 	ldw	r3,76(sp)
    4fb4:	d8c00515 	stw	r3,20(sp)
    4fb8:	d9400917 	ldw	r5,36(sp)
    4fbc:	e009883a 	mov	r4,fp
    4fc0:	00078640 	call	7864 <_Bfree>
    4fc4:	d9000517 	ldw	r4,20(sp)
    4fc8:	d9802317 	ldw	r6,140(sp)
    4fcc:	d9c02517 	ldw	r7,148(sp)
    4fd0:	b8000005 	stb	zero,0(r23)
    4fd4:	20800044 	addi	r2,r4,1
    4fd8:	30800015 	stw	r2,0(r6)
    4fdc:	3802aa26 	beq	r7,zero,5a88 <_dtoa_r+0x1178>
    4fe0:	3dc00015 	stw	r23,0(r7)
    4fe4:	d8800717 	ldw	r2,28(sp)
    4fe8:	003e7906 	br	49d0 <__alt_data_end+0xf80049d0>
    4fec:	00800434 	movhi	r2,16
    4ff0:	10bfffc4 	addi	r2,r2,-1
    4ff4:	88a2703a 	and	r17,r17,r2
    4ff8:	883e851e 	bne	r17,zero,4a10 <__alt_data_end+0xf8004a10>
    4ffc:	00800074 	movhi	r2,1
    5000:	10884604 	addi	r2,r2,8472
    5004:	003e8406 	br	4a18 <__alt_data_end+0xf8004a18>
    5008:	10c00204 	addi	r3,r2,8
    500c:	003e8706 	br	4a2c <__alt_data_end+0xf8004a2c>
    5010:	01400434 	movhi	r5,16
    5014:	297fffc4 	addi	r5,r5,-1
    5018:	994a703a 	and	r5,r19,r5
    501c:	9009883a 	mov	r4,r18
    5020:	843f0044 	addi	r16,r16,-1023
    5024:	294ffc34 	orhi	r5,r5,16368
    5028:	dd800217 	ldw	r22,8(sp)
    502c:	d8001115 	stw	zero,68(sp)
    5030:	003ea506 	br	4ac8 <__alt_data_end+0xf8004ac8>
    5034:	00800074 	movhi	r2,1
    5038:	10883d04 	addi	r2,r2,8436
    503c:	003e6406 	br	49d0 <__alt_data_end+0xf80049d0>
    5040:	e0001115 	stw	zero,68(fp)
    5044:	000b883a 	mov	r5,zero
    5048:	e009883a 	mov	r4,fp
    504c:	00077bc0 	call	77bc <_Balloc>
    5050:	01bfffc4 	movi	r6,-1
    5054:	01c00044 	movi	r7,1
    5058:	d8800715 	stw	r2,28(sp)
    505c:	d9800c15 	stw	r6,48(sp)
    5060:	e0801015 	stw	r2,64(fp)
    5064:	d8000315 	stw	zero,12(sp)
    5068:	d9c00b15 	stw	r7,44(sp)
    506c:	d9800615 	stw	r6,24(sp)
    5070:	d8002215 	stw	zero,136(sp)
    5074:	d8800117 	ldw	r2,4(sp)
    5078:	10008916 	blt	r2,zero,52a0 <_dtoa_r+0x990>
    507c:	d9000517 	ldw	r4,20(sp)
    5080:	00c00384 	movi	r3,14
    5084:	19008616 	blt	r3,r4,52a0 <_dtoa_r+0x990>
    5088:	200490fa 	slli	r2,r4,3
    508c:	00c00074 	movhi	r3,1
    5090:	d9802217 	ldw	r6,136(sp)
    5094:	18c86404 	addi	r3,r3,8592
    5098:	1885883a 	add	r2,r3,r2
    509c:	14000017 	ldw	r16,0(r2)
    50a0:	14400117 	ldw	r17,4(r2)
    50a4:	30016316 	blt	r6,zero,5634 <_dtoa_r+0xd24>
    50a8:	800d883a 	mov	r6,r16
    50ac:	880f883a 	mov	r7,r17
    50b0:	9009883a 	mov	r4,r18
    50b4:	980b883a 	mov	r5,r19
    50b8:	000c7600 	call	c760 <__divdf3>
    50bc:	180b883a 	mov	r5,r3
    50c0:	1009883a 	mov	r4,r2
    50c4:	000e4f00 	call	e4f0 <__fixdfsi>
    50c8:	1009883a 	mov	r4,r2
    50cc:	102b883a 	mov	r21,r2
    50d0:	000e5700 	call	e570 <__floatsidf>
    50d4:	800d883a 	mov	r6,r16
    50d8:	880f883a 	mov	r7,r17
    50dc:	1009883a 	mov	r4,r2
    50e0:	180b883a 	mov	r5,r3
    50e4:	000d3880 	call	d388 <__muldf3>
    50e8:	100d883a 	mov	r6,r2
    50ec:	180f883a 	mov	r7,r3
    50f0:	9009883a 	mov	r4,r18
    50f4:	980b883a 	mov	r5,r19
    50f8:	000dbf40 	call	dbf4 <__subdf3>
    50fc:	d9c00717 	ldw	r7,28(sp)
    5100:	1009883a 	mov	r4,r2
    5104:	a8800c04 	addi	r2,r21,48
    5108:	38800005 	stb	r2,0(r7)
    510c:	3dc00044 	addi	r23,r7,1
    5110:	d9c00617 	ldw	r7,24(sp)
    5114:	01800044 	movi	r6,1
    5118:	180b883a 	mov	r5,r3
    511c:	2005883a 	mov	r2,r4
    5120:	39803826 	beq	r7,r6,5204 <_dtoa_r+0x8f4>
    5124:	000d883a 	mov	r6,zero
    5128:	01d00934 	movhi	r7,16420
    512c:	000d3880 	call	d388 <__muldf3>
    5130:	000d883a 	mov	r6,zero
    5134:	000f883a 	mov	r7,zero
    5138:	1009883a 	mov	r4,r2
    513c:	180b883a 	mov	r5,r3
    5140:	1025883a 	mov	r18,r2
    5144:	1827883a 	mov	r19,r3
    5148:	000d1300 	call	d130 <__eqdf2>
    514c:	103f9a26 	beq	r2,zero,4fb8 <__alt_data_end+0xf8004fb8>
    5150:	d9c00617 	ldw	r7,24(sp)
    5154:	d8c00717 	ldw	r3,28(sp)
    5158:	b829883a 	mov	r20,r23
    515c:	38bfffc4 	addi	r2,r7,-1
    5160:	18ad883a 	add	r22,r3,r2
    5164:	00000a06 	br	5190 <_dtoa_r+0x880>
    5168:	000d3880 	call	d388 <__muldf3>
    516c:	000d883a 	mov	r6,zero
    5170:	000f883a 	mov	r7,zero
    5174:	1009883a 	mov	r4,r2
    5178:	180b883a 	mov	r5,r3
    517c:	1025883a 	mov	r18,r2
    5180:	1827883a 	mov	r19,r3
    5184:	b829883a 	mov	r20,r23
    5188:	000d1300 	call	d130 <__eqdf2>
    518c:	103f8a26 	beq	r2,zero,4fb8 <__alt_data_end+0xf8004fb8>
    5190:	800d883a 	mov	r6,r16
    5194:	880f883a 	mov	r7,r17
    5198:	9009883a 	mov	r4,r18
    519c:	980b883a 	mov	r5,r19
    51a0:	000c7600 	call	c760 <__divdf3>
    51a4:	180b883a 	mov	r5,r3
    51a8:	1009883a 	mov	r4,r2
    51ac:	000e4f00 	call	e4f0 <__fixdfsi>
    51b0:	1009883a 	mov	r4,r2
    51b4:	102b883a 	mov	r21,r2
    51b8:	000e5700 	call	e570 <__floatsidf>
    51bc:	800d883a 	mov	r6,r16
    51c0:	880f883a 	mov	r7,r17
    51c4:	1009883a 	mov	r4,r2
    51c8:	180b883a 	mov	r5,r3
    51cc:	000d3880 	call	d388 <__muldf3>
    51d0:	100d883a 	mov	r6,r2
    51d4:	180f883a 	mov	r7,r3
    51d8:	9009883a 	mov	r4,r18
    51dc:	980b883a 	mov	r5,r19
    51e0:	000dbf40 	call	dbf4 <__subdf3>
    51e4:	aa000c04 	addi	r8,r21,48
    51e8:	a2000005 	stb	r8,0(r20)
    51ec:	000d883a 	mov	r6,zero
    51f0:	01d00934 	movhi	r7,16420
    51f4:	1009883a 	mov	r4,r2
    51f8:	180b883a 	mov	r5,r3
    51fc:	a5c00044 	addi	r23,r20,1
    5200:	b53fd91e 	bne	r22,r20,5168 <__alt_data_end+0xf8005168>
    5204:	100d883a 	mov	r6,r2
    5208:	180f883a 	mov	r7,r3
    520c:	1009883a 	mov	r4,r2
    5210:	180b883a 	mov	r5,r3
    5214:	000beb40 	call	beb4 <__adddf3>
    5218:	100d883a 	mov	r6,r2
    521c:	180f883a 	mov	r7,r3
    5220:	8009883a 	mov	r4,r16
    5224:	880b883a 	mov	r5,r17
    5228:	1027883a 	mov	r19,r2
    522c:	1825883a 	mov	r18,r3
    5230:	000d2940 	call	d294 <__ledf2>
    5234:	10000816 	blt	r2,zero,5258 <_dtoa_r+0x948>
    5238:	980d883a 	mov	r6,r19
    523c:	900f883a 	mov	r7,r18
    5240:	8009883a 	mov	r4,r16
    5244:	880b883a 	mov	r5,r17
    5248:	000d1300 	call	d130 <__eqdf2>
    524c:	103f5a1e 	bne	r2,zero,4fb8 <__alt_data_end+0xf8004fb8>
    5250:	ad40004c 	andi	r21,r21,1
    5254:	a83f5826 	beq	r21,zero,4fb8 <__alt_data_end+0xf8004fb8>
    5258:	bd3fffc3 	ldbu	r20,-1(r23)
    525c:	b8bfffc4 	addi	r2,r23,-1
    5260:	1007883a 	mov	r3,r2
    5264:	01400e44 	movi	r5,57
    5268:	d9800717 	ldw	r6,28(sp)
    526c:	00000506 	br	5284 <_dtoa_r+0x974>
    5270:	18ffffc4 	addi	r3,r3,-1
    5274:	11824726 	beq	r2,r6,5b94 <_dtoa_r+0x1284>
    5278:	1d000003 	ldbu	r20,0(r3)
    527c:	102f883a 	mov	r23,r2
    5280:	10bfffc4 	addi	r2,r2,-1
    5284:	a1003fcc 	andi	r4,r20,255
    5288:	2100201c 	xori	r4,r4,128
    528c:	213fe004 	addi	r4,r4,-128
    5290:	217ff726 	beq	r4,r5,5270 <__alt_data_end+0xf8005270>
    5294:	a2000044 	addi	r8,r20,1
    5298:	12000005 	stb	r8,0(r2)
    529c:	003f4606 	br	4fb8 <__alt_data_end+0xf8004fb8>
    52a0:	d9000b17 	ldw	r4,44(sp)
    52a4:	2000c826 	beq	r4,zero,55c8 <_dtoa_r+0xcb8>
    52a8:	d9800317 	ldw	r6,12(sp)
    52ac:	00c00044 	movi	r3,1
    52b0:	1980f90e 	bge	r3,r6,5698 <_dtoa_r+0xd88>
    52b4:	d8800617 	ldw	r2,24(sp)
    52b8:	d8c00a17 	ldw	r3,40(sp)
    52bc:	157fffc4 	addi	r21,r2,-1
    52c0:	1d41f316 	blt	r3,r21,5a90 <_dtoa_r+0x1180>
    52c4:	1d6bc83a 	sub	r21,r3,r21
    52c8:	d9c00617 	ldw	r7,24(sp)
    52cc:	3802aa16 	blt	r7,zero,5d78 <_dtoa_r+0x1468>
    52d0:	dd000817 	ldw	r20,32(sp)
    52d4:	d8800617 	ldw	r2,24(sp)
    52d8:	d8c00817 	ldw	r3,32(sp)
    52dc:	01400044 	movi	r5,1
    52e0:	e009883a 	mov	r4,fp
    52e4:	1887883a 	add	r3,r3,r2
    52e8:	d8c00815 	stw	r3,32(sp)
    52ec:	b0ad883a 	add	r22,r22,r2
    52f0:	0007bf00 	call	7bf0 <__i2b>
    52f4:	1023883a 	mov	r17,r2
    52f8:	a0000826 	beq	r20,zero,531c <_dtoa_r+0xa0c>
    52fc:	0580070e 	bge	zero,r22,531c <_dtoa_r+0xa0c>
    5300:	a005883a 	mov	r2,r20
    5304:	b500b916 	blt	r22,r20,55ec <_dtoa_r+0xcdc>
    5308:	d9000817 	ldw	r4,32(sp)
    530c:	a0a9c83a 	sub	r20,r20,r2
    5310:	b0adc83a 	sub	r22,r22,r2
    5314:	2089c83a 	sub	r4,r4,r2
    5318:	d9000815 	stw	r4,32(sp)
    531c:	d9800a17 	ldw	r6,40(sp)
    5320:	0181810e 	bge	zero,r6,5928 <_dtoa_r+0x1018>
    5324:	d9c00b17 	ldw	r7,44(sp)
    5328:	3800b326 	beq	r7,zero,55f8 <_dtoa_r+0xce8>
    532c:	a800b226 	beq	r21,zero,55f8 <_dtoa_r+0xce8>
    5330:	880b883a 	mov	r5,r17
    5334:	a80d883a 	mov	r6,r21
    5338:	e009883a 	mov	r4,fp
    533c:	0007eb80 	call	7eb8 <__pow5mult>
    5340:	d9800917 	ldw	r6,36(sp)
    5344:	100b883a 	mov	r5,r2
    5348:	e009883a 	mov	r4,fp
    534c:	1023883a 	mov	r17,r2
    5350:	0007c2c0 	call	7c2c <__multiply>
    5354:	1021883a 	mov	r16,r2
    5358:	d8800a17 	ldw	r2,40(sp)
    535c:	d9400917 	ldw	r5,36(sp)
    5360:	e009883a 	mov	r4,fp
    5364:	1545c83a 	sub	r2,r2,r21
    5368:	d8800a15 	stw	r2,40(sp)
    536c:	00078640 	call	7864 <_Bfree>
    5370:	d8c00a17 	ldw	r3,40(sp)
    5374:	18009f1e 	bne	r3,zero,55f4 <_dtoa_r+0xce4>
    5378:	05c00044 	movi	r23,1
    537c:	e009883a 	mov	r4,fp
    5380:	b80b883a 	mov	r5,r23
    5384:	0007bf00 	call	7bf0 <__i2b>
    5388:	d9000d17 	ldw	r4,52(sp)
    538c:	102b883a 	mov	r21,r2
    5390:	2000ce26 	beq	r4,zero,56cc <_dtoa_r+0xdbc>
    5394:	200d883a 	mov	r6,r4
    5398:	100b883a 	mov	r5,r2
    539c:	e009883a 	mov	r4,fp
    53a0:	0007eb80 	call	7eb8 <__pow5mult>
    53a4:	d9800317 	ldw	r6,12(sp)
    53a8:	102b883a 	mov	r21,r2
    53ac:	b981810e 	bge	r23,r6,59b4 <_dtoa_r+0x10a4>
    53b0:	0027883a 	mov	r19,zero
    53b4:	a8800417 	ldw	r2,16(r21)
    53b8:	05c00804 	movi	r23,32
    53bc:	10800104 	addi	r2,r2,4
    53c0:	1085883a 	add	r2,r2,r2
    53c4:	1085883a 	add	r2,r2,r2
    53c8:	a885883a 	add	r2,r21,r2
    53cc:	11000017 	ldw	r4,0(r2)
    53d0:	0007ad80 	call	7ad8 <__hi0bits>
    53d4:	b885c83a 	sub	r2,r23,r2
    53d8:	1585883a 	add	r2,r2,r22
    53dc:	108007cc 	andi	r2,r2,31
    53e0:	1000b326 	beq	r2,zero,56b0 <_dtoa_r+0xda0>
    53e4:	00c00804 	movi	r3,32
    53e8:	1887c83a 	sub	r3,r3,r2
    53ec:	01000104 	movi	r4,4
    53f0:	20c2cd0e 	bge	r4,r3,5f28 <_dtoa_r+0x1618>
    53f4:	00c00704 	movi	r3,28
    53f8:	1885c83a 	sub	r2,r3,r2
    53fc:	d8c00817 	ldw	r3,32(sp)
    5400:	a0a9883a 	add	r20,r20,r2
    5404:	b0ad883a 	add	r22,r22,r2
    5408:	1887883a 	add	r3,r3,r2
    540c:	d8c00815 	stw	r3,32(sp)
    5410:	d9800817 	ldw	r6,32(sp)
    5414:	0180040e 	bge	zero,r6,5428 <_dtoa_r+0xb18>
    5418:	800b883a 	mov	r5,r16
    541c:	e009883a 	mov	r4,fp
    5420:	0007ff80 	call	7ff8 <__lshift>
    5424:	1021883a 	mov	r16,r2
    5428:	0580050e 	bge	zero,r22,5440 <_dtoa_r+0xb30>
    542c:	a80b883a 	mov	r5,r21
    5430:	b00d883a 	mov	r6,r22
    5434:	e009883a 	mov	r4,fp
    5438:	0007ff80 	call	7ff8 <__lshift>
    543c:	102b883a 	mov	r21,r2
    5440:	d9c00e17 	ldw	r7,56(sp)
    5444:	3801211e 	bne	r7,zero,58cc <_dtoa_r+0xfbc>
    5448:	d9800617 	ldw	r6,24(sp)
    544c:	0181380e 	bge	zero,r6,5930 <_dtoa_r+0x1020>
    5450:	d8c00b17 	ldw	r3,44(sp)
    5454:	1800ab1e 	bne	r3,zero,5704 <_dtoa_r+0xdf4>
    5458:	dc800717 	ldw	r18,28(sp)
    545c:	dcc00617 	ldw	r19,24(sp)
    5460:	9029883a 	mov	r20,r18
    5464:	00000206 	br	5470 <_dtoa_r+0xb60>
    5468:	000788c0 	call	788c <__multadd>
    546c:	1021883a 	mov	r16,r2
    5470:	a80b883a 	mov	r5,r21
    5474:	8009883a 	mov	r4,r16
    5478:	00046e80 	call	46e8 <quorem>
    547c:	10800c04 	addi	r2,r2,48
    5480:	90800005 	stb	r2,0(r18)
    5484:	94800044 	addi	r18,r18,1
    5488:	9507c83a 	sub	r3,r18,r20
    548c:	000f883a 	mov	r7,zero
    5490:	01800284 	movi	r6,10
    5494:	800b883a 	mov	r5,r16
    5498:	e009883a 	mov	r4,fp
    549c:	1cfff216 	blt	r3,r19,5468 <__alt_data_end+0xf8005468>
    54a0:	1011883a 	mov	r8,r2
    54a4:	d8800617 	ldw	r2,24(sp)
    54a8:	0082370e 	bge	zero,r2,5d88 <_dtoa_r+0x1478>
    54ac:	d9000717 	ldw	r4,28(sp)
    54b0:	0025883a 	mov	r18,zero
    54b4:	20af883a 	add	r23,r4,r2
    54b8:	01800044 	movi	r6,1
    54bc:	800b883a 	mov	r5,r16
    54c0:	e009883a 	mov	r4,fp
    54c4:	da001715 	stw	r8,92(sp)
    54c8:	0007ff80 	call	7ff8 <__lshift>
    54cc:	a80b883a 	mov	r5,r21
    54d0:	1009883a 	mov	r4,r2
    54d4:	d8800915 	stw	r2,36(sp)
    54d8:	00081400 	call	8140 <__mcmp>
    54dc:	da001717 	ldw	r8,92(sp)
    54e0:	0081800e 	bge	zero,r2,5ae4 <_dtoa_r+0x11d4>
    54e4:	b93fffc3 	ldbu	r4,-1(r23)
    54e8:	b8bfffc4 	addi	r2,r23,-1
    54ec:	1007883a 	mov	r3,r2
    54f0:	01800e44 	movi	r6,57
    54f4:	d9c00717 	ldw	r7,28(sp)
    54f8:	00000506 	br	5510 <_dtoa_r+0xc00>
    54fc:	18ffffc4 	addi	r3,r3,-1
    5500:	11c12326 	beq	r2,r7,5990 <_dtoa_r+0x1080>
    5504:	19000003 	ldbu	r4,0(r3)
    5508:	102f883a 	mov	r23,r2
    550c:	10bfffc4 	addi	r2,r2,-1
    5510:	21403fcc 	andi	r5,r4,255
    5514:	2940201c 	xori	r5,r5,128
    5518:	297fe004 	addi	r5,r5,-128
    551c:	29bff726 	beq	r5,r6,54fc <__alt_data_end+0xf80054fc>
    5520:	21000044 	addi	r4,r4,1
    5524:	11000005 	stb	r4,0(r2)
    5528:	a80b883a 	mov	r5,r21
    552c:	e009883a 	mov	r4,fp
    5530:	00078640 	call	7864 <_Bfree>
    5534:	883ea026 	beq	r17,zero,4fb8 <__alt_data_end+0xf8004fb8>
    5538:	90000426 	beq	r18,zero,554c <_dtoa_r+0xc3c>
    553c:	94400326 	beq	r18,r17,554c <_dtoa_r+0xc3c>
    5540:	900b883a 	mov	r5,r18
    5544:	e009883a 	mov	r4,fp
    5548:	00078640 	call	7864 <_Bfree>
    554c:	880b883a 	mov	r5,r17
    5550:	e009883a 	mov	r4,fp
    5554:	00078640 	call	7864 <_Bfree>
    5558:	003e9706 	br	4fb8 <__alt_data_end+0xf8004fb8>
    555c:	01800044 	movi	r6,1
    5560:	d9800e15 	stw	r6,56(sp)
    5564:	003d9606 	br	4bc0 <__alt_data_end+0xf8004bc0>
    5568:	d8800817 	ldw	r2,32(sp)
    556c:	d8c00517 	ldw	r3,20(sp)
    5570:	d8000d15 	stw	zero,52(sp)
    5574:	10c5c83a 	sub	r2,r2,r3
    5578:	00c9c83a 	sub	r4,zero,r3
    557c:	d8800815 	stw	r2,32(sp)
    5580:	d9000a15 	stw	r4,40(sp)
    5584:	003d9706 	br	4be4 <__alt_data_end+0xf8004be4>
    5588:	05adc83a 	sub	r22,zero,r22
    558c:	dd800815 	stw	r22,32(sp)
    5590:	002d883a 	mov	r22,zero
    5594:	003d8e06 	br	4bd0 <__alt_data_end+0xf8004bd0>
    5598:	d9000517 	ldw	r4,20(sp)
    559c:	000e5700 	call	e570 <__floatsidf>
    55a0:	100d883a 	mov	r6,r2
    55a4:	180f883a 	mov	r7,r3
    55a8:	a009883a 	mov	r4,r20
    55ac:	880b883a 	mov	r5,r17
    55b0:	000d1300 	call	d130 <__eqdf2>
    55b4:	103d7126 	beq	r2,zero,4b7c <__alt_data_end+0xf8004b7c>
    55b8:	d9c00517 	ldw	r7,20(sp)
    55bc:	39ffffc4 	addi	r7,r7,-1
    55c0:	d9c00515 	stw	r7,20(sp)
    55c4:	003d6d06 	br	4b7c <__alt_data_end+0xf8004b7c>
    55c8:	dd400a17 	ldw	r21,40(sp)
    55cc:	dd000817 	ldw	r20,32(sp)
    55d0:	0023883a 	mov	r17,zero
    55d4:	003f4806 	br	52f8 <__alt_data_end+0xf80052f8>
    55d8:	10e3c83a 	sub	r17,r2,r3
    55dc:	9448983a 	sll	r4,r18,r17
    55e0:	003d3206 	br	4aac <__alt_data_end+0xf8004aac>
    55e4:	d8000e15 	stw	zero,56(sp)
    55e8:	003d7506 	br	4bc0 <__alt_data_end+0xf8004bc0>
    55ec:	b005883a 	mov	r2,r22
    55f0:	003f4506 	br	5308 <__alt_data_end+0xf8005308>
    55f4:	dc000915 	stw	r16,36(sp)
    55f8:	d9800a17 	ldw	r6,40(sp)
    55fc:	d9400917 	ldw	r5,36(sp)
    5600:	e009883a 	mov	r4,fp
    5604:	0007eb80 	call	7eb8 <__pow5mult>
    5608:	1021883a 	mov	r16,r2
    560c:	003f5a06 	br	5378 <__alt_data_end+0xf8005378>
    5610:	01c00044 	movi	r7,1
    5614:	d9c00b15 	stw	r7,44(sp)
    5618:	d8802217 	ldw	r2,136(sp)
    561c:	0081280e 	bge	zero,r2,5ac0 <_dtoa_r+0x11b0>
    5620:	100d883a 	mov	r6,r2
    5624:	1021883a 	mov	r16,r2
    5628:	d8800c15 	stw	r2,48(sp)
    562c:	d8800615 	stw	r2,24(sp)
    5630:	003d8806 	br	4c54 <__alt_data_end+0xf8004c54>
    5634:	d8800617 	ldw	r2,24(sp)
    5638:	00be9b16 	blt	zero,r2,50a8 <__alt_data_end+0xf80050a8>
    563c:	10010f1e 	bne	r2,zero,5a7c <_dtoa_r+0x116c>
    5640:	880b883a 	mov	r5,r17
    5644:	000d883a 	mov	r6,zero
    5648:	01d00534 	movhi	r7,16404
    564c:	8009883a 	mov	r4,r16
    5650:	000d3880 	call	d388 <__muldf3>
    5654:	900d883a 	mov	r6,r18
    5658:	980f883a 	mov	r7,r19
    565c:	1009883a 	mov	r4,r2
    5660:	180b883a 	mov	r5,r3
    5664:	000d1b80 	call	d1b8 <__gedf2>
    5668:	002b883a 	mov	r21,zero
    566c:	0023883a 	mov	r17,zero
    5670:	1000bf16 	blt	r2,zero,5970 <_dtoa_r+0x1060>
    5674:	d9802217 	ldw	r6,136(sp)
    5678:	ddc00717 	ldw	r23,28(sp)
    567c:	018c303a 	nor	r6,zero,r6
    5680:	d9800515 	stw	r6,20(sp)
    5684:	a80b883a 	mov	r5,r21
    5688:	e009883a 	mov	r4,fp
    568c:	00078640 	call	7864 <_Bfree>
    5690:	883e4926 	beq	r17,zero,4fb8 <__alt_data_end+0xf8004fb8>
    5694:	003fad06 	br	554c <__alt_data_end+0xf800554c>
    5698:	d9c01117 	ldw	r7,68(sp)
    569c:	3801bc26 	beq	r7,zero,5d90 <_dtoa_r+0x1480>
    56a0:	10810cc4 	addi	r2,r2,1075
    56a4:	dd400a17 	ldw	r21,40(sp)
    56a8:	dd000817 	ldw	r20,32(sp)
    56ac:	003f0a06 	br	52d8 <__alt_data_end+0xf80052d8>
    56b0:	00800704 	movi	r2,28
    56b4:	d9000817 	ldw	r4,32(sp)
    56b8:	a0a9883a 	add	r20,r20,r2
    56bc:	b0ad883a 	add	r22,r22,r2
    56c0:	2089883a 	add	r4,r4,r2
    56c4:	d9000815 	stw	r4,32(sp)
    56c8:	003f5106 	br	5410 <__alt_data_end+0xf8005410>
    56cc:	d8c00317 	ldw	r3,12(sp)
    56d0:	b8c1fc0e 	bge	r23,r3,5ec4 <_dtoa_r+0x15b4>
    56d4:	0027883a 	mov	r19,zero
    56d8:	b805883a 	mov	r2,r23
    56dc:	003f3e06 	br	53d8 <__alt_data_end+0xf80053d8>
    56e0:	880b883a 	mov	r5,r17
    56e4:	e009883a 	mov	r4,fp
    56e8:	000f883a 	mov	r7,zero
    56ec:	01800284 	movi	r6,10
    56f0:	000788c0 	call	788c <__multadd>
    56f4:	d9000c17 	ldw	r4,48(sp)
    56f8:	1023883a 	mov	r17,r2
    56fc:	0102040e 	bge	zero,r4,5f10 <_dtoa_r+0x1600>
    5700:	d9000615 	stw	r4,24(sp)
    5704:	0500050e 	bge	zero,r20,571c <_dtoa_r+0xe0c>
    5708:	880b883a 	mov	r5,r17
    570c:	a00d883a 	mov	r6,r20
    5710:	e009883a 	mov	r4,fp
    5714:	0007ff80 	call	7ff8 <__lshift>
    5718:	1023883a 	mov	r17,r2
    571c:	9801241e 	bne	r19,zero,5bb0 <_dtoa_r+0x12a0>
    5720:	8829883a 	mov	r20,r17
    5724:	d9000617 	ldw	r4,24(sp)
    5728:	dcc00717 	ldw	r19,28(sp)
    572c:	9480004c 	andi	r18,r18,1
    5730:	20bfffc4 	addi	r2,r4,-1
    5734:	9885883a 	add	r2,r19,r2
    5738:	d8800415 	stw	r2,16(sp)
    573c:	dc800615 	stw	r18,24(sp)
    5740:	a80b883a 	mov	r5,r21
    5744:	8009883a 	mov	r4,r16
    5748:	00046e80 	call	46e8 <quorem>
    574c:	880b883a 	mov	r5,r17
    5750:	8009883a 	mov	r4,r16
    5754:	102f883a 	mov	r23,r2
    5758:	00081400 	call	8140 <__mcmp>
    575c:	a80b883a 	mov	r5,r21
    5760:	a00d883a 	mov	r6,r20
    5764:	e009883a 	mov	r4,fp
    5768:	102d883a 	mov	r22,r2
    576c:	00081a00 	call	81a0 <__mdiff>
    5770:	1007883a 	mov	r3,r2
    5774:	10800317 	ldw	r2,12(r2)
    5778:	bc800c04 	addi	r18,r23,48
    577c:	180b883a 	mov	r5,r3
    5780:	10004e1e 	bne	r2,zero,58bc <_dtoa_r+0xfac>
    5784:	8009883a 	mov	r4,r16
    5788:	d8c01615 	stw	r3,88(sp)
    578c:	00081400 	call	8140 <__mcmp>
    5790:	d8c01617 	ldw	r3,88(sp)
    5794:	e009883a 	mov	r4,fp
    5798:	d8801615 	stw	r2,88(sp)
    579c:	180b883a 	mov	r5,r3
    57a0:	00078640 	call	7864 <_Bfree>
    57a4:	d8801617 	ldw	r2,88(sp)
    57a8:	1000041e 	bne	r2,zero,57bc <_dtoa_r+0xeac>
    57ac:	d9800317 	ldw	r6,12(sp)
    57b0:	3000021e 	bne	r6,zero,57bc <_dtoa_r+0xeac>
    57b4:	d8c00617 	ldw	r3,24(sp)
    57b8:	18003726 	beq	r3,zero,5898 <_dtoa_r+0xf88>
    57bc:	b0002016 	blt	r22,zero,5840 <_dtoa_r+0xf30>
    57c0:	b000041e 	bne	r22,zero,57d4 <_dtoa_r+0xec4>
    57c4:	d9000317 	ldw	r4,12(sp)
    57c8:	2000021e 	bne	r4,zero,57d4 <_dtoa_r+0xec4>
    57cc:	d8c00617 	ldw	r3,24(sp)
    57d0:	18001b26 	beq	r3,zero,5840 <_dtoa_r+0xf30>
    57d4:	00810716 	blt	zero,r2,5bf4 <_dtoa_r+0x12e4>
    57d8:	d8c00417 	ldw	r3,16(sp)
    57dc:	9d800044 	addi	r22,r19,1
    57e0:	9c800005 	stb	r18,0(r19)
    57e4:	b02f883a 	mov	r23,r22
    57e8:	98c10626 	beq	r19,r3,5c04 <_dtoa_r+0x12f4>
    57ec:	800b883a 	mov	r5,r16
    57f0:	000f883a 	mov	r7,zero
    57f4:	01800284 	movi	r6,10
    57f8:	e009883a 	mov	r4,fp
    57fc:	000788c0 	call	788c <__multadd>
    5800:	1021883a 	mov	r16,r2
    5804:	000f883a 	mov	r7,zero
    5808:	01800284 	movi	r6,10
    580c:	880b883a 	mov	r5,r17
    5810:	e009883a 	mov	r4,fp
    5814:	8d002526 	beq	r17,r20,58ac <_dtoa_r+0xf9c>
    5818:	000788c0 	call	788c <__multadd>
    581c:	a00b883a 	mov	r5,r20
    5820:	000f883a 	mov	r7,zero
    5824:	01800284 	movi	r6,10
    5828:	e009883a 	mov	r4,fp
    582c:	1023883a 	mov	r17,r2
    5830:	000788c0 	call	788c <__multadd>
    5834:	1029883a 	mov	r20,r2
    5838:	b027883a 	mov	r19,r22
    583c:	003fc006 	br	5740 <__alt_data_end+0xf8005740>
    5840:	9011883a 	mov	r8,r18
    5844:	00800e0e 	bge	zero,r2,5880 <_dtoa_r+0xf70>
    5848:	800b883a 	mov	r5,r16
    584c:	01800044 	movi	r6,1
    5850:	e009883a 	mov	r4,fp
    5854:	da001715 	stw	r8,92(sp)
    5858:	0007ff80 	call	7ff8 <__lshift>
    585c:	a80b883a 	mov	r5,r21
    5860:	1009883a 	mov	r4,r2
    5864:	1021883a 	mov	r16,r2
    5868:	00081400 	call	8140 <__mcmp>
    586c:	da001717 	ldw	r8,92(sp)
    5870:	0081960e 	bge	zero,r2,5ecc <_dtoa_r+0x15bc>
    5874:	00800e44 	movi	r2,57
    5878:	40817026 	beq	r8,r2,5e3c <_dtoa_r+0x152c>
    587c:	ba000c44 	addi	r8,r23,49
    5880:	8825883a 	mov	r18,r17
    5884:	9dc00044 	addi	r23,r19,1
    5888:	9a000005 	stb	r8,0(r19)
    588c:	a023883a 	mov	r17,r20
    5890:	dc000915 	stw	r16,36(sp)
    5894:	003f2406 	br	5528 <__alt_data_end+0xf8005528>
    5898:	00800e44 	movi	r2,57
    589c:	9011883a 	mov	r8,r18
    58a0:	90816626 	beq	r18,r2,5e3c <_dtoa_r+0x152c>
    58a4:	05bff516 	blt	zero,r22,587c <__alt_data_end+0xf800587c>
    58a8:	003ff506 	br	5880 <__alt_data_end+0xf8005880>
    58ac:	000788c0 	call	788c <__multadd>
    58b0:	1023883a 	mov	r17,r2
    58b4:	1029883a 	mov	r20,r2
    58b8:	003fdf06 	br	5838 <__alt_data_end+0xf8005838>
    58bc:	e009883a 	mov	r4,fp
    58c0:	00078640 	call	7864 <_Bfree>
    58c4:	00800044 	movi	r2,1
    58c8:	003fbc06 	br	57bc <__alt_data_end+0xf80057bc>
    58cc:	a80b883a 	mov	r5,r21
    58d0:	8009883a 	mov	r4,r16
    58d4:	00081400 	call	8140 <__mcmp>
    58d8:	103edb0e 	bge	r2,zero,5448 <__alt_data_end+0xf8005448>
    58dc:	800b883a 	mov	r5,r16
    58e0:	000f883a 	mov	r7,zero
    58e4:	01800284 	movi	r6,10
    58e8:	e009883a 	mov	r4,fp
    58ec:	000788c0 	call	788c <__multadd>
    58f0:	1021883a 	mov	r16,r2
    58f4:	d8800517 	ldw	r2,20(sp)
    58f8:	d8c00b17 	ldw	r3,44(sp)
    58fc:	10bfffc4 	addi	r2,r2,-1
    5900:	d8800515 	stw	r2,20(sp)
    5904:	183f761e 	bne	r3,zero,56e0 <__alt_data_end+0xf80056e0>
    5908:	d9000c17 	ldw	r4,48(sp)
    590c:	0101730e 	bge	zero,r4,5edc <_dtoa_r+0x15cc>
    5910:	d9000615 	stw	r4,24(sp)
    5914:	003ed006 	br	5458 <__alt_data_end+0xf8005458>
    5918:	00800084 	movi	r2,2
    591c:	3081861e 	bne	r6,r2,5f38 <_dtoa_r+0x1628>
    5920:	d8000b15 	stw	zero,44(sp)
    5924:	003f3c06 	br	5618 <__alt_data_end+0xf8005618>
    5928:	dc000917 	ldw	r16,36(sp)
    592c:	003e9206 	br	5378 <__alt_data_end+0xf8005378>
    5930:	d9c00317 	ldw	r7,12(sp)
    5934:	00800084 	movi	r2,2
    5938:	11fec50e 	bge	r2,r7,5450 <__alt_data_end+0xf8005450>
    593c:	d9000617 	ldw	r4,24(sp)
    5940:	20013c1e 	bne	r4,zero,5e34 <_dtoa_r+0x1524>
    5944:	a80b883a 	mov	r5,r21
    5948:	000f883a 	mov	r7,zero
    594c:	01800144 	movi	r6,5
    5950:	e009883a 	mov	r4,fp
    5954:	000788c0 	call	788c <__multadd>
    5958:	100b883a 	mov	r5,r2
    595c:	8009883a 	mov	r4,r16
    5960:	102b883a 	mov	r21,r2
    5964:	00081400 	call	8140 <__mcmp>
    5968:	dc000915 	stw	r16,36(sp)
    596c:	00bf410e 	bge	zero,r2,5674 <__alt_data_end+0xf8005674>
    5970:	d9c00717 	ldw	r7,28(sp)
    5974:	00800c44 	movi	r2,49
    5978:	38800005 	stb	r2,0(r7)
    597c:	d8800517 	ldw	r2,20(sp)
    5980:	3dc00044 	addi	r23,r7,1
    5984:	10800044 	addi	r2,r2,1
    5988:	d8800515 	stw	r2,20(sp)
    598c:	003f3d06 	br	5684 <__alt_data_end+0xf8005684>
    5990:	d9800517 	ldw	r6,20(sp)
    5994:	d9c00717 	ldw	r7,28(sp)
    5998:	00800c44 	movi	r2,49
    599c:	31800044 	addi	r6,r6,1
    59a0:	d9800515 	stw	r6,20(sp)
    59a4:	38800005 	stb	r2,0(r7)
    59a8:	003edf06 	br	5528 <__alt_data_end+0xf8005528>
    59ac:	d8000b15 	stw	zero,44(sp)
    59b0:	003c9f06 	br	4c30 <__alt_data_end+0xf8004c30>
    59b4:	903e7e1e 	bne	r18,zero,53b0 <__alt_data_end+0xf80053b0>
    59b8:	00800434 	movhi	r2,16
    59bc:	10bfffc4 	addi	r2,r2,-1
    59c0:	9884703a 	and	r2,r19,r2
    59c4:	1000ea1e 	bne	r2,zero,5d70 <_dtoa_r+0x1460>
    59c8:	9cdffc2c 	andhi	r19,r19,32752
    59cc:	9800e826 	beq	r19,zero,5d70 <_dtoa_r+0x1460>
    59d0:	d9c00817 	ldw	r7,32(sp)
    59d4:	b5800044 	addi	r22,r22,1
    59d8:	04c00044 	movi	r19,1
    59dc:	39c00044 	addi	r7,r7,1
    59e0:	d9c00815 	stw	r7,32(sp)
    59e4:	d8800d17 	ldw	r2,52(sp)
    59e8:	103e721e 	bne	r2,zero,53b4 <__alt_data_end+0xf80053b4>
    59ec:	00800044 	movi	r2,1
    59f0:	003e7906 	br	53d8 <__alt_data_end+0xf80053d8>
    59f4:	8009883a 	mov	r4,r16
    59f8:	000e5700 	call	e570 <__floatsidf>
    59fc:	d9800f17 	ldw	r6,60(sp)
    5a00:	d9c01017 	ldw	r7,64(sp)
    5a04:	1009883a 	mov	r4,r2
    5a08:	180b883a 	mov	r5,r3
    5a0c:	000d3880 	call	d388 <__muldf3>
    5a10:	000d883a 	mov	r6,zero
    5a14:	01d00734 	movhi	r7,16412
    5a18:	1009883a 	mov	r4,r2
    5a1c:	180b883a 	mov	r5,r3
    5a20:	000beb40 	call	beb4 <__adddf3>
    5a24:	047f3034 	movhi	r17,64704
    5a28:	1021883a 	mov	r16,r2
    5a2c:	1c63883a 	add	r17,r3,r17
    5a30:	d9000f17 	ldw	r4,60(sp)
    5a34:	d9401017 	ldw	r5,64(sp)
    5a38:	000d883a 	mov	r6,zero
    5a3c:	01d00534 	movhi	r7,16404
    5a40:	000dbf40 	call	dbf4 <__subdf3>
    5a44:	800d883a 	mov	r6,r16
    5a48:	880f883a 	mov	r7,r17
    5a4c:	1009883a 	mov	r4,r2
    5a50:	180b883a 	mov	r5,r3
    5a54:	102b883a 	mov	r21,r2
    5a58:	1829883a 	mov	r20,r3
    5a5c:	000d1b80 	call	d1b8 <__gedf2>
    5a60:	00806c16 	blt	zero,r2,5c14 <_dtoa_r+0x1304>
    5a64:	89e0003c 	xorhi	r7,r17,32768
    5a68:	800d883a 	mov	r6,r16
    5a6c:	a809883a 	mov	r4,r21
    5a70:	a00b883a 	mov	r5,r20
    5a74:	000d2940 	call	d294 <__ledf2>
    5a78:	103d7e0e 	bge	r2,zero,5074 <__alt_data_end+0xf8005074>
    5a7c:	002b883a 	mov	r21,zero
    5a80:	0023883a 	mov	r17,zero
    5a84:	003efb06 	br	5674 <__alt_data_end+0xf8005674>
    5a88:	d8800717 	ldw	r2,28(sp)
    5a8c:	003bd006 	br	49d0 <__alt_data_end+0xf80049d0>
    5a90:	d9000a17 	ldw	r4,40(sp)
    5a94:	d9800d17 	ldw	r6,52(sp)
    5a98:	dd400a15 	stw	r21,40(sp)
    5a9c:	a905c83a 	sub	r2,r21,r4
    5aa0:	308d883a 	add	r6,r6,r2
    5aa4:	d9800d15 	stw	r6,52(sp)
    5aa8:	002b883a 	mov	r21,zero
    5aac:	003e0606 	br	52c8 <__alt_data_end+0xf80052c8>
    5ab0:	9023883a 	mov	r17,r18
    5ab4:	9829883a 	mov	r20,r19
    5ab8:	04000084 	movi	r16,2
    5abc:	003c9206 	br	4d08 <__alt_data_end+0xf8004d08>
    5ac0:	04000044 	movi	r16,1
    5ac4:	dc000c15 	stw	r16,48(sp)
    5ac8:	dc000615 	stw	r16,24(sp)
    5acc:	dc002215 	stw	r16,136(sp)
    5ad0:	e0001115 	stw	zero,68(fp)
    5ad4:	000b883a 	mov	r5,zero
    5ad8:	003c6906 	br	4c80 <__alt_data_end+0xf8004c80>
    5adc:	3021883a 	mov	r16,r6
    5ae0:	003ffb06 	br	5ad0 <__alt_data_end+0xf8005ad0>
    5ae4:	1000021e 	bne	r2,zero,5af0 <_dtoa_r+0x11e0>
    5ae8:	4200004c 	andi	r8,r8,1
    5aec:	403e7d1e 	bne	r8,zero,54e4 <__alt_data_end+0xf80054e4>
    5af0:	01000c04 	movi	r4,48
    5af4:	00000106 	br	5afc <_dtoa_r+0x11ec>
    5af8:	102f883a 	mov	r23,r2
    5afc:	b8bfffc4 	addi	r2,r23,-1
    5b00:	10c00007 	ldb	r3,0(r2)
    5b04:	193ffc26 	beq	r3,r4,5af8 <__alt_data_end+0xf8005af8>
    5b08:	003e8706 	br	5528 <__alt_data_end+0xf8005528>
    5b0c:	d8800517 	ldw	r2,20(sp)
    5b10:	00a3c83a 	sub	r17,zero,r2
    5b14:	8800a426 	beq	r17,zero,5da8 <_dtoa_r+0x1498>
    5b18:	888003cc 	andi	r2,r17,15
    5b1c:	100490fa 	slli	r2,r2,3
    5b20:	00c00074 	movhi	r3,1
    5b24:	18c86404 	addi	r3,r3,8592
    5b28:	1885883a 	add	r2,r3,r2
    5b2c:	11800017 	ldw	r6,0(r2)
    5b30:	11c00117 	ldw	r7,4(r2)
    5b34:	9009883a 	mov	r4,r18
    5b38:	980b883a 	mov	r5,r19
    5b3c:	8823d13a 	srai	r17,r17,4
    5b40:	000d3880 	call	d388 <__muldf3>
    5b44:	d8800f15 	stw	r2,60(sp)
    5b48:	d8c01015 	stw	r3,64(sp)
    5b4c:	8800e826 	beq	r17,zero,5ef0 <_dtoa_r+0x15e0>
    5b50:	05000074 	movhi	r20,1
    5b54:	a5085a04 	addi	r20,r20,8552
    5b58:	04000084 	movi	r16,2
    5b5c:	8980004c 	andi	r6,r17,1
    5b60:	1009883a 	mov	r4,r2
    5b64:	8823d07a 	srai	r17,r17,1
    5b68:	180b883a 	mov	r5,r3
    5b6c:	30000426 	beq	r6,zero,5b80 <_dtoa_r+0x1270>
    5b70:	a1800017 	ldw	r6,0(r20)
    5b74:	a1c00117 	ldw	r7,4(r20)
    5b78:	84000044 	addi	r16,r16,1
    5b7c:	000d3880 	call	d388 <__muldf3>
    5b80:	a5000204 	addi	r20,r20,8
    5b84:	883ff51e 	bne	r17,zero,5b5c <__alt_data_end+0xf8005b5c>
    5b88:	d8800f15 	stw	r2,60(sp)
    5b8c:	d8c01015 	stw	r3,64(sp)
    5b90:	003c7606 	br	4d6c <__alt_data_end+0xf8004d6c>
    5b94:	00c00c04 	movi	r3,48
    5b98:	10c00005 	stb	r3,0(r2)
    5b9c:	d8c00517 	ldw	r3,20(sp)
    5ba0:	bd3fffc3 	ldbu	r20,-1(r23)
    5ba4:	18c00044 	addi	r3,r3,1
    5ba8:	d8c00515 	stw	r3,20(sp)
    5bac:	003db906 	br	5294 <__alt_data_end+0xf8005294>
    5bb0:	89400117 	ldw	r5,4(r17)
    5bb4:	e009883a 	mov	r4,fp
    5bb8:	00077bc0 	call	77bc <_Balloc>
    5bbc:	89800417 	ldw	r6,16(r17)
    5bc0:	89400304 	addi	r5,r17,12
    5bc4:	11000304 	addi	r4,r2,12
    5bc8:	31800084 	addi	r6,r6,2
    5bcc:	318d883a 	add	r6,r6,r6
    5bd0:	318d883a 	add	r6,r6,r6
    5bd4:	1027883a 	mov	r19,r2
    5bd8:	00073f00 	call	73f0 <memcpy>
    5bdc:	01800044 	movi	r6,1
    5be0:	980b883a 	mov	r5,r19
    5be4:	e009883a 	mov	r4,fp
    5be8:	0007ff80 	call	7ff8 <__lshift>
    5bec:	1029883a 	mov	r20,r2
    5bf0:	003ecc06 	br	5724 <__alt_data_end+0xf8005724>
    5bf4:	00800e44 	movi	r2,57
    5bf8:	90809026 	beq	r18,r2,5e3c <_dtoa_r+0x152c>
    5bfc:	92000044 	addi	r8,r18,1
    5c00:	003f1f06 	br	5880 <__alt_data_end+0xf8005880>
    5c04:	9011883a 	mov	r8,r18
    5c08:	8825883a 	mov	r18,r17
    5c0c:	a023883a 	mov	r17,r20
    5c10:	003e2906 	br	54b8 <__alt_data_end+0xf80054b8>
    5c14:	002b883a 	mov	r21,zero
    5c18:	0023883a 	mov	r17,zero
    5c1c:	003f5406 	br	5970 <__alt_data_end+0xf8005970>
    5c20:	61bfffc4 	addi	r6,r12,-1
    5c24:	300490fa 	slli	r2,r6,3
    5c28:	00c00074 	movhi	r3,1
    5c2c:	18c86404 	addi	r3,r3,8592
    5c30:	1885883a 	add	r2,r3,r2
    5c34:	11000017 	ldw	r4,0(r2)
    5c38:	11400117 	ldw	r5,4(r2)
    5c3c:	d8800717 	ldw	r2,28(sp)
    5c40:	880f883a 	mov	r7,r17
    5c44:	d9801215 	stw	r6,72(sp)
    5c48:	800d883a 	mov	r6,r16
    5c4c:	db001615 	stw	r12,88(sp)
    5c50:	15c00044 	addi	r23,r2,1
    5c54:	000d3880 	call	d388 <__muldf3>
    5c58:	d9401017 	ldw	r5,64(sp)
    5c5c:	d9000f17 	ldw	r4,60(sp)
    5c60:	d8c01515 	stw	r3,84(sp)
    5c64:	d8801415 	stw	r2,80(sp)
    5c68:	000e4f00 	call	e4f0 <__fixdfsi>
    5c6c:	1009883a 	mov	r4,r2
    5c70:	1021883a 	mov	r16,r2
    5c74:	000e5700 	call	e570 <__floatsidf>
    5c78:	d9000f17 	ldw	r4,60(sp)
    5c7c:	d9401017 	ldw	r5,64(sp)
    5c80:	100d883a 	mov	r6,r2
    5c84:	180f883a 	mov	r7,r3
    5c88:	000dbf40 	call	dbf4 <__subdf3>
    5c8c:	1829883a 	mov	r20,r3
    5c90:	d8c00717 	ldw	r3,28(sp)
    5c94:	84000c04 	addi	r16,r16,48
    5c98:	1023883a 	mov	r17,r2
    5c9c:	1c000005 	stb	r16,0(r3)
    5ca0:	db001617 	ldw	r12,88(sp)
    5ca4:	00800044 	movi	r2,1
    5ca8:	60802226 	beq	r12,r2,5d34 <_dtoa_r+0x1424>
    5cac:	d9c00717 	ldw	r7,28(sp)
    5cb0:	8805883a 	mov	r2,r17
    5cb4:	b82b883a 	mov	r21,r23
    5cb8:	3b19883a 	add	r12,r7,r12
    5cbc:	6023883a 	mov	r17,r12
    5cc0:	a007883a 	mov	r3,r20
    5cc4:	dc800f15 	stw	r18,60(sp)
    5cc8:	000d883a 	mov	r6,zero
    5ccc:	01d00934 	movhi	r7,16420
    5cd0:	1009883a 	mov	r4,r2
    5cd4:	180b883a 	mov	r5,r3
    5cd8:	000d3880 	call	d388 <__muldf3>
    5cdc:	180b883a 	mov	r5,r3
    5ce0:	1009883a 	mov	r4,r2
    5ce4:	1829883a 	mov	r20,r3
    5ce8:	1025883a 	mov	r18,r2
    5cec:	000e4f00 	call	e4f0 <__fixdfsi>
    5cf0:	1009883a 	mov	r4,r2
    5cf4:	1021883a 	mov	r16,r2
    5cf8:	000e5700 	call	e570 <__floatsidf>
    5cfc:	100d883a 	mov	r6,r2
    5d00:	180f883a 	mov	r7,r3
    5d04:	9009883a 	mov	r4,r18
    5d08:	a00b883a 	mov	r5,r20
    5d0c:	84000c04 	addi	r16,r16,48
    5d10:	000dbf40 	call	dbf4 <__subdf3>
    5d14:	ad400044 	addi	r21,r21,1
    5d18:	ac3fffc5 	stb	r16,-1(r21)
    5d1c:	ac7fea1e 	bne	r21,r17,5cc8 <__alt_data_end+0xf8005cc8>
    5d20:	1023883a 	mov	r17,r2
    5d24:	d8801217 	ldw	r2,72(sp)
    5d28:	dc800f17 	ldw	r18,60(sp)
    5d2c:	1829883a 	mov	r20,r3
    5d30:	b8af883a 	add	r23,r23,r2
    5d34:	d9001417 	ldw	r4,80(sp)
    5d38:	d9401517 	ldw	r5,84(sp)
    5d3c:	000d883a 	mov	r6,zero
    5d40:	01cff834 	movhi	r7,16352
    5d44:	000beb40 	call	beb4 <__adddf3>
    5d48:	880d883a 	mov	r6,r17
    5d4c:	a00f883a 	mov	r7,r20
    5d50:	1009883a 	mov	r4,r2
    5d54:	180b883a 	mov	r5,r3
    5d58:	000d2940 	call	d294 <__ledf2>
    5d5c:	10003e0e 	bge	r2,zero,5e58 <_dtoa_r+0x1548>
    5d60:	d9001317 	ldw	r4,76(sp)
    5d64:	bd3fffc3 	ldbu	r20,-1(r23)
    5d68:	d9000515 	stw	r4,20(sp)
    5d6c:	003d3b06 	br	525c <__alt_data_end+0xf800525c>
    5d70:	0027883a 	mov	r19,zero
    5d74:	003f1b06 	br	59e4 <__alt_data_end+0xf80059e4>
    5d78:	d8800817 	ldw	r2,32(sp)
    5d7c:	11e9c83a 	sub	r20,r2,r7
    5d80:	0005883a 	mov	r2,zero
    5d84:	003d5406 	br	52d8 <__alt_data_end+0xf80052d8>
    5d88:	00800044 	movi	r2,1
    5d8c:	003dc706 	br	54ac <__alt_data_end+0xf80054ac>
    5d90:	d8c00217 	ldw	r3,8(sp)
    5d94:	00800d84 	movi	r2,54
    5d98:	dd400a17 	ldw	r21,40(sp)
    5d9c:	10c5c83a 	sub	r2,r2,r3
    5da0:	dd000817 	ldw	r20,32(sp)
    5da4:	003d4c06 	br	52d8 <__alt_data_end+0xf80052d8>
    5da8:	dc800f15 	stw	r18,60(sp)
    5dac:	dcc01015 	stw	r19,64(sp)
    5db0:	04000084 	movi	r16,2
    5db4:	003bed06 	br	4d6c <__alt_data_end+0xf8004d6c>
    5db8:	d9000617 	ldw	r4,24(sp)
    5dbc:	203f0d26 	beq	r4,zero,59f4 <__alt_data_end+0xf80059f4>
    5dc0:	d9800c17 	ldw	r6,48(sp)
    5dc4:	01bcab0e 	bge	zero,r6,5074 <__alt_data_end+0xf8005074>
    5dc8:	d9401017 	ldw	r5,64(sp)
    5dcc:	d9000f17 	ldw	r4,60(sp)
    5dd0:	000d883a 	mov	r6,zero
    5dd4:	01d00934 	movhi	r7,16420
    5dd8:	000d3880 	call	d388 <__muldf3>
    5ddc:	81000044 	addi	r4,r16,1
    5de0:	d8800f15 	stw	r2,60(sp)
    5de4:	d8c01015 	stw	r3,64(sp)
    5de8:	000e5700 	call	e570 <__floatsidf>
    5dec:	d9800f17 	ldw	r6,60(sp)
    5df0:	d9c01017 	ldw	r7,64(sp)
    5df4:	1009883a 	mov	r4,r2
    5df8:	180b883a 	mov	r5,r3
    5dfc:	000d3880 	call	d388 <__muldf3>
    5e00:	01d00734 	movhi	r7,16412
    5e04:	000d883a 	mov	r6,zero
    5e08:	1009883a 	mov	r4,r2
    5e0c:	180b883a 	mov	r5,r3
    5e10:	000beb40 	call	beb4 <__adddf3>
    5e14:	d9c00517 	ldw	r7,20(sp)
    5e18:	047f3034 	movhi	r17,64704
    5e1c:	1021883a 	mov	r16,r2
    5e20:	39ffffc4 	addi	r7,r7,-1
    5e24:	d9c01315 	stw	r7,76(sp)
    5e28:	1c63883a 	add	r17,r3,r17
    5e2c:	db000c17 	ldw	r12,48(sp)
    5e30:	003bea06 	br	4ddc <__alt_data_end+0xf8004ddc>
    5e34:	dc000915 	stw	r16,36(sp)
    5e38:	003e0e06 	br	5674 <__alt_data_end+0xf8005674>
    5e3c:	01000e44 	movi	r4,57
    5e40:	8825883a 	mov	r18,r17
    5e44:	9dc00044 	addi	r23,r19,1
    5e48:	99000005 	stb	r4,0(r19)
    5e4c:	a023883a 	mov	r17,r20
    5e50:	dc000915 	stw	r16,36(sp)
    5e54:	003da406 	br	54e8 <__alt_data_end+0xf80054e8>
    5e58:	d9801417 	ldw	r6,80(sp)
    5e5c:	d9c01517 	ldw	r7,84(sp)
    5e60:	0009883a 	mov	r4,zero
    5e64:	014ff834 	movhi	r5,16352
    5e68:	000dbf40 	call	dbf4 <__subdf3>
    5e6c:	880d883a 	mov	r6,r17
    5e70:	a00f883a 	mov	r7,r20
    5e74:	1009883a 	mov	r4,r2
    5e78:	180b883a 	mov	r5,r3
    5e7c:	000d1b80 	call	d1b8 <__gedf2>
    5e80:	00bc7c0e 	bge	zero,r2,5074 <__alt_data_end+0xf8005074>
    5e84:	01000c04 	movi	r4,48
    5e88:	00000106 	br	5e90 <_dtoa_r+0x1580>
    5e8c:	102f883a 	mov	r23,r2
    5e90:	b8bfffc4 	addi	r2,r23,-1
    5e94:	10c00007 	ldb	r3,0(r2)
    5e98:	193ffc26 	beq	r3,r4,5e8c <__alt_data_end+0xf8005e8c>
    5e9c:	d9801317 	ldw	r6,76(sp)
    5ea0:	d9800515 	stw	r6,20(sp)
    5ea4:	003c4406 	br	4fb8 <__alt_data_end+0xf8004fb8>
    5ea8:	d9801317 	ldw	r6,76(sp)
    5eac:	d9800515 	stw	r6,20(sp)
    5eb0:	003cea06 	br	525c <__alt_data_end+0xf800525c>
    5eb4:	dd800f17 	ldw	r22,60(sp)
    5eb8:	dcc01017 	ldw	r19,64(sp)
    5ebc:	dc801217 	ldw	r18,72(sp)
    5ec0:	003c6c06 	br	5074 <__alt_data_end+0xf8005074>
    5ec4:	903e031e 	bne	r18,zero,56d4 <__alt_data_end+0xf80056d4>
    5ec8:	003ebb06 	br	59b8 <__alt_data_end+0xf80059b8>
    5ecc:	103e6c1e 	bne	r2,zero,5880 <__alt_data_end+0xf8005880>
    5ed0:	4080004c 	andi	r2,r8,1
    5ed4:	103e6a26 	beq	r2,zero,5880 <__alt_data_end+0xf8005880>
    5ed8:	003e6606 	br	5874 <__alt_data_end+0xf8005874>
    5edc:	d8c00317 	ldw	r3,12(sp)
    5ee0:	00800084 	movi	r2,2
    5ee4:	10c02916 	blt	r2,r3,5f8c <_dtoa_r+0x167c>
    5ee8:	d9000c17 	ldw	r4,48(sp)
    5eec:	003e8806 	br	5910 <__alt_data_end+0xf8005910>
    5ef0:	04000084 	movi	r16,2
    5ef4:	003b9d06 	br	4d6c <__alt_data_end+0xf8004d6c>
    5ef8:	d9001317 	ldw	r4,76(sp)
    5efc:	d9000515 	stw	r4,20(sp)
    5f00:	003cd606 	br	525c <__alt_data_end+0xf800525c>
    5f04:	d8801317 	ldw	r2,76(sp)
    5f08:	d8800515 	stw	r2,20(sp)
    5f0c:	003c2a06 	br	4fb8 <__alt_data_end+0xf8004fb8>
    5f10:	d9800317 	ldw	r6,12(sp)
    5f14:	00800084 	movi	r2,2
    5f18:	11801516 	blt	r2,r6,5f70 <_dtoa_r+0x1660>
    5f1c:	d9c00c17 	ldw	r7,48(sp)
    5f20:	d9c00615 	stw	r7,24(sp)
    5f24:	003df706 	br	5704 <__alt_data_end+0xf8005704>
    5f28:	193d3926 	beq	r3,r4,5410 <__alt_data_end+0xf8005410>
    5f2c:	00c00f04 	movi	r3,60
    5f30:	1885c83a 	sub	r2,r3,r2
    5f34:	003ddf06 	br	56b4 <__alt_data_end+0xf80056b4>
    5f38:	e009883a 	mov	r4,fp
    5f3c:	e0001115 	stw	zero,68(fp)
    5f40:	000b883a 	mov	r5,zero
    5f44:	00077bc0 	call	77bc <_Balloc>
    5f48:	d8800715 	stw	r2,28(sp)
    5f4c:	d8c00717 	ldw	r3,28(sp)
    5f50:	00bfffc4 	movi	r2,-1
    5f54:	01000044 	movi	r4,1
    5f58:	d8800c15 	stw	r2,48(sp)
    5f5c:	e0c01015 	stw	r3,64(fp)
    5f60:	d9000b15 	stw	r4,44(sp)
    5f64:	d8800615 	stw	r2,24(sp)
    5f68:	d8002215 	stw	zero,136(sp)
    5f6c:	003c4106 	br	5074 <__alt_data_end+0xf8005074>
    5f70:	d8c00c17 	ldw	r3,48(sp)
    5f74:	d8c00615 	stw	r3,24(sp)
    5f78:	003e7006 	br	593c <__alt_data_end+0xf800593c>
    5f7c:	04400044 	movi	r17,1
    5f80:	003b2006 	br	4c04 <__alt_data_end+0xf8004c04>
    5f84:	000b883a 	mov	r5,zero
    5f88:	003b3d06 	br	4c80 <__alt_data_end+0xf8004c80>
    5f8c:	d8800c17 	ldw	r2,48(sp)
    5f90:	d8800615 	stw	r2,24(sp)
    5f94:	003e6906 	br	593c <__alt_data_end+0xf800593c>

00005f98 <__sflush_r>:
    5f98:	2880030b 	ldhu	r2,12(r5)
    5f9c:	defffb04 	addi	sp,sp,-20
    5fa0:	dcc00315 	stw	r19,12(sp)
    5fa4:	dc400115 	stw	r17,4(sp)
    5fa8:	dfc00415 	stw	ra,16(sp)
    5fac:	dc800215 	stw	r18,8(sp)
    5fb0:	dc000015 	stw	r16,0(sp)
    5fb4:	10c0020c 	andi	r3,r2,8
    5fb8:	2823883a 	mov	r17,r5
    5fbc:	2027883a 	mov	r19,r4
    5fc0:	1800311e 	bne	r3,zero,6088 <__sflush_r+0xf0>
    5fc4:	28c00117 	ldw	r3,4(r5)
    5fc8:	10820014 	ori	r2,r2,2048
    5fcc:	2880030d 	sth	r2,12(r5)
    5fd0:	00c04b0e 	bge	zero,r3,6100 <__sflush_r+0x168>
    5fd4:	8a000a17 	ldw	r8,40(r17)
    5fd8:	40002326 	beq	r8,zero,6068 <__sflush_r+0xd0>
    5fdc:	9c000017 	ldw	r16,0(r19)
    5fe0:	10c4000c 	andi	r3,r2,4096
    5fe4:	98000015 	stw	zero,0(r19)
    5fe8:	18004826 	beq	r3,zero,610c <__sflush_r+0x174>
    5fec:	89801417 	ldw	r6,80(r17)
    5ff0:	10c0010c 	andi	r3,r2,4
    5ff4:	18000626 	beq	r3,zero,6010 <__sflush_r+0x78>
    5ff8:	88c00117 	ldw	r3,4(r17)
    5ffc:	88800c17 	ldw	r2,48(r17)
    6000:	30cdc83a 	sub	r6,r6,r3
    6004:	10000226 	beq	r2,zero,6010 <__sflush_r+0x78>
    6008:	88800f17 	ldw	r2,60(r17)
    600c:	308dc83a 	sub	r6,r6,r2
    6010:	89400717 	ldw	r5,28(r17)
    6014:	000f883a 	mov	r7,zero
    6018:	9809883a 	mov	r4,r19
    601c:	403ee83a 	callr	r8
    6020:	00ffffc4 	movi	r3,-1
    6024:	10c04426 	beq	r2,r3,6138 <__sflush_r+0x1a0>
    6028:	88c0030b 	ldhu	r3,12(r17)
    602c:	89000417 	ldw	r4,16(r17)
    6030:	88000115 	stw	zero,4(r17)
    6034:	197dffcc 	andi	r5,r3,63487
    6038:	8940030d 	sth	r5,12(r17)
    603c:	89000015 	stw	r4,0(r17)
    6040:	18c4000c 	andi	r3,r3,4096
    6044:	18002c1e 	bne	r3,zero,60f8 <__sflush_r+0x160>
    6048:	89400c17 	ldw	r5,48(r17)
    604c:	9c000015 	stw	r16,0(r19)
    6050:	28000526 	beq	r5,zero,6068 <__sflush_r+0xd0>
    6054:	88801004 	addi	r2,r17,64
    6058:	28800226 	beq	r5,r2,6064 <__sflush_r+0xcc>
    605c:	9809883a 	mov	r4,r19
    6060:	00067140 	call	6714 <_free_r>
    6064:	88000c15 	stw	zero,48(r17)
    6068:	0005883a 	mov	r2,zero
    606c:	dfc00417 	ldw	ra,16(sp)
    6070:	dcc00317 	ldw	r19,12(sp)
    6074:	dc800217 	ldw	r18,8(sp)
    6078:	dc400117 	ldw	r17,4(sp)
    607c:	dc000017 	ldw	r16,0(sp)
    6080:	dec00504 	addi	sp,sp,20
    6084:	f800283a 	ret
    6088:	2c800417 	ldw	r18,16(r5)
    608c:	903ff626 	beq	r18,zero,6068 <__alt_data_end+0xf8006068>
    6090:	2c000017 	ldw	r16,0(r5)
    6094:	108000cc 	andi	r2,r2,3
    6098:	2c800015 	stw	r18,0(r5)
    609c:	84a1c83a 	sub	r16,r16,r18
    60a0:	1000131e 	bne	r2,zero,60f0 <__sflush_r+0x158>
    60a4:	28800517 	ldw	r2,20(r5)
    60a8:	88800215 	stw	r2,8(r17)
    60ac:	04000316 	blt	zero,r16,60bc <__sflush_r+0x124>
    60b0:	003fed06 	br	6068 <__alt_data_end+0xf8006068>
    60b4:	90a5883a 	add	r18,r18,r2
    60b8:	043feb0e 	bge	zero,r16,6068 <__alt_data_end+0xf8006068>
    60bc:	88800917 	ldw	r2,36(r17)
    60c0:	89400717 	ldw	r5,28(r17)
    60c4:	800f883a 	mov	r7,r16
    60c8:	900d883a 	mov	r6,r18
    60cc:	9809883a 	mov	r4,r19
    60d0:	103ee83a 	callr	r2
    60d4:	80a1c83a 	sub	r16,r16,r2
    60d8:	00bff616 	blt	zero,r2,60b4 <__alt_data_end+0xf80060b4>
    60dc:	88c0030b 	ldhu	r3,12(r17)
    60e0:	00bfffc4 	movi	r2,-1
    60e4:	18c01014 	ori	r3,r3,64
    60e8:	88c0030d 	sth	r3,12(r17)
    60ec:	003fdf06 	br	606c <__alt_data_end+0xf800606c>
    60f0:	0005883a 	mov	r2,zero
    60f4:	003fec06 	br	60a8 <__alt_data_end+0xf80060a8>
    60f8:	88801415 	stw	r2,80(r17)
    60fc:	003fd206 	br	6048 <__alt_data_end+0xf8006048>
    6100:	28c00f17 	ldw	r3,60(r5)
    6104:	00ffb316 	blt	zero,r3,5fd4 <__alt_data_end+0xf8005fd4>
    6108:	003fd706 	br	6068 <__alt_data_end+0xf8006068>
    610c:	89400717 	ldw	r5,28(r17)
    6110:	000d883a 	mov	r6,zero
    6114:	01c00044 	movi	r7,1
    6118:	9809883a 	mov	r4,r19
    611c:	403ee83a 	callr	r8
    6120:	100d883a 	mov	r6,r2
    6124:	00bfffc4 	movi	r2,-1
    6128:	30801426 	beq	r6,r2,617c <__sflush_r+0x1e4>
    612c:	8880030b 	ldhu	r2,12(r17)
    6130:	8a000a17 	ldw	r8,40(r17)
    6134:	003fae06 	br	5ff0 <__alt_data_end+0xf8005ff0>
    6138:	98c00017 	ldw	r3,0(r19)
    613c:	183fba26 	beq	r3,zero,6028 <__alt_data_end+0xf8006028>
    6140:	01000744 	movi	r4,29
    6144:	19000626 	beq	r3,r4,6160 <__sflush_r+0x1c8>
    6148:	01000584 	movi	r4,22
    614c:	19000426 	beq	r3,r4,6160 <__sflush_r+0x1c8>
    6150:	88c0030b 	ldhu	r3,12(r17)
    6154:	18c01014 	ori	r3,r3,64
    6158:	88c0030d 	sth	r3,12(r17)
    615c:	003fc306 	br	606c <__alt_data_end+0xf800606c>
    6160:	8880030b 	ldhu	r2,12(r17)
    6164:	88c00417 	ldw	r3,16(r17)
    6168:	88000115 	stw	zero,4(r17)
    616c:	10bdffcc 	andi	r2,r2,63487
    6170:	8880030d 	sth	r2,12(r17)
    6174:	88c00015 	stw	r3,0(r17)
    6178:	003fb306 	br	6048 <__alt_data_end+0xf8006048>
    617c:	98800017 	ldw	r2,0(r19)
    6180:	103fea26 	beq	r2,zero,612c <__alt_data_end+0xf800612c>
    6184:	00c00744 	movi	r3,29
    6188:	10c00226 	beq	r2,r3,6194 <__sflush_r+0x1fc>
    618c:	00c00584 	movi	r3,22
    6190:	10c0031e 	bne	r2,r3,61a0 <__sflush_r+0x208>
    6194:	9c000015 	stw	r16,0(r19)
    6198:	0005883a 	mov	r2,zero
    619c:	003fb306 	br	606c <__alt_data_end+0xf800606c>
    61a0:	88c0030b 	ldhu	r3,12(r17)
    61a4:	3005883a 	mov	r2,r6
    61a8:	18c01014 	ori	r3,r3,64
    61ac:	88c0030d 	sth	r3,12(r17)
    61b0:	003fae06 	br	606c <__alt_data_end+0xf800606c>

000061b4 <_fflush_r>:
    61b4:	defffd04 	addi	sp,sp,-12
    61b8:	dc000115 	stw	r16,4(sp)
    61bc:	dfc00215 	stw	ra,8(sp)
    61c0:	2021883a 	mov	r16,r4
    61c4:	20000226 	beq	r4,zero,61d0 <_fflush_r+0x1c>
    61c8:	20800e17 	ldw	r2,56(r4)
    61cc:	10000c26 	beq	r2,zero,6200 <_fflush_r+0x4c>
    61d0:	2880030f 	ldh	r2,12(r5)
    61d4:	1000051e 	bne	r2,zero,61ec <_fflush_r+0x38>
    61d8:	0005883a 	mov	r2,zero
    61dc:	dfc00217 	ldw	ra,8(sp)
    61e0:	dc000117 	ldw	r16,4(sp)
    61e4:	dec00304 	addi	sp,sp,12
    61e8:	f800283a 	ret
    61ec:	8009883a 	mov	r4,r16
    61f0:	dfc00217 	ldw	ra,8(sp)
    61f4:	dc000117 	ldw	r16,4(sp)
    61f8:	dec00304 	addi	sp,sp,12
    61fc:	0005f981 	jmpi	5f98 <__sflush_r>
    6200:	d9400015 	stw	r5,0(sp)
    6204:	00065a00 	call	65a0 <__sinit>
    6208:	d9400017 	ldw	r5,0(sp)
    620c:	003ff006 	br	61d0 <__alt_data_end+0xf80061d0>

00006210 <fflush>:
    6210:	20000526 	beq	r4,zero,6228 <fflush+0x18>
    6214:	00800074 	movhi	r2,1
    6218:	10908304 	addi	r2,r2,16908
    621c:	200b883a 	mov	r5,r4
    6220:	11000017 	ldw	r4,0(r2)
    6224:	00061b41 	jmpi	61b4 <_fflush_r>
    6228:	00800074 	movhi	r2,1
    622c:	10908204 	addi	r2,r2,16904
    6230:	11000017 	ldw	r4,0(r2)
    6234:	01400034 	movhi	r5,0
    6238:	29586d04 	addi	r5,r5,25012
    623c:	0006fb01 	jmpi	6fb0 <_fwalk_reent>

00006240 <__fp_unlock>:
    6240:	0005883a 	mov	r2,zero
    6244:	f800283a 	ret

00006248 <_cleanup_r>:
    6248:	01400074 	movhi	r5,1
    624c:	296a6104 	addi	r5,r5,-22140
    6250:	0006fb01 	jmpi	6fb0 <_fwalk_reent>

00006254 <__sinit.part.1>:
    6254:	defff704 	addi	sp,sp,-36
    6258:	00c00034 	movhi	r3,0
    625c:	dfc00815 	stw	ra,32(sp)
    6260:	ddc00715 	stw	r23,28(sp)
    6264:	dd800615 	stw	r22,24(sp)
    6268:	dd400515 	stw	r21,20(sp)
    626c:	dd000415 	stw	r20,16(sp)
    6270:	dcc00315 	stw	r19,12(sp)
    6274:	dc800215 	stw	r18,8(sp)
    6278:	dc400115 	stw	r17,4(sp)
    627c:	dc000015 	stw	r16,0(sp)
    6280:	18d89204 	addi	r3,r3,25160
    6284:	24000117 	ldw	r16,4(r4)
    6288:	20c00f15 	stw	r3,60(r4)
    628c:	2080bb04 	addi	r2,r4,748
    6290:	00c000c4 	movi	r3,3
    6294:	20c0b915 	stw	r3,740(r4)
    6298:	2080ba15 	stw	r2,744(r4)
    629c:	2000b815 	stw	zero,736(r4)
    62a0:	05c00204 	movi	r23,8
    62a4:	00800104 	movi	r2,4
    62a8:	2025883a 	mov	r18,r4
    62ac:	b80d883a 	mov	r6,r23
    62b0:	81001704 	addi	r4,r16,92
    62b4:	000b883a 	mov	r5,zero
    62b8:	80000015 	stw	zero,0(r16)
    62bc:	80000115 	stw	zero,4(r16)
    62c0:	80000215 	stw	zero,8(r16)
    62c4:	8080030d 	sth	r2,12(r16)
    62c8:	80001915 	stw	zero,100(r16)
    62cc:	8000038d 	sth	zero,14(r16)
    62d0:	80000415 	stw	zero,16(r16)
    62d4:	80000515 	stw	zero,20(r16)
    62d8:	80000615 	stw	zero,24(r16)
    62dc:	00076940 	call	7694 <memset>
    62e0:	05800074 	movhi	r22,1
    62e4:	94400217 	ldw	r17,8(r18)
    62e8:	05400074 	movhi	r21,1
    62ec:	05000074 	movhi	r20,1
    62f0:	04c00074 	movhi	r19,1
    62f4:	b5a39304 	addi	r22,r22,-29108
    62f8:	ad63aa04 	addi	r21,r21,-29016
    62fc:	a523c904 	addi	r20,r20,-28892
    6300:	9ce3e004 	addi	r19,r19,-28800
    6304:	85800815 	stw	r22,32(r16)
    6308:	85400915 	stw	r21,36(r16)
    630c:	85000a15 	stw	r20,40(r16)
    6310:	84c00b15 	stw	r19,44(r16)
    6314:	84000715 	stw	r16,28(r16)
    6318:	00800284 	movi	r2,10
    631c:	8880030d 	sth	r2,12(r17)
    6320:	00800044 	movi	r2,1
    6324:	b80d883a 	mov	r6,r23
    6328:	89001704 	addi	r4,r17,92
    632c:	000b883a 	mov	r5,zero
    6330:	88000015 	stw	zero,0(r17)
    6334:	88000115 	stw	zero,4(r17)
    6338:	88000215 	stw	zero,8(r17)
    633c:	88001915 	stw	zero,100(r17)
    6340:	8880038d 	sth	r2,14(r17)
    6344:	88000415 	stw	zero,16(r17)
    6348:	88000515 	stw	zero,20(r17)
    634c:	88000615 	stw	zero,24(r17)
    6350:	00076940 	call	7694 <memset>
    6354:	94000317 	ldw	r16,12(r18)
    6358:	00800484 	movi	r2,18
    635c:	8c400715 	stw	r17,28(r17)
    6360:	8d800815 	stw	r22,32(r17)
    6364:	8d400915 	stw	r21,36(r17)
    6368:	8d000a15 	stw	r20,40(r17)
    636c:	8cc00b15 	stw	r19,44(r17)
    6370:	8080030d 	sth	r2,12(r16)
    6374:	00800084 	movi	r2,2
    6378:	80000015 	stw	zero,0(r16)
    637c:	80000115 	stw	zero,4(r16)
    6380:	80000215 	stw	zero,8(r16)
    6384:	80001915 	stw	zero,100(r16)
    6388:	8080038d 	sth	r2,14(r16)
    638c:	80000415 	stw	zero,16(r16)
    6390:	80000515 	stw	zero,20(r16)
    6394:	80000615 	stw	zero,24(r16)
    6398:	b80d883a 	mov	r6,r23
    639c:	000b883a 	mov	r5,zero
    63a0:	81001704 	addi	r4,r16,92
    63a4:	00076940 	call	7694 <memset>
    63a8:	00800044 	movi	r2,1
    63ac:	84000715 	stw	r16,28(r16)
    63b0:	85800815 	stw	r22,32(r16)
    63b4:	85400915 	stw	r21,36(r16)
    63b8:	85000a15 	stw	r20,40(r16)
    63bc:	84c00b15 	stw	r19,44(r16)
    63c0:	90800e15 	stw	r2,56(r18)
    63c4:	dfc00817 	ldw	ra,32(sp)
    63c8:	ddc00717 	ldw	r23,28(sp)
    63cc:	dd800617 	ldw	r22,24(sp)
    63d0:	dd400517 	ldw	r21,20(sp)
    63d4:	dd000417 	ldw	r20,16(sp)
    63d8:	dcc00317 	ldw	r19,12(sp)
    63dc:	dc800217 	ldw	r18,8(sp)
    63e0:	dc400117 	ldw	r17,4(sp)
    63e4:	dc000017 	ldw	r16,0(sp)
    63e8:	dec00904 	addi	sp,sp,36
    63ec:	f800283a 	ret

000063f0 <__fp_lock>:
    63f0:	0005883a 	mov	r2,zero
    63f4:	f800283a 	ret

000063f8 <__sfmoreglue>:
    63f8:	defffc04 	addi	sp,sp,-16
    63fc:	dc800215 	stw	r18,8(sp)
    6400:	2825883a 	mov	r18,r5
    6404:	dc000015 	stw	r16,0(sp)
    6408:	01401a04 	movi	r5,104
    640c:	2021883a 	mov	r16,r4
    6410:	913fffc4 	addi	r4,r18,-1
    6414:	dfc00315 	stw	ra,12(sp)
    6418:	dc400115 	stw	r17,4(sp)
    641c:	00017b40 	call	17b4 <__mulsi3>
    6420:	8009883a 	mov	r4,r16
    6424:	11401d04 	addi	r5,r2,116
    6428:	1023883a 	mov	r17,r2
    642c:	00019140 	call	1914 <_malloc_r>
    6430:	1021883a 	mov	r16,r2
    6434:	10000726 	beq	r2,zero,6454 <__sfmoreglue+0x5c>
    6438:	11000304 	addi	r4,r2,12
    643c:	10000015 	stw	zero,0(r2)
    6440:	14800115 	stw	r18,4(r2)
    6444:	11000215 	stw	r4,8(r2)
    6448:	89801a04 	addi	r6,r17,104
    644c:	000b883a 	mov	r5,zero
    6450:	00076940 	call	7694 <memset>
    6454:	8005883a 	mov	r2,r16
    6458:	dfc00317 	ldw	ra,12(sp)
    645c:	dc800217 	ldw	r18,8(sp)
    6460:	dc400117 	ldw	r17,4(sp)
    6464:	dc000017 	ldw	r16,0(sp)
    6468:	dec00404 	addi	sp,sp,16
    646c:	f800283a 	ret

00006470 <__sfp>:
    6470:	defffb04 	addi	sp,sp,-20
    6474:	dc000015 	stw	r16,0(sp)
    6478:	04000074 	movhi	r16,1
    647c:	84108204 	addi	r16,r16,16904
    6480:	dcc00315 	stw	r19,12(sp)
    6484:	2027883a 	mov	r19,r4
    6488:	81000017 	ldw	r4,0(r16)
    648c:	dfc00415 	stw	ra,16(sp)
    6490:	dc800215 	stw	r18,8(sp)
    6494:	20800e17 	ldw	r2,56(r4)
    6498:	dc400115 	stw	r17,4(sp)
    649c:	1000021e 	bne	r2,zero,64a8 <__sfp+0x38>
    64a0:	00062540 	call	6254 <__sinit.part.1>
    64a4:	81000017 	ldw	r4,0(r16)
    64a8:	2480b804 	addi	r18,r4,736
    64ac:	047fffc4 	movi	r17,-1
    64b0:	91000117 	ldw	r4,4(r18)
    64b4:	94000217 	ldw	r16,8(r18)
    64b8:	213fffc4 	addi	r4,r4,-1
    64bc:	20000a16 	blt	r4,zero,64e8 <__sfp+0x78>
    64c0:	8080030f 	ldh	r2,12(r16)
    64c4:	10000c26 	beq	r2,zero,64f8 <__sfp+0x88>
    64c8:	80c01d04 	addi	r3,r16,116
    64cc:	00000206 	br	64d8 <__sfp+0x68>
    64d0:	18bfe60f 	ldh	r2,-104(r3)
    64d4:	10000826 	beq	r2,zero,64f8 <__sfp+0x88>
    64d8:	213fffc4 	addi	r4,r4,-1
    64dc:	1c3ffd04 	addi	r16,r3,-12
    64e0:	18c01a04 	addi	r3,r3,104
    64e4:	247ffa1e 	bne	r4,r17,64d0 <__alt_data_end+0xf80064d0>
    64e8:	90800017 	ldw	r2,0(r18)
    64ec:	10001d26 	beq	r2,zero,6564 <__sfp+0xf4>
    64f0:	1025883a 	mov	r18,r2
    64f4:	003fee06 	br	64b0 <__alt_data_end+0xf80064b0>
    64f8:	00bfffc4 	movi	r2,-1
    64fc:	8080038d 	sth	r2,14(r16)
    6500:	00800044 	movi	r2,1
    6504:	8080030d 	sth	r2,12(r16)
    6508:	80001915 	stw	zero,100(r16)
    650c:	80000015 	stw	zero,0(r16)
    6510:	80000215 	stw	zero,8(r16)
    6514:	80000115 	stw	zero,4(r16)
    6518:	80000415 	stw	zero,16(r16)
    651c:	80000515 	stw	zero,20(r16)
    6520:	80000615 	stw	zero,24(r16)
    6524:	01800204 	movi	r6,8
    6528:	000b883a 	mov	r5,zero
    652c:	81001704 	addi	r4,r16,92
    6530:	00076940 	call	7694 <memset>
    6534:	8005883a 	mov	r2,r16
    6538:	80000c15 	stw	zero,48(r16)
    653c:	80000d15 	stw	zero,52(r16)
    6540:	80001115 	stw	zero,68(r16)
    6544:	80001215 	stw	zero,72(r16)
    6548:	dfc00417 	ldw	ra,16(sp)
    654c:	dcc00317 	ldw	r19,12(sp)
    6550:	dc800217 	ldw	r18,8(sp)
    6554:	dc400117 	ldw	r17,4(sp)
    6558:	dc000017 	ldw	r16,0(sp)
    655c:	dec00504 	addi	sp,sp,20
    6560:	f800283a 	ret
    6564:	01400104 	movi	r5,4
    6568:	9809883a 	mov	r4,r19
    656c:	00063f80 	call	63f8 <__sfmoreglue>
    6570:	90800015 	stw	r2,0(r18)
    6574:	103fde1e 	bne	r2,zero,64f0 <__alt_data_end+0xf80064f0>
    6578:	00800304 	movi	r2,12
    657c:	98800015 	stw	r2,0(r19)
    6580:	0005883a 	mov	r2,zero
    6584:	003ff006 	br	6548 <__alt_data_end+0xf8006548>

00006588 <_cleanup>:
    6588:	00800074 	movhi	r2,1
    658c:	10908204 	addi	r2,r2,16904
    6590:	11000017 	ldw	r4,0(r2)
    6594:	01400074 	movhi	r5,1
    6598:	296a6104 	addi	r5,r5,-22140
    659c:	0006fb01 	jmpi	6fb0 <_fwalk_reent>

000065a0 <__sinit>:
    65a0:	20800e17 	ldw	r2,56(r4)
    65a4:	10000126 	beq	r2,zero,65ac <__sinit+0xc>
    65a8:	f800283a 	ret
    65ac:	00062541 	jmpi	6254 <__sinit.part.1>

000065b0 <__sfp_lock_acquire>:
    65b0:	f800283a 	ret

000065b4 <__sfp_lock_release>:
    65b4:	f800283a 	ret

000065b8 <__sinit_lock_acquire>:
    65b8:	f800283a 	ret

000065bc <__sinit_lock_release>:
    65bc:	f800283a 	ret

000065c0 <__fp_lock_all>:
    65c0:	00800074 	movhi	r2,1
    65c4:	10908304 	addi	r2,r2,16908
    65c8:	11000017 	ldw	r4,0(r2)
    65cc:	01400034 	movhi	r5,0
    65d0:	2958fc04 	addi	r5,r5,25584
    65d4:	0006eec1 	jmpi	6eec <_fwalk>

000065d8 <__fp_unlock_all>:
    65d8:	00800074 	movhi	r2,1
    65dc:	10908304 	addi	r2,r2,16908
    65e0:	11000017 	ldw	r4,0(r2)
    65e4:	01400034 	movhi	r5,0
    65e8:	29589004 	addi	r5,r5,25152
    65ec:	0006eec1 	jmpi	6eec <_fwalk>

000065f0 <_malloc_trim_r>:
    65f0:	defffb04 	addi	sp,sp,-20
    65f4:	dcc00315 	stw	r19,12(sp)
    65f8:	04c00074 	movhi	r19,1
    65fc:	dc800215 	stw	r18,8(sp)
    6600:	dc400115 	stw	r17,4(sp)
    6604:	dc000015 	stw	r16,0(sp)
    6608:	dfc00415 	stw	ra,16(sp)
    660c:	2821883a 	mov	r16,r5
    6610:	9cca9804 	addi	r19,r19,10848
    6614:	2025883a 	mov	r18,r4
    6618:	000ede40 	call	ede4 <__malloc_lock>
    661c:	98800217 	ldw	r2,8(r19)
    6620:	14400117 	ldw	r17,4(r2)
    6624:	00bfff04 	movi	r2,-4
    6628:	88a2703a 	and	r17,r17,r2
    662c:	8c21c83a 	sub	r16,r17,r16
    6630:	8403fbc4 	addi	r16,r16,4079
    6634:	8020d33a 	srli	r16,r16,12
    6638:	0083ffc4 	movi	r2,4095
    663c:	843fffc4 	addi	r16,r16,-1
    6640:	8020933a 	slli	r16,r16,12
    6644:	1400060e 	bge	r2,r16,6660 <_malloc_trim_r+0x70>
    6648:	000b883a 	mov	r5,zero
    664c:	9009883a 	mov	r4,r18
    6650:	000218c0 	call	218c <_sbrk_r>
    6654:	98c00217 	ldw	r3,8(r19)
    6658:	1c47883a 	add	r3,r3,r17
    665c:	10c00a26 	beq	r2,r3,6688 <_malloc_trim_r+0x98>
    6660:	9009883a 	mov	r4,r18
    6664:	000ee080 	call	ee08 <__malloc_unlock>
    6668:	0005883a 	mov	r2,zero
    666c:	dfc00417 	ldw	ra,16(sp)
    6670:	dcc00317 	ldw	r19,12(sp)
    6674:	dc800217 	ldw	r18,8(sp)
    6678:	dc400117 	ldw	r17,4(sp)
    667c:	dc000017 	ldw	r16,0(sp)
    6680:	dec00504 	addi	sp,sp,20
    6684:	f800283a 	ret
    6688:	040bc83a 	sub	r5,zero,r16
    668c:	9009883a 	mov	r4,r18
    6690:	000218c0 	call	218c <_sbrk_r>
    6694:	00ffffc4 	movi	r3,-1
    6698:	10c00d26 	beq	r2,r3,66d0 <_malloc_trim_r+0xe0>
    669c:	00c00074 	movhi	r3,1
    66a0:	18d7a904 	addi	r3,r3,24228
    66a4:	18800017 	ldw	r2,0(r3)
    66a8:	99000217 	ldw	r4,8(r19)
    66ac:	8c23c83a 	sub	r17,r17,r16
    66b0:	8c400054 	ori	r17,r17,1
    66b4:	1421c83a 	sub	r16,r2,r16
    66b8:	24400115 	stw	r17,4(r4)
    66bc:	9009883a 	mov	r4,r18
    66c0:	1c000015 	stw	r16,0(r3)
    66c4:	000ee080 	call	ee08 <__malloc_unlock>
    66c8:	00800044 	movi	r2,1
    66cc:	003fe706 	br	666c <__alt_data_end+0xf800666c>
    66d0:	000b883a 	mov	r5,zero
    66d4:	9009883a 	mov	r4,r18
    66d8:	000218c0 	call	218c <_sbrk_r>
    66dc:	99000217 	ldw	r4,8(r19)
    66e0:	014003c4 	movi	r5,15
    66e4:	1107c83a 	sub	r3,r2,r4
    66e8:	28ffdd0e 	bge	r5,r3,6660 <__alt_data_end+0xf8006660>
    66ec:	01400074 	movhi	r5,1
    66f0:	29508404 	addi	r5,r5,16912
    66f4:	29400017 	ldw	r5,0(r5)
    66f8:	18c00054 	ori	r3,r3,1
    66fc:	20c00115 	stw	r3,4(r4)
    6700:	00c00074 	movhi	r3,1
    6704:	1145c83a 	sub	r2,r2,r5
    6708:	18d7a904 	addi	r3,r3,24228
    670c:	18800015 	stw	r2,0(r3)
    6710:	003fd306 	br	6660 <__alt_data_end+0xf8006660>

00006714 <_free_r>:
    6714:	28004126 	beq	r5,zero,681c <_free_r+0x108>
    6718:	defffd04 	addi	sp,sp,-12
    671c:	dc400115 	stw	r17,4(sp)
    6720:	dc000015 	stw	r16,0(sp)
    6724:	2023883a 	mov	r17,r4
    6728:	2821883a 	mov	r16,r5
    672c:	dfc00215 	stw	ra,8(sp)
    6730:	000ede40 	call	ede4 <__malloc_lock>
    6734:	81ffff17 	ldw	r7,-4(r16)
    6738:	00bfff84 	movi	r2,-2
    673c:	01000074 	movhi	r4,1
    6740:	81bffe04 	addi	r6,r16,-8
    6744:	3884703a 	and	r2,r7,r2
    6748:	210a9804 	addi	r4,r4,10848
    674c:	308b883a 	add	r5,r6,r2
    6750:	2a400117 	ldw	r9,4(r5)
    6754:	22000217 	ldw	r8,8(r4)
    6758:	00ffff04 	movi	r3,-4
    675c:	48c6703a 	and	r3,r9,r3
    6760:	2a005726 	beq	r5,r8,68c0 <_free_r+0x1ac>
    6764:	28c00115 	stw	r3,4(r5)
    6768:	39c0004c 	andi	r7,r7,1
    676c:	3800091e 	bne	r7,zero,6794 <_free_r+0x80>
    6770:	823ffe17 	ldw	r8,-8(r16)
    6774:	22400204 	addi	r9,r4,8
    6778:	320dc83a 	sub	r6,r6,r8
    677c:	31c00217 	ldw	r7,8(r6)
    6780:	1205883a 	add	r2,r2,r8
    6784:	3a406526 	beq	r7,r9,691c <_free_r+0x208>
    6788:	32000317 	ldw	r8,12(r6)
    678c:	3a000315 	stw	r8,12(r7)
    6790:	41c00215 	stw	r7,8(r8)
    6794:	28cf883a 	add	r7,r5,r3
    6798:	39c00117 	ldw	r7,4(r7)
    679c:	39c0004c 	andi	r7,r7,1
    67a0:	38003a26 	beq	r7,zero,688c <_free_r+0x178>
    67a4:	10c00054 	ori	r3,r2,1
    67a8:	30c00115 	stw	r3,4(r6)
    67ac:	3087883a 	add	r3,r6,r2
    67b0:	18800015 	stw	r2,0(r3)
    67b4:	00c07fc4 	movi	r3,511
    67b8:	18801936 	bltu	r3,r2,6820 <_free_r+0x10c>
    67bc:	1004d0fa 	srli	r2,r2,3
    67c0:	01c00044 	movi	r7,1
    67c4:	21400117 	ldw	r5,4(r4)
    67c8:	10c00044 	addi	r3,r2,1
    67cc:	18c7883a 	add	r3,r3,r3
    67d0:	1005d0ba 	srai	r2,r2,2
    67d4:	18c7883a 	add	r3,r3,r3
    67d8:	18c7883a 	add	r3,r3,r3
    67dc:	1907883a 	add	r3,r3,r4
    67e0:	3884983a 	sll	r2,r7,r2
    67e4:	19c00017 	ldw	r7,0(r3)
    67e8:	1a3ffe04 	addi	r8,r3,-8
    67ec:	1144b03a 	or	r2,r2,r5
    67f0:	32000315 	stw	r8,12(r6)
    67f4:	31c00215 	stw	r7,8(r6)
    67f8:	20800115 	stw	r2,4(r4)
    67fc:	19800015 	stw	r6,0(r3)
    6800:	39800315 	stw	r6,12(r7)
    6804:	8809883a 	mov	r4,r17
    6808:	dfc00217 	ldw	ra,8(sp)
    680c:	dc400117 	ldw	r17,4(sp)
    6810:	dc000017 	ldw	r16,0(sp)
    6814:	dec00304 	addi	sp,sp,12
    6818:	000ee081 	jmpi	ee08 <__malloc_unlock>
    681c:	f800283a 	ret
    6820:	100ad27a 	srli	r5,r2,9
    6824:	00c00104 	movi	r3,4
    6828:	19404a36 	bltu	r3,r5,6954 <_free_r+0x240>
    682c:	100ad1ba 	srli	r5,r2,6
    6830:	28c00e44 	addi	r3,r5,57
    6834:	18c7883a 	add	r3,r3,r3
    6838:	29400e04 	addi	r5,r5,56
    683c:	18c7883a 	add	r3,r3,r3
    6840:	18c7883a 	add	r3,r3,r3
    6844:	1909883a 	add	r4,r3,r4
    6848:	20c00017 	ldw	r3,0(r4)
    684c:	01c00074 	movhi	r7,1
    6850:	213ffe04 	addi	r4,r4,-8
    6854:	39ca9804 	addi	r7,r7,10848
    6858:	20c04426 	beq	r4,r3,696c <_free_r+0x258>
    685c:	01ffff04 	movi	r7,-4
    6860:	19400117 	ldw	r5,4(r3)
    6864:	29ca703a 	and	r5,r5,r7
    6868:	1140022e 	bgeu	r2,r5,6874 <_free_r+0x160>
    686c:	18c00217 	ldw	r3,8(r3)
    6870:	20fffb1e 	bne	r4,r3,6860 <__alt_data_end+0xf8006860>
    6874:	19000317 	ldw	r4,12(r3)
    6878:	31000315 	stw	r4,12(r6)
    687c:	30c00215 	stw	r3,8(r6)
    6880:	21800215 	stw	r6,8(r4)
    6884:	19800315 	stw	r6,12(r3)
    6888:	003fde06 	br	6804 <__alt_data_end+0xf8006804>
    688c:	29c00217 	ldw	r7,8(r5)
    6890:	10c5883a 	add	r2,r2,r3
    6894:	00c00074 	movhi	r3,1
    6898:	18ca9a04 	addi	r3,r3,10856
    689c:	38c03b26 	beq	r7,r3,698c <_free_r+0x278>
    68a0:	2a000317 	ldw	r8,12(r5)
    68a4:	11400054 	ori	r5,r2,1
    68a8:	3087883a 	add	r3,r6,r2
    68ac:	3a000315 	stw	r8,12(r7)
    68b0:	41c00215 	stw	r7,8(r8)
    68b4:	31400115 	stw	r5,4(r6)
    68b8:	18800015 	stw	r2,0(r3)
    68bc:	003fbd06 	br	67b4 <__alt_data_end+0xf80067b4>
    68c0:	39c0004c 	andi	r7,r7,1
    68c4:	10c5883a 	add	r2,r2,r3
    68c8:	3800071e 	bne	r7,zero,68e8 <_free_r+0x1d4>
    68cc:	81fffe17 	ldw	r7,-8(r16)
    68d0:	31cdc83a 	sub	r6,r6,r7
    68d4:	30c00317 	ldw	r3,12(r6)
    68d8:	31400217 	ldw	r5,8(r6)
    68dc:	11c5883a 	add	r2,r2,r7
    68e0:	28c00315 	stw	r3,12(r5)
    68e4:	19400215 	stw	r5,8(r3)
    68e8:	10c00054 	ori	r3,r2,1
    68ec:	30c00115 	stw	r3,4(r6)
    68f0:	00c00074 	movhi	r3,1
    68f4:	18d08504 	addi	r3,r3,16916
    68f8:	18c00017 	ldw	r3,0(r3)
    68fc:	21800215 	stw	r6,8(r4)
    6900:	10ffc036 	bltu	r2,r3,6804 <__alt_data_end+0xf8006804>
    6904:	00800074 	movhi	r2,1
    6908:	10979b04 	addi	r2,r2,24172
    690c:	11400017 	ldw	r5,0(r2)
    6910:	8809883a 	mov	r4,r17
    6914:	00065f00 	call	65f0 <_malloc_trim_r>
    6918:	003fba06 	br	6804 <__alt_data_end+0xf8006804>
    691c:	28c9883a 	add	r4,r5,r3
    6920:	21000117 	ldw	r4,4(r4)
    6924:	2100004c 	andi	r4,r4,1
    6928:	2000391e 	bne	r4,zero,6a10 <_free_r+0x2fc>
    692c:	29c00217 	ldw	r7,8(r5)
    6930:	29000317 	ldw	r4,12(r5)
    6934:	1885883a 	add	r2,r3,r2
    6938:	10c00054 	ori	r3,r2,1
    693c:	39000315 	stw	r4,12(r7)
    6940:	21c00215 	stw	r7,8(r4)
    6944:	30c00115 	stw	r3,4(r6)
    6948:	308d883a 	add	r6,r6,r2
    694c:	30800015 	stw	r2,0(r6)
    6950:	003fac06 	br	6804 <__alt_data_end+0xf8006804>
    6954:	00c00504 	movi	r3,20
    6958:	19401536 	bltu	r3,r5,69b0 <_free_r+0x29c>
    695c:	28c01704 	addi	r3,r5,92
    6960:	18c7883a 	add	r3,r3,r3
    6964:	294016c4 	addi	r5,r5,91
    6968:	003fb406 	br	683c <__alt_data_end+0xf800683c>
    696c:	280bd0ba 	srai	r5,r5,2
    6970:	00c00044 	movi	r3,1
    6974:	38800117 	ldw	r2,4(r7)
    6978:	194a983a 	sll	r5,r3,r5
    697c:	2007883a 	mov	r3,r4
    6980:	2884b03a 	or	r2,r5,r2
    6984:	38800115 	stw	r2,4(r7)
    6988:	003fbb06 	br	6878 <__alt_data_end+0xf8006878>
    698c:	21800515 	stw	r6,20(r4)
    6990:	21800415 	stw	r6,16(r4)
    6994:	10c00054 	ori	r3,r2,1
    6998:	31c00315 	stw	r7,12(r6)
    699c:	31c00215 	stw	r7,8(r6)
    69a0:	30c00115 	stw	r3,4(r6)
    69a4:	308d883a 	add	r6,r6,r2
    69a8:	30800015 	stw	r2,0(r6)
    69ac:	003f9506 	br	6804 <__alt_data_end+0xf8006804>
    69b0:	00c01504 	movi	r3,84
    69b4:	19400536 	bltu	r3,r5,69cc <_free_r+0x2b8>
    69b8:	100ad33a 	srli	r5,r2,12
    69bc:	28c01bc4 	addi	r3,r5,111
    69c0:	18c7883a 	add	r3,r3,r3
    69c4:	29401b84 	addi	r5,r5,110
    69c8:	003f9c06 	br	683c <__alt_data_end+0xf800683c>
    69cc:	00c05504 	movi	r3,340
    69d0:	19400536 	bltu	r3,r5,69e8 <_free_r+0x2d4>
    69d4:	100ad3fa 	srli	r5,r2,15
    69d8:	28c01e04 	addi	r3,r5,120
    69dc:	18c7883a 	add	r3,r3,r3
    69e0:	29401dc4 	addi	r5,r5,119
    69e4:	003f9506 	br	683c <__alt_data_end+0xf800683c>
    69e8:	00c15504 	movi	r3,1364
    69ec:	19400536 	bltu	r3,r5,6a04 <_free_r+0x2f0>
    69f0:	100ad4ba 	srli	r5,r2,18
    69f4:	28c01f44 	addi	r3,r5,125
    69f8:	18c7883a 	add	r3,r3,r3
    69fc:	29401f04 	addi	r5,r5,124
    6a00:	003f8e06 	br	683c <__alt_data_end+0xf800683c>
    6a04:	00c03f84 	movi	r3,254
    6a08:	01401f84 	movi	r5,126
    6a0c:	003f8b06 	br	683c <__alt_data_end+0xf800683c>
    6a10:	10c00054 	ori	r3,r2,1
    6a14:	30c00115 	stw	r3,4(r6)
    6a18:	308d883a 	add	r6,r6,r2
    6a1c:	30800015 	stw	r2,0(r6)
    6a20:	003f7806 	br	6804 <__alt_data_end+0xf8006804>

00006a24 <__sfvwrite_r>:
    6a24:	30800217 	ldw	r2,8(r6)
    6a28:	10006726 	beq	r2,zero,6bc8 <__sfvwrite_r+0x1a4>
    6a2c:	28c0030b 	ldhu	r3,12(r5)
    6a30:	defff404 	addi	sp,sp,-48
    6a34:	dd400715 	stw	r21,28(sp)
    6a38:	dd000615 	stw	r20,24(sp)
    6a3c:	dc000215 	stw	r16,8(sp)
    6a40:	dfc00b15 	stw	ra,44(sp)
    6a44:	df000a15 	stw	fp,40(sp)
    6a48:	ddc00915 	stw	r23,36(sp)
    6a4c:	dd800815 	stw	r22,32(sp)
    6a50:	dcc00515 	stw	r19,20(sp)
    6a54:	dc800415 	stw	r18,16(sp)
    6a58:	dc400315 	stw	r17,12(sp)
    6a5c:	1880020c 	andi	r2,r3,8
    6a60:	2821883a 	mov	r16,r5
    6a64:	202b883a 	mov	r21,r4
    6a68:	3029883a 	mov	r20,r6
    6a6c:	10002726 	beq	r2,zero,6b0c <__sfvwrite_r+0xe8>
    6a70:	28800417 	ldw	r2,16(r5)
    6a74:	10002526 	beq	r2,zero,6b0c <__sfvwrite_r+0xe8>
    6a78:	1880008c 	andi	r2,r3,2
    6a7c:	a4400017 	ldw	r17,0(r20)
    6a80:	10002a26 	beq	r2,zero,6b2c <__sfvwrite_r+0x108>
    6a84:	05a00034 	movhi	r22,32768
    6a88:	0027883a 	mov	r19,zero
    6a8c:	0025883a 	mov	r18,zero
    6a90:	b5bf0004 	addi	r22,r22,-1024
    6a94:	980d883a 	mov	r6,r19
    6a98:	a809883a 	mov	r4,r21
    6a9c:	90004626 	beq	r18,zero,6bb8 <__sfvwrite_r+0x194>
    6aa0:	900f883a 	mov	r7,r18
    6aa4:	b480022e 	bgeu	r22,r18,6ab0 <__sfvwrite_r+0x8c>
    6aa8:	01e00034 	movhi	r7,32768
    6aac:	39ff0004 	addi	r7,r7,-1024
    6ab0:	80800917 	ldw	r2,36(r16)
    6ab4:	81400717 	ldw	r5,28(r16)
    6ab8:	103ee83a 	callr	r2
    6abc:	00805a0e 	bge	zero,r2,6c28 <__sfvwrite_r+0x204>
    6ac0:	a0c00217 	ldw	r3,8(r20)
    6ac4:	98a7883a 	add	r19,r19,r2
    6ac8:	90a5c83a 	sub	r18,r18,r2
    6acc:	1885c83a 	sub	r2,r3,r2
    6ad0:	a0800215 	stw	r2,8(r20)
    6ad4:	103fef1e 	bne	r2,zero,6a94 <__alt_data_end+0xf8006a94>
    6ad8:	0005883a 	mov	r2,zero
    6adc:	dfc00b17 	ldw	ra,44(sp)
    6ae0:	df000a17 	ldw	fp,40(sp)
    6ae4:	ddc00917 	ldw	r23,36(sp)
    6ae8:	dd800817 	ldw	r22,32(sp)
    6aec:	dd400717 	ldw	r21,28(sp)
    6af0:	dd000617 	ldw	r20,24(sp)
    6af4:	dcc00517 	ldw	r19,20(sp)
    6af8:	dc800417 	ldw	r18,16(sp)
    6afc:	dc400317 	ldw	r17,12(sp)
    6b00:	dc000217 	ldw	r16,8(sp)
    6b04:	dec00c04 	addi	sp,sp,48
    6b08:	f800283a 	ret
    6b0c:	800b883a 	mov	r5,r16
    6b10:	a809883a 	mov	r4,r21
    6b14:	00045940 	call	4594 <__swsetup_r>
    6b18:	1000ee1e 	bne	r2,zero,6ed4 <__sfvwrite_r+0x4b0>
    6b1c:	80c0030b 	ldhu	r3,12(r16)
    6b20:	a4400017 	ldw	r17,0(r20)
    6b24:	1880008c 	andi	r2,r3,2
    6b28:	103fd61e 	bne	r2,zero,6a84 <__alt_data_end+0xf8006a84>
    6b2c:	1880004c 	andi	r2,r3,1
    6b30:	1000421e 	bne	r2,zero,6c3c <__sfvwrite_r+0x218>
    6b34:	0039883a 	mov	fp,zero
    6b38:	0025883a 	mov	r18,zero
    6b3c:	90001a26 	beq	r18,zero,6ba8 <__sfvwrite_r+0x184>
    6b40:	1880800c 	andi	r2,r3,512
    6b44:	84c00217 	ldw	r19,8(r16)
    6b48:	10002126 	beq	r2,zero,6bd0 <__sfvwrite_r+0x1ac>
    6b4c:	982f883a 	mov	r23,r19
    6b50:	94c09636 	bltu	r18,r19,6dac <__sfvwrite_r+0x388>
    6b54:	1881200c 	andi	r2,r3,1152
    6b58:	1000a11e 	bne	r2,zero,6de0 <__sfvwrite_r+0x3bc>
    6b5c:	81000017 	ldw	r4,0(r16)
    6b60:	b80d883a 	mov	r6,r23
    6b64:	e00b883a 	mov	r5,fp
    6b68:	00075380 	call	7538 <memmove>
    6b6c:	80c00217 	ldw	r3,8(r16)
    6b70:	81000017 	ldw	r4,0(r16)
    6b74:	9005883a 	mov	r2,r18
    6b78:	1ce7c83a 	sub	r19,r3,r19
    6b7c:	25cf883a 	add	r7,r4,r23
    6b80:	84c00215 	stw	r19,8(r16)
    6b84:	81c00015 	stw	r7,0(r16)
    6b88:	a0c00217 	ldw	r3,8(r20)
    6b8c:	e0b9883a 	add	fp,fp,r2
    6b90:	90a5c83a 	sub	r18,r18,r2
    6b94:	18a7c83a 	sub	r19,r3,r2
    6b98:	a4c00215 	stw	r19,8(r20)
    6b9c:	983fce26 	beq	r19,zero,6ad8 <__alt_data_end+0xf8006ad8>
    6ba0:	80c0030b 	ldhu	r3,12(r16)
    6ba4:	903fe61e 	bne	r18,zero,6b40 <__alt_data_end+0xf8006b40>
    6ba8:	8f000017 	ldw	fp,0(r17)
    6bac:	8c800117 	ldw	r18,4(r17)
    6bb0:	8c400204 	addi	r17,r17,8
    6bb4:	003fe106 	br	6b3c <__alt_data_end+0xf8006b3c>
    6bb8:	8cc00017 	ldw	r19,0(r17)
    6bbc:	8c800117 	ldw	r18,4(r17)
    6bc0:	8c400204 	addi	r17,r17,8
    6bc4:	003fb306 	br	6a94 <__alt_data_end+0xf8006a94>
    6bc8:	0005883a 	mov	r2,zero
    6bcc:	f800283a 	ret
    6bd0:	81000017 	ldw	r4,0(r16)
    6bd4:	80800417 	ldw	r2,16(r16)
    6bd8:	11005a36 	bltu	r2,r4,6d44 <__sfvwrite_r+0x320>
    6bdc:	85c00517 	ldw	r23,20(r16)
    6be0:	95c05836 	bltu	r18,r23,6d44 <__sfvwrite_r+0x320>
    6be4:	00a00034 	movhi	r2,32768
    6be8:	10bfffc4 	addi	r2,r2,-1
    6bec:	9009883a 	mov	r4,r18
    6bf0:	1480012e 	bgeu	r2,r18,6bf8 <__sfvwrite_r+0x1d4>
    6bf4:	1009883a 	mov	r4,r2
    6bf8:	b80b883a 	mov	r5,r23
    6bfc:	000bd000 	call	bd00 <__divsi3>
    6c00:	b80b883a 	mov	r5,r23
    6c04:	1009883a 	mov	r4,r2
    6c08:	00017b40 	call	17b4 <__mulsi3>
    6c0c:	81400717 	ldw	r5,28(r16)
    6c10:	80c00917 	ldw	r3,36(r16)
    6c14:	100f883a 	mov	r7,r2
    6c18:	e00d883a 	mov	r6,fp
    6c1c:	a809883a 	mov	r4,r21
    6c20:	183ee83a 	callr	r3
    6c24:	00bfd816 	blt	zero,r2,6b88 <__alt_data_end+0xf8006b88>
    6c28:	8080030b 	ldhu	r2,12(r16)
    6c2c:	10801014 	ori	r2,r2,64
    6c30:	8080030d 	sth	r2,12(r16)
    6c34:	00bfffc4 	movi	r2,-1
    6c38:	003fa806 	br	6adc <__alt_data_end+0xf8006adc>
    6c3c:	0027883a 	mov	r19,zero
    6c40:	0011883a 	mov	r8,zero
    6c44:	0039883a 	mov	fp,zero
    6c48:	0025883a 	mov	r18,zero
    6c4c:	90001f26 	beq	r18,zero,6ccc <__sfvwrite_r+0x2a8>
    6c50:	40005a26 	beq	r8,zero,6dbc <__sfvwrite_r+0x398>
    6c54:	982d883a 	mov	r22,r19
    6c58:	94c0012e 	bgeu	r18,r19,6c60 <__sfvwrite_r+0x23c>
    6c5c:	902d883a 	mov	r22,r18
    6c60:	81000017 	ldw	r4,0(r16)
    6c64:	80800417 	ldw	r2,16(r16)
    6c68:	b02f883a 	mov	r23,r22
    6c6c:	81c00517 	ldw	r7,20(r16)
    6c70:	1100032e 	bgeu	r2,r4,6c80 <__sfvwrite_r+0x25c>
    6c74:	80c00217 	ldw	r3,8(r16)
    6c78:	38c7883a 	add	r3,r7,r3
    6c7c:	1d801816 	blt	r3,r22,6ce0 <__sfvwrite_r+0x2bc>
    6c80:	b1c03e16 	blt	r22,r7,6d7c <__sfvwrite_r+0x358>
    6c84:	80800917 	ldw	r2,36(r16)
    6c88:	81400717 	ldw	r5,28(r16)
    6c8c:	e00d883a 	mov	r6,fp
    6c90:	da000115 	stw	r8,4(sp)
    6c94:	a809883a 	mov	r4,r21
    6c98:	103ee83a 	callr	r2
    6c9c:	102f883a 	mov	r23,r2
    6ca0:	da000117 	ldw	r8,4(sp)
    6ca4:	00bfe00e 	bge	zero,r2,6c28 <__alt_data_end+0xf8006c28>
    6ca8:	9de7c83a 	sub	r19,r19,r23
    6cac:	98001f26 	beq	r19,zero,6d2c <__sfvwrite_r+0x308>
    6cb0:	a0800217 	ldw	r2,8(r20)
    6cb4:	e5f9883a 	add	fp,fp,r23
    6cb8:	95e5c83a 	sub	r18,r18,r23
    6cbc:	15efc83a 	sub	r23,r2,r23
    6cc0:	a5c00215 	stw	r23,8(r20)
    6cc4:	b83f8426 	beq	r23,zero,6ad8 <__alt_data_end+0xf8006ad8>
    6cc8:	903fe11e 	bne	r18,zero,6c50 <__alt_data_end+0xf8006c50>
    6ccc:	8f000017 	ldw	fp,0(r17)
    6cd0:	8c800117 	ldw	r18,4(r17)
    6cd4:	0011883a 	mov	r8,zero
    6cd8:	8c400204 	addi	r17,r17,8
    6cdc:	003fdb06 	br	6c4c <__alt_data_end+0xf8006c4c>
    6ce0:	180d883a 	mov	r6,r3
    6ce4:	e00b883a 	mov	r5,fp
    6ce8:	da000115 	stw	r8,4(sp)
    6cec:	d8c00015 	stw	r3,0(sp)
    6cf0:	00075380 	call	7538 <memmove>
    6cf4:	d8c00017 	ldw	r3,0(sp)
    6cf8:	80800017 	ldw	r2,0(r16)
    6cfc:	800b883a 	mov	r5,r16
    6d00:	a809883a 	mov	r4,r21
    6d04:	10c5883a 	add	r2,r2,r3
    6d08:	80800015 	stw	r2,0(r16)
    6d0c:	d8c00015 	stw	r3,0(sp)
    6d10:	00061b40 	call	61b4 <_fflush_r>
    6d14:	d8c00017 	ldw	r3,0(sp)
    6d18:	da000117 	ldw	r8,4(sp)
    6d1c:	103fc21e 	bne	r2,zero,6c28 <__alt_data_end+0xf8006c28>
    6d20:	182f883a 	mov	r23,r3
    6d24:	9de7c83a 	sub	r19,r19,r23
    6d28:	983fe11e 	bne	r19,zero,6cb0 <__alt_data_end+0xf8006cb0>
    6d2c:	800b883a 	mov	r5,r16
    6d30:	a809883a 	mov	r4,r21
    6d34:	00061b40 	call	61b4 <_fflush_r>
    6d38:	103fbb1e 	bne	r2,zero,6c28 <__alt_data_end+0xf8006c28>
    6d3c:	0011883a 	mov	r8,zero
    6d40:	003fdb06 	br	6cb0 <__alt_data_end+0xf8006cb0>
    6d44:	94c0012e 	bgeu	r18,r19,6d4c <__sfvwrite_r+0x328>
    6d48:	9027883a 	mov	r19,r18
    6d4c:	980d883a 	mov	r6,r19
    6d50:	e00b883a 	mov	r5,fp
    6d54:	00075380 	call	7538 <memmove>
    6d58:	80800217 	ldw	r2,8(r16)
    6d5c:	80c00017 	ldw	r3,0(r16)
    6d60:	14c5c83a 	sub	r2,r2,r19
    6d64:	1cc7883a 	add	r3,r3,r19
    6d68:	80800215 	stw	r2,8(r16)
    6d6c:	80c00015 	stw	r3,0(r16)
    6d70:	10004326 	beq	r2,zero,6e80 <__sfvwrite_r+0x45c>
    6d74:	9805883a 	mov	r2,r19
    6d78:	003f8306 	br	6b88 <__alt_data_end+0xf8006b88>
    6d7c:	b00d883a 	mov	r6,r22
    6d80:	e00b883a 	mov	r5,fp
    6d84:	da000115 	stw	r8,4(sp)
    6d88:	00075380 	call	7538 <memmove>
    6d8c:	80800217 	ldw	r2,8(r16)
    6d90:	80c00017 	ldw	r3,0(r16)
    6d94:	da000117 	ldw	r8,4(sp)
    6d98:	1585c83a 	sub	r2,r2,r22
    6d9c:	1dad883a 	add	r22,r3,r22
    6da0:	80800215 	stw	r2,8(r16)
    6da4:	85800015 	stw	r22,0(r16)
    6da8:	003fbf06 	br	6ca8 <__alt_data_end+0xf8006ca8>
    6dac:	81000017 	ldw	r4,0(r16)
    6db0:	9027883a 	mov	r19,r18
    6db4:	902f883a 	mov	r23,r18
    6db8:	003f6906 	br	6b60 <__alt_data_end+0xf8006b60>
    6dbc:	900d883a 	mov	r6,r18
    6dc0:	01400284 	movi	r5,10
    6dc4:	e009883a 	mov	r4,fp
    6dc8:	000730c0 	call	730c <memchr>
    6dcc:	10003e26 	beq	r2,zero,6ec8 <__sfvwrite_r+0x4a4>
    6dd0:	10800044 	addi	r2,r2,1
    6dd4:	1727c83a 	sub	r19,r2,fp
    6dd8:	02000044 	movi	r8,1
    6ddc:	003f9d06 	br	6c54 <__alt_data_end+0xf8006c54>
    6de0:	80800517 	ldw	r2,20(r16)
    6de4:	81400417 	ldw	r5,16(r16)
    6de8:	81c00017 	ldw	r7,0(r16)
    6dec:	10a7883a 	add	r19,r2,r2
    6df0:	9885883a 	add	r2,r19,r2
    6df4:	1026d7fa 	srli	r19,r2,31
    6df8:	396dc83a 	sub	r22,r7,r5
    6dfc:	b1000044 	addi	r4,r22,1
    6e00:	9885883a 	add	r2,r19,r2
    6e04:	1027d07a 	srai	r19,r2,1
    6e08:	2485883a 	add	r2,r4,r18
    6e0c:	980d883a 	mov	r6,r19
    6e10:	9880022e 	bgeu	r19,r2,6e1c <__sfvwrite_r+0x3f8>
    6e14:	1027883a 	mov	r19,r2
    6e18:	100d883a 	mov	r6,r2
    6e1c:	18c1000c 	andi	r3,r3,1024
    6e20:	18001c26 	beq	r3,zero,6e94 <__sfvwrite_r+0x470>
    6e24:	300b883a 	mov	r5,r6
    6e28:	a809883a 	mov	r4,r21
    6e2c:	00019140 	call	1914 <_malloc_r>
    6e30:	102f883a 	mov	r23,r2
    6e34:	10002926 	beq	r2,zero,6edc <__sfvwrite_r+0x4b8>
    6e38:	81400417 	ldw	r5,16(r16)
    6e3c:	b00d883a 	mov	r6,r22
    6e40:	1009883a 	mov	r4,r2
    6e44:	00073f00 	call	73f0 <memcpy>
    6e48:	8080030b 	ldhu	r2,12(r16)
    6e4c:	00fedfc4 	movi	r3,-1153
    6e50:	10c4703a 	and	r2,r2,r3
    6e54:	10802014 	ori	r2,r2,128
    6e58:	8080030d 	sth	r2,12(r16)
    6e5c:	bd89883a 	add	r4,r23,r22
    6e60:	9d8fc83a 	sub	r7,r19,r22
    6e64:	85c00415 	stw	r23,16(r16)
    6e68:	84c00515 	stw	r19,20(r16)
    6e6c:	81000015 	stw	r4,0(r16)
    6e70:	9027883a 	mov	r19,r18
    6e74:	81c00215 	stw	r7,8(r16)
    6e78:	902f883a 	mov	r23,r18
    6e7c:	003f3806 	br	6b60 <__alt_data_end+0xf8006b60>
    6e80:	800b883a 	mov	r5,r16
    6e84:	a809883a 	mov	r4,r21
    6e88:	00061b40 	call	61b4 <_fflush_r>
    6e8c:	103fb926 	beq	r2,zero,6d74 <__alt_data_end+0xf8006d74>
    6e90:	003f6506 	br	6c28 <__alt_data_end+0xf8006c28>
    6e94:	a809883a 	mov	r4,r21
    6e98:	00088740 	call	8874 <_realloc_r>
    6e9c:	102f883a 	mov	r23,r2
    6ea0:	103fee1e 	bne	r2,zero,6e5c <__alt_data_end+0xf8006e5c>
    6ea4:	81400417 	ldw	r5,16(r16)
    6ea8:	a809883a 	mov	r4,r21
    6eac:	00067140 	call	6714 <_free_r>
    6eb0:	8080030b 	ldhu	r2,12(r16)
    6eb4:	00ffdfc4 	movi	r3,-129
    6eb8:	1884703a 	and	r2,r3,r2
    6ebc:	00c00304 	movi	r3,12
    6ec0:	a8c00015 	stw	r3,0(r21)
    6ec4:	003f5906 	br	6c2c <__alt_data_end+0xf8006c2c>
    6ec8:	94c00044 	addi	r19,r18,1
    6ecc:	02000044 	movi	r8,1
    6ed0:	003f6006 	br	6c54 <__alt_data_end+0xf8006c54>
    6ed4:	00bfffc4 	movi	r2,-1
    6ed8:	003f0006 	br	6adc <__alt_data_end+0xf8006adc>
    6edc:	00800304 	movi	r2,12
    6ee0:	a8800015 	stw	r2,0(r21)
    6ee4:	8080030b 	ldhu	r2,12(r16)
    6ee8:	003f5006 	br	6c2c <__alt_data_end+0xf8006c2c>

00006eec <_fwalk>:
    6eec:	defff704 	addi	sp,sp,-36
    6ef0:	dd000415 	stw	r20,16(sp)
    6ef4:	dfc00815 	stw	ra,32(sp)
    6ef8:	ddc00715 	stw	r23,28(sp)
    6efc:	dd800615 	stw	r22,24(sp)
    6f00:	dd400515 	stw	r21,20(sp)
    6f04:	dcc00315 	stw	r19,12(sp)
    6f08:	dc800215 	stw	r18,8(sp)
    6f0c:	dc400115 	stw	r17,4(sp)
    6f10:	dc000015 	stw	r16,0(sp)
    6f14:	2500b804 	addi	r20,r4,736
    6f18:	a0002326 	beq	r20,zero,6fa8 <_fwalk+0xbc>
    6f1c:	282b883a 	mov	r21,r5
    6f20:	002f883a 	mov	r23,zero
    6f24:	05800044 	movi	r22,1
    6f28:	04ffffc4 	movi	r19,-1
    6f2c:	a4400117 	ldw	r17,4(r20)
    6f30:	a4800217 	ldw	r18,8(r20)
    6f34:	8c7fffc4 	addi	r17,r17,-1
    6f38:	88000d16 	blt	r17,zero,6f70 <_fwalk+0x84>
    6f3c:	94000304 	addi	r16,r18,12
    6f40:	94800384 	addi	r18,r18,14
    6f44:	8080000b 	ldhu	r2,0(r16)
    6f48:	8c7fffc4 	addi	r17,r17,-1
    6f4c:	813ffd04 	addi	r4,r16,-12
    6f50:	b080042e 	bgeu	r22,r2,6f64 <_fwalk+0x78>
    6f54:	9080000f 	ldh	r2,0(r18)
    6f58:	14c00226 	beq	r2,r19,6f64 <_fwalk+0x78>
    6f5c:	a83ee83a 	callr	r21
    6f60:	b8aeb03a 	or	r23,r23,r2
    6f64:	84001a04 	addi	r16,r16,104
    6f68:	94801a04 	addi	r18,r18,104
    6f6c:	8cfff51e 	bne	r17,r19,6f44 <__alt_data_end+0xf8006f44>
    6f70:	a5000017 	ldw	r20,0(r20)
    6f74:	a03fed1e 	bne	r20,zero,6f2c <__alt_data_end+0xf8006f2c>
    6f78:	b805883a 	mov	r2,r23
    6f7c:	dfc00817 	ldw	ra,32(sp)
    6f80:	ddc00717 	ldw	r23,28(sp)
    6f84:	dd800617 	ldw	r22,24(sp)
    6f88:	dd400517 	ldw	r21,20(sp)
    6f8c:	dd000417 	ldw	r20,16(sp)
    6f90:	dcc00317 	ldw	r19,12(sp)
    6f94:	dc800217 	ldw	r18,8(sp)
    6f98:	dc400117 	ldw	r17,4(sp)
    6f9c:	dc000017 	ldw	r16,0(sp)
    6fa0:	dec00904 	addi	sp,sp,36
    6fa4:	f800283a 	ret
    6fa8:	002f883a 	mov	r23,zero
    6fac:	003ff206 	br	6f78 <__alt_data_end+0xf8006f78>

00006fb0 <_fwalk_reent>:
    6fb0:	defff704 	addi	sp,sp,-36
    6fb4:	dd000415 	stw	r20,16(sp)
    6fb8:	dfc00815 	stw	ra,32(sp)
    6fbc:	ddc00715 	stw	r23,28(sp)
    6fc0:	dd800615 	stw	r22,24(sp)
    6fc4:	dd400515 	stw	r21,20(sp)
    6fc8:	dcc00315 	stw	r19,12(sp)
    6fcc:	dc800215 	stw	r18,8(sp)
    6fd0:	dc400115 	stw	r17,4(sp)
    6fd4:	dc000015 	stw	r16,0(sp)
    6fd8:	2500b804 	addi	r20,r4,736
    6fdc:	a0002326 	beq	r20,zero,706c <_fwalk_reent+0xbc>
    6fe0:	282b883a 	mov	r21,r5
    6fe4:	2027883a 	mov	r19,r4
    6fe8:	002f883a 	mov	r23,zero
    6fec:	05800044 	movi	r22,1
    6ff0:	04bfffc4 	movi	r18,-1
    6ff4:	a4400117 	ldw	r17,4(r20)
    6ff8:	a4000217 	ldw	r16,8(r20)
    6ffc:	8c7fffc4 	addi	r17,r17,-1
    7000:	88000c16 	blt	r17,zero,7034 <_fwalk_reent+0x84>
    7004:	84000304 	addi	r16,r16,12
    7008:	8080000b 	ldhu	r2,0(r16)
    700c:	8c7fffc4 	addi	r17,r17,-1
    7010:	817ffd04 	addi	r5,r16,-12
    7014:	b080052e 	bgeu	r22,r2,702c <_fwalk_reent+0x7c>
    7018:	8080008f 	ldh	r2,2(r16)
    701c:	9809883a 	mov	r4,r19
    7020:	14800226 	beq	r2,r18,702c <_fwalk_reent+0x7c>
    7024:	a83ee83a 	callr	r21
    7028:	b8aeb03a 	or	r23,r23,r2
    702c:	84001a04 	addi	r16,r16,104
    7030:	8cbff51e 	bne	r17,r18,7008 <__alt_data_end+0xf8007008>
    7034:	a5000017 	ldw	r20,0(r20)
    7038:	a03fee1e 	bne	r20,zero,6ff4 <__alt_data_end+0xf8006ff4>
    703c:	b805883a 	mov	r2,r23
    7040:	dfc00817 	ldw	ra,32(sp)
    7044:	ddc00717 	ldw	r23,28(sp)
    7048:	dd800617 	ldw	r22,24(sp)
    704c:	dd400517 	ldw	r21,20(sp)
    7050:	dd000417 	ldw	r20,16(sp)
    7054:	dcc00317 	ldw	r19,12(sp)
    7058:	dc800217 	ldw	r18,8(sp)
    705c:	dc400117 	ldw	r17,4(sp)
    7060:	dc000017 	ldw	r16,0(sp)
    7064:	dec00904 	addi	sp,sp,36
    7068:	f800283a 	ret
    706c:	002f883a 	mov	r23,zero
    7070:	003ff206 	br	703c <__alt_data_end+0xf800703c>

00007074 <_setlocale_r>:
    7074:	30001b26 	beq	r6,zero,70e4 <_setlocale_r+0x70>
    7078:	01400074 	movhi	r5,1
    707c:	defffe04 	addi	sp,sp,-8
    7080:	29484a04 	addi	r5,r5,8488
    7084:	3009883a 	mov	r4,r6
    7088:	dc000015 	stw	r16,0(sp)
    708c:	dfc00115 	stw	ra,4(sp)
    7090:	3021883a 	mov	r16,r6
    7094:	0008f880 	call	8f88 <strcmp>
    7098:	1000061e 	bne	r2,zero,70b4 <_setlocale_r+0x40>
    709c:	00800074 	movhi	r2,1
    70a0:	10882c04 	addi	r2,r2,8368
    70a4:	dfc00117 	ldw	ra,4(sp)
    70a8:	dc000017 	ldw	r16,0(sp)
    70ac:	dec00204 	addi	sp,sp,8
    70b0:	f800283a 	ret
    70b4:	01400074 	movhi	r5,1
    70b8:	29482c04 	addi	r5,r5,8368
    70bc:	8009883a 	mov	r4,r16
    70c0:	0008f880 	call	8f88 <strcmp>
    70c4:	103ff526 	beq	r2,zero,709c <__alt_data_end+0xf800709c>
    70c8:	01400074 	movhi	r5,1
    70cc:	29483504 	addi	r5,r5,8404
    70d0:	8009883a 	mov	r4,r16
    70d4:	0008f880 	call	8f88 <strcmp>
    70d8:	103ff026 	beq	r2,zero,709c <__alt_data_end+0xf800709c>
    70dc:	0005883a 	mov	r2,zero
    70e0:	003ff006 	br	70a4 <__alt_data_end+0xf80070a4>
    70e4:	00800074 	movhi	r2,1
    70e8:	10882c04 	addi	r2,r2,8368
    70ec:	f800283a 	ret

000070f0 <__locale_charset>:
    70f0:	00800074 	movhi	r2,1
    70f4:	108ba204 	addi	r2,r2,11912
    70f8:	f800283a 	ret

000070fc <__locale_mb_cur_max>:
    70fc:	00800074 	movhi	r2,1
    7100:	10908604 	addi	r2,r2,16920
    7104:	10800017 	ldw	r2,0(r2)
    7108:	f800283a 	ret

0000710c <__locale_msgcharset>:
    710c:	00800074 	movhi	r2,1
    7110:	108b9a04 	addi	r2,r2,11880
    7114:	f800283a 	ret

00007118 <__locale_cjk_lang>:
    7118:	0005883a 	mov	r2,zero
    711c:	f800283a 	ret

00007120 <_localeconv_r>:
    7120:	00800074 	movhi	r2,1
    7124:	108baa04 	addi	r2,r2,11944
    7128:	f800283a 	ret

0000712c <setlocale>:
    712c:	00800074 	movhi	r2,1
    7130:	10908304 	addi	r2,r2,16908
    7134:	280d883a 	mov	r6,r5
    7138:	200b883a 	mov	r5,r4
    713c:	11000017 	ldw	r4,0(r2)
    7140:	00070741 	jmpi	7074 <_setlocale_r>

00007144 <localeconv>:
    7144:	00800074 	movhi	r2,1
    7148:	108baa04 	addi	r2,r2,11944
    714c:	f800283a 	ret

00007150 <__smakebuf_r>:
    7150:	2880030b 	ldhu	r2,12(r5)
    7154:	10c0008c 	andi	r3,r2,2
    7158:	1800411e 	bne	r3,zero,7260 <__smakebuf_r+0x110>
    715c:	deffec04 	addi	sp,sp,-80
    7160:	dc000f15 	stw	r16,60(sp)
    7164:	2821883a 	mov	r16,r5
    7168:	2940038f 	ldh	r5,14(r5)
    716c:	dc401015 	stw	r17,64(sp)
    7170:	dfc01315 	stw	ra,76(sp)
    7174:	dcc01215 	stw	r19,72(sp)
    7178:	dc801115 	stw	r18,68(sp)
    717c:	2023883a 	mov	r17,r4
    7180:	28001c16 	blt	r5,zero,71f4 <__smakebuf_r+0xa4>
    7184:	d80d883a 	mov	r6,sp
    7188:	000ac900 	call	ac90 <_fstat_r>
    718c:	10001816 	blt	r2,zero,71f0 <__smakebuf_r+0xa0>
    7190:	d8800117 	ldw	r2,4(sp)
    7194:	00e00014 	movui	r3,32768
    7198:	10bc000c 	andi	r2,r2,61440
    719c:	14c80020 	cmpeqi	r19,r2,8192
    71a0:	10c03726 	beq	r2,r3,7280 <__smakebuf_r+0x130>
    71a4:	80c0030b 	ldhu	r3,12(r16)
    71a8:	18c20014 	ori	r3,r3,2048
    71ac:	80c0030d 	sth	r3,12(r16)
    71b0:	00c80004 	movi	r3,8192
    71b4:	10c0521e 	bne	r2,r3,7300 <__smakebuf_r+0x1b0>
    71b8:	8140038f 	ldh	r5,14(r16)
    71bc:	8809883a 	mov	r4,r17
    71c0:	000acec0 	call	acec <_isatty_r>
    71c4:	10004c26 	beq	r2,zero,72f8 <__smakebuf_r+0x1a8>
    71c8:	8080030b 	ldhu	r2,12(r16)
    71cc:	80c010c4 	addi	r3,r16,67
    71d0:	80c00015 	stw	r3,0(r16)
    71d4:	10800054 	ori	r2,r2,1
    71d8:	8080030d 	sth	r2,12(r16)
    71dc:	00800044 	movi	r2,1
    71e0:	80c00415 	stw	r3,16(r16)
    71e4:	80800515 	stw	r2,20(r16)
    71e8:	04810004 	movi	r18,1024
    71ec:	00000706 	br	720c <__smakebuf_r+0xbc>
    71f0:	8080030b 	ldhu	r2,12(r16)
    71f4:	10c0200c 	andi	r3,r2,128
    71f8:	18001f1e 	bne	r3,zero,7278 <__smakebuf_r+0x128>
    71fc:	04810004 	movi	r18,1024
    7200:	10820014 	ori	r2,r2,2048
    7204:	8080030d 	sth	r2,12(r16)
    7208:	0027883a 	mov	r19,zero
    720c:	900b883a 	mov	r5,r18
    7210:	8809883a 	mov	r4,r17
    7214:	00019140 	call	1914 <_malloc_r>
    7218:	10002c26 	beq	r2,zero,72cc <__smakebuf_r+0x17c>
    721c:	80c0030b 	ldhu	r3,12(r16)
    7220:	01000034 	movhi	r4,0
    7224:	21189204 	addi	r4,r4,25160
    7228:	89000f15 	stw	r4,60(r17)
    722c:	18c02014 	ori	r3,r3,128
    7230:	80c0030d 	sth	r3,12(r16)
    7234:	80800015 	stw	r2,0(r16)
    7238:	80800415 	stw	r2,16(r16)
    723c:	84800515 	stw	r18,20(r16)
    7240:	98001a1e 	bne	r19,zero,72ac <__smakebuf_r+0x15c>
    7244:	dfc01317 	ldw	ra,76(sp)
    7248:	dcc01217 	ldw	r19,72(sp)
    724c:	dc801117 	ldw	r18,68(sp)
    7250:	dc401017 	ldw	r17,64(sp)
    7254:	dc000f17 	ldw	r16,60(sp)
    7258:	dec01404 	addi	sp,sp,80
    725c:	f800283a 	ret
    7260:	288010c4 	addi	r2,r5,67
    7264:	28800015 	stw	r2,0(r5)
    7268:	28800415 	stw	r2,16(r5)
    726c:	00800044 	movi	r2,1
    7270:	28800515 	stw	r2,20(r5)
    7274:	f800283a 	ret
    7278:	04801004 	movi	r18,64
    727c:	003fe006 	br	7200 <__alt_data_end+0xf8007200>
    7280:	81000a17 	ldw	r4,40(r16)
    7284:	00c00074 	movhi	r3,1
    7288:	18e3c904 	addi	r3,r3,-28892
    728c:	20ffc51e 	bne	r4,r3,71a4 <__alt_data_end+0xf80071a4>
    7290:	8080030b 	ldhu	r2,12(r16)
    7294:	04810004 	movi	r18,1024
    7298:	84801315 	stw	r18,76(r16)
    729c:	1484b03a 	or	r2,r2,r18
    72a0:	8080030d 	sth	r2,12(r16)
    72a4:	0027883a 	mov	r19,zero
    72a8:	003fd806 	br	720c <__alt_data_end+0xf800720c>
    72ac:	8140038f 	ldh	r5,14(r16)
    72b0:	8809883a 	mov	r4,r17
    72b4:	000acec0 	call	acec <_isatty_r>
    72b8:	103fe226 	beq	r2,zero,7244 <__alt_data_end+0xf8007244>
    72bc:	8080030b 	ldhu	r2,12(r16)
    72c0:	10800054 	ori	r2,r2,1
    72c4:	8080030d 	sth	r2,12(r16)
    72c8:	003fde06 	br	7244 <__alt_data_end+0xf8007244>
    72cc:	8080030b 	ldhu	r2,12(r16)
    72d0:	10c0800c 	andi	r3,r2,512
    72d4:	183fdb1e 	bne	r3,zero,7244 <__alt_data_end+0xf8007244>
    72d8:	10800094 	ori	r2,r2,2
    72dc:	80c010c4 	addi	r3,r16,67
    72e0:	8080030d 	sth	r2,12(r16)
    72e4:	00800044 	movi	r2,1
    72e8:	80c00015 	stw	r3,0(r16)
    72ec:	80c00415 	stw	r3,16(r16)
    72f0:	80800515 	stw	r2,20(r16)
    72f4:	003fd306 	br	7244 <__alt_data_end+0xf8007244>
    72f8:	04810004 	movi	r18,1024
    72fc:	003fc306 	br	720c <__alt_data_end+0xf800720c>
    7300:	0027883a 	mov	r19,zero
    7304:	04810004 	movi	r18,1024
    7308:	003fc006 	br	720c <__alt_data_end+0xf800720c>

0000730c <memchr>:
    730c:	208000cc 	andi	r2,r4,3
    7310:	280f883a 	mov	r7,r5
    7314:	10003426 	beq	r2,zero,73e8 <memchr+0xdc>
    7318:	30bfffc4 	addi	r2,r6,-1
    731c:	30001a26 	beq	r6,zero,7388 <memchr+0x7c>
    7320:	20c00003 	ldbu	r3,0(r4)
    7324:	29803fcc 	andi	r6,r5,255
    7328:	30c0051e 	bne	r6,r3,7340 <memchr+0x34>
    732c:	00001806 	br	7390 <memchr+0x84>
    7330:	10001526 	beq	r2,zero,7388 <memchr+0x7c>
    7334:	20c00003 	ldbu	r3,0(r4)
    7338:	10bfffc4 	addi	r2,r2,-1
    733c:	30c01426 	beq	r6,r3,7390 <memchr+0x84>
    7340:	21000044 	addi	r4,r4,1
    7344:	20c000cc 	andi	r3,r4,3
    7348:	183ff91e 	bne	r3,zero,7330 <__alt_data_end+0xf8007330>
    734c:	020000c4 	movi	r8,3
    7350:	40801136 	bltu	r8,r2,7398 <memchr+0x8c>
    7354:	10000c26 	beq	r2,zero,7388 <memchr+0x7c>
    7358:	20c00003 	ldbu	r3,0(r4)
    735c:	29403fcc 	andi	r5,r5,255
    7360:	28c00b26 	beq	r5,r3,7390 <memchr+0x84>
    7364:	20c00044 	addi	r3,r4,1
    7368:	39803fcc 	andi	r6,r7,255
    736c:	2089883a 	add	r4,r4,r2
    7370:	00000306 	br	7380 <memchr+0x74>
    7374:	18c00044 	addi	r3,r3,1
    7378:	197fffc3 	ldbu	r5,-1(r3)
    737c:	31400526 	beq	r6,r5,7394 <memchr+0x88>
    7380:	1805883a 	mov	r2,r3
    7384:	20fffb1e 	bne	r4,r3,7374 <__alt_data_end+0xf8007374>
    7388:	0005883a 	mov	r2,zero
    738c:	f800283a 	ret
    7390:	2005883a 	mov	r2,r4
    7394:	f800283a 	ret
    7398:	28c03fcc 	andi	r3,r5,255
    739c:	1812923a 	slli	r9,r3,8
    73a0:	02ffbff4 	movhi	r11,65279
    73a4:	02a02074 	movhi	r10,32897
    73a8:	48d2b03a 	or	r9,r9,r3
    73ac:	4806943a 	slli	r3,r9,16
    73b0:	5affbfc4 	addi	r11,r11,-257
    73b4:	52a02004 	addi	r10,r10,-32640
    73b8:	48d2b03a 	or	r9,r9,r3
    73bc:	20c00017 	ldw	r3,0(r4)
    73c0:	48c6f03a 	xor	r3,r9,r3
    73c4:	1acd883a 	add	r6,r3,r11
    73c8:	00c6303a 	nor	r3,zero,r3
    73cc:	30c6703a 	and	r3,r6,r3
    73d0:	1a86703a 	and	r3,r3,r10
    73d4:	183fe01e 	bne	r3,zero,7358 <__alt_data_end+0xf8007358>
    73d8:	10bfff04 	addi	r2,r2,-4
    73dc:	21000104 	addi	r4,r4,4
    73e0:	40bff636 	bltu	r8,r2,73bc <__alt_data_end+0xf80073bc>
    73e4:	003fdb06 	br	7354 <__alt_data_end+0xf8007354>
    73e8:	3005883a 	mov	r2,r6
    73ec:	003fd706 	br	734c <__alt_data_end+0xf800734c>

000073f0 <memcpy>:
    73f0:	defffd04 	addi	sp,sp,-12
    73f4:	dfc00215 	stw	ra,8(sp)
    73f8:	dc400115 	stw	r17,4(sp)
    73fc:	dc000015 	stw	r16,0(sp)
    7400:	00c003c4 	movi	r3,15
    7404:	2005883a 	mov	r2,r4
    7408:	1980452e 	bgeu	r3,r6,7520 <memcpy+0x130>
    740c:	2906b03a 	or	r3,r5,r4
    7410:	18c000cc 	andi	r3,r3,3
    7414:	1800441e 	bne	r3,zero,7528 <memcpy+0x138>
    7418:	347ffc04 	addi	r17,r6,-16
    741c:	8822d13a 	srli	r17,r17,4
    7420:	28c00104 	addi	r3,r5,4
    7424:	23400104 	addi	r13,r4,4
    7428:	8820913a 	slli	r16,r17,4
    742c:	2b000204 	addi	r12,r5,8
    7430:	22c00204 	addi	r11,r4,8
    7434:	84000504 	addi	r16,r16,20
    7438:	2a800304 	addi	r10,r5,12
    743c:	22400304 	addi	r9,r4,12
    7440:	2c21883a 	add	r16,r5,r16
    7444:	2811883a 	mov	r8,r5
    7448:	200f883a 	mov	r7,r4
    744c:	41000017 	ldw	r4,0(r8)
    7450:	1fc00017 	ldw	ra,0(r3)
    7454:	63c00017 	ldw	r15,0(r12)
    7458:	39000015 	stw	r4,0(r7)
    745c:	53800017 	ldw	r14,0(r10)
    7460:	6fc00015 	stw	ra,0(r13)
    7464:	5bc00015 	stw	r15,0(r11)
    7468:	4b800015 	stw	r14,0(r9)
    746c:	18c00404 	addi	r3,r3,16
    7470:	39c00404 	addi	r7,r7,16
    7474:	42000404 	addi	r8,r8,16
    7478:	6b400404 	addi	r13,r13,16
    747c:	63000404 	addi	r12,r12,16
    7480:	5ac00404 	addi	r11,r11,16
    7484:	52800404 	addi	r10,r10,16
    7488:	4a400404 	addi	r9,r9,16
    748c:	1c3fef1e 	bne	r3,r16,744c <__alt_data_end+0xf800744c>
    7490:	89c00044 	addi	r7,r17,1
    7494:	380e913a 	slli	r7,r7,4
    7498:	310003cc 	andi	r4,r6,15
    749c:	02c000c4 	movi	r11,3
    74a0:	11c7883a 	add	r3,r2,r7
    74a4:	29cb883a 	add	r5,r5,r7
    74a8:	5900212e 	bgeu	r11,r4,7530 <memcpy+0x140>
    74ac:	1813883a 	mov	r9,r3
    74b0:	2811883a 	mov	r8,r5
    74b4:	200f883a 	mov	r7,r4
    74b8:	42800017 	ldw	r10,0(r8)
    74bc:	4a400104 	addi	r9,r9,4
    74c0:	39ffff04 	addi	r7,r7,-4
    74c4:	4abfff15 	stw	r10,-4(r9)
    74c8:	42000104 	addi	r8,r8,4
    74cc:	59fffa36 	bltu	r11,r7,74b8 <__alt_data_end+0xf80074b8>
    74d0:	213fff04 	addi	r4,r4,-4
    74d4:	2008d0ba 	srli	r4,r4,2
    74d8:	318000cc 	andi	r6,r6,3
    74dc:	21000044 	addi	r4,r4,1
    74e0:	2109883a 	add	r4,r4,r4
    74e4:	2109883a 	add	r4,r4,r4
    74e8:	1907883a 	add	r3,r3,r4
    74ec:	290b883a 	add	r5,r5,r4
    74f0:	30000626 	beq	r6,zero,750c <memcpy+0x11c>
    74f4:	198d883a 	add	r6,r3,r6
    74f8:	29c00003 	ldbu	r7,0(r5)
    74fc:	18c00044 	addi	r3,r3,1
    7500:	29400044 	addi	r5,r5,1
    7504:	19ffffc5 	stb	r7,-1(r3)
    7508:	19bffb1e 	bne	r3,r6,74f8 <__alt_data_end+0xf80074f8>
    750c:	dfc00217 	ldw	ra,8(sp)
    7510:	dc400117 	ldw	r17,4(sp)
    7514:	dc000017 	ldw	r16,0(sp)
    7518:	dec00304 	addi	sp,sp,12
    751c:	f800283a 	ret
    7520:	2007883a 	mov	r3,r4
    7524:	003ff206 	br	74f0 <__alt_data_end+0xf80074f0>
    7528:	2007883a 	mov	r3,r4
    752c:	003ff106 	br	74f4 <__alt_data_end+0xf80074f4>
    7530:	200d883a 	mov	r6,r4
    7534:	003fee06 	br	74f0 <__alt_data_end+0xf80074f0>

00007538 <memmove>:
    7538:	2005883a 	mov	r2,r4
    753c:	29000b2e 	bgeu	r5,r4,756c <memmove+0x34>
    7540:	298f883a 	add	r7,r5,r6
    7544:	21c0092e 	bgeu	r4,r7,756c <memmove+0x34>
    7548:	2187883a 	add	r3,r4,r6
    754c:	198bc83a 	sub	r5,r3,r6
    7550:	30004826 	beq	r6,zero,7674 <memmove+0x13c>
    7554:	39ffffc4 	addi	r7,r7,-1
    7558:	39000003 	ldbu	r4,0(r7)
    755c:	18ffffc4 	addi	r3,r3,-1
    7560:	19000005 	stb	r4,0(r3)
    7564:	28fffb1e 	bne	r5,r3,7554 <__alt_data_end+0xf8007554>
    7568:	f800283a 	ret
    756c:	00c003c4 	movi	r3,15
    7570:	1980412e 	bgeu	r3,r6,7678 <memmove+0x140>
    7574:	2886b03a 	or	r3,r5,r2
    7578:	18c000cc 	andi	r3,r3,3
    757c:	1800401e 	bne	r3,zero,7680 <memmove+0x148>
    7580:	33fffc04 	addi	r15,r6,-16
    7584:	781ed13a 	srli	r15,r15,4
    7588:	28c00104 	addi	r3,r5,4
    758c:	13400104 	addi	r13,r2,4
    7590:	781c913a 	slli	r14,r15,4
    7594:	2b000204 	addi	r12,r5,8
    7598:	12c00204 	addi	r11,r2,8
    759c:	73800504 	addi	r14,r14,20
    75a0:	2a800304 	addi	r10,r5,12
    75a4:	12400304 	addi	r9,r2,12
    75a8:	2b9d883a 	add	r14,r5,r14
    75ac:	2811883a 	mov	r8,r5
    75b0:	100f883a 	mov	r7,r2
    75b4:	41000017 	ldw	r4,0(r8)
    75b8:	39c00404 	addi	r7,r7,16
    75bc:	18c00404 	addi	r3,r3,16
    75c0:	393ffc15 	stw	r4,-16(r7)
    75c4:	193ffc17 	ldw	r4,-16(r3)
    75c8:	6b400404 	addi	r13,r13,16
    75cc:	5ac00404 	addi	r11,r11,16
    75d0:	693ffc15 	stw	r4,-16(r13)
    75d4:	61000017 	ldw	r4,0(r12)
    75d8:	4a400404 	addi	r9,r9,16
    75dc:	42000404 	addi	r8,r8,16
    75e0:	593ffc15 	stw	r4,-16(r11)
    75e4:	51000017 	ldw	r4,0(r10)
    75e8:	63000404 	addi	r12,r12,16
    75ec:	52800404 	addi	r10,r10,16
    75f0:	493ffc15 	stw	r4,-16(r9)
    75f4:	1bbfef1e 	bne	r3,r14,75b4 <__alt_data_end+0xf80075b4>
    75f8:	79000044 	addi	r4,r15,1
    75fc:	2008913a 	slli	r4,r4,4
    7600:	328003cc 	andi	r10,r6,15
    7604:	02c000c4 	movi	r11,3
    7608:	1107883a 	add	r3,r2,r4
    760c:	290b883a 	add	r5,r5,r4
    7610:	5a801e2e 	bgeu	r11,r10,768c <memmove+0x154>
    7614:	1813883a 	mov	r9,r3
    7618:	2811883a 	mov	r8,r5
    761c:	500f883a 	mov	r7,r10
    7620:	41000017 	ldw	r4,0(r8)
    7624:	4a400104 	addi	r9,r9,4
    7628:	39ffff04 	addi	r7,r7,-4
    762c:	493fff15 	stw	r4,-4(r9)
    7630:	42000104 	addi	r8,r8,4
    7634:	59fffa36 	bltu	r11,r7,7620 <__alt_data_end+0xf8007620>
    7638:	513fff04 	addi	r4,r10,-4
    763c:	2008d0ba 	srli	r4,r4,2
    7640:	318000cc 	andi	r6,r6,3
    7644:	21000044 	addi	r4,r4,1
    7648:	2109883a 	add	r4,r4,r4
    764c:	2109883a 	add	r4,r4,r4
    7650:	1907883a 	add	r3,r3,r4
    7654:	290b883a 	add	r5,r5,r4
    7658:	30000b26 	beq	r6,zero,7688 <memmove+0x150>
    765c:	198d883a 	add	r6,r3,r6
    7660:	29c00003 	ldbu	r7,0(r5)
    7664:	18c00044 	addi	r3,r3,1
    7668:	29400044 	addi	r5,r5,1
    766c:	19ffffc5 	stb	r7,-1(r3)
    7670:	19bffb1e 	bne	r3,r6,7660 <__alt_data_end+0xf8007660>
    7674:	f800283a 	ret
    7678:	1007883a 	mov	r3,r2
    767c:	003ff606 	br	7658 <__alt_data_end+0xf8007658>
    7680:	1007883a 	mov	r3,r2
    7684:	003ff506 	br	765c <__alt_data_end+0xf800765c>
    7688:	f800283a 	ret
    768c:	500d883a 	mov	r6,r10
    7690:	003ff106 	br	7658 <__alt_data_end+0xf8007658>

00007694 <memset>:
    7694:	20c000cc 	andi	r3,r4,3
    7698:	2005883a 	mov	r2,r4
    769c:	18004426 	beq	r3,zero,77b0 <memset+0x11c>
    76a0:	31ffffc4 	addi	r7,r6,-1
    76a4:	30004026 	beq	r6,zero,77a8 <memset+0x114>
    76a8:	2813883a 	mov	r9,r5
    76ac:	200d883a 	mov	r6,r4
    76b0:	2007883a 	mov	r3,r4
    76b4:	00000406 	br	76c8 <memset+0x34>
    76b8:	3a3fffc4 	addi	r8,r7,-1
    76bc:	31800044 	addi	r6,r6,1
    76c0:	38003926 	beq	r7,zero,77a8 <memset+0x114>
    76c4:	400f883a 	mov	r7,r8
    76c8:	18c00044 	addi	r3,r3,1
    76cc:	32400005 	stb	r9,0(r6)
    76d0:	1a0000cc 	andi	r8,r3,3
    76d4:	403ff81e 	bne	r8,zero,76b8 <__alt_data_end+0xf80076b8>
    76d8:	010000c4 	movi	r4,3
    76dc:	21c02d2e 	bgeu	r4,r7,7794 <memset+0x100>
    76e0:	29003fcc 	andi	r4,r5,255
    76e4:	200c923a 	slli	r6,r4,8
    76e8:	3108b03a 	or	r4,r6,r4
    76ec:	200c943a 	slli	r6,r4,16
    76f0:	218cb03a 	or	r6,r4,r6
    76f4:	010003c4 	movi	r4,15
    76f8:	21c0182e 	bgeu	r4,r7,775c <memset+0xc8>
    76fc:	3b3ffc04 	addi	r12,r7,-16
    7700:	6018d13a 	srli	r12,r12,4
    7704:	1a000104 	addi	r8,r3,4
    7708:	1ac00204 	addi	r11,r3,8
    770c:	6008913a 	slli	r4,r12,4
    7710:	1a800304 	addi	r10,r3,12
    7714:	1813883a 	mov	r9,r3
    7718:	21000504 	addi	r4,r4,20
    771c:	1909883a 	add	r4,r3,r4
    7720:	49800015 	stw	r6,0(r9)
    7724:	41800015 	stw	r6,0(r8)
    7728:	59800015 	stw	r6,0(r11)
    772c:	51800015 	stw	r6,0(r10)
    7730:	42000404 	addi	r8,r8,16
    7734:	4a400404 	addi	r9,r9,16
    7738:	5ac00404 	addi	r11,r11,16
    773c:	52800404 	addi	r10,r10,16
    7740:	413ff71e 	bne	r8,r4,7720 <__alt_data_end+0xf8007720>
    7744:	63000044 	addi	r12,r12,1
    7748:	6018913a 	slli	r12,r12,4
    774c:	39c003cc 	andi	r7,r7,15
    7750:	010000c4 	movi	r4,3
    7754:	1b07883a 	add	r3,r3,r12
    7758:	21c00e2e 	bgeu	r4,r7,7794 <memset+0x100>
    775c:	1813883a 	mov	r9,r3
    7760:	3811883a 	mov	r8,r7
    7764:	010000c4 	movi	r4,3
    7768:	49800015 	stw	r6,0(r9)
    776c:	423fff04 	addi	r8,r8,-4
    7770:	4a400104 	addi	r9,r9,4
    7774:	223ffc36 	bltu	r4,r8,7768 <__alt_data_end+0xf8007768>
    7778:	393fff04 	addi	r4,r7,-4
    777c:	2008d0ba 	srli	r4,r4,2
    7780:	39c000cc 	andi	r7,r7,3
    7784:	21000044 	addi	r4,r4,1
    7788:	2109883a 	add	r4,r4,r4
    778c:	2109883a 	add	r4,r4,r4
    7790:	1907883a 	add	r3,r3,r4
    7794:	38000526 	beq	r7,zero,77ac <memset+0x118>
    7798:	19cf883a 	add	r7,r3,r7
    779c:	19400005 	stb	r5,0(r3)
    77a0:	18c00044 	addi	r3,r3,1
    77a4:	38fffd1e 	bne	r7,r3,779c <__alt_data_end+0xf800779c>
    77a8:	f800283a 	ret
    77ac:	f800283a 	ret
    77b0:	2007883a 	mov	r3,r4
    77b4:	300f883a 	mov	r7,r6
    77b8:	003fc706 	br	76d8 <__alt_data_end+0xf80076d8>

000077bc <_Balloc>:
    77bc:	20801317 	ldw	r2,76(r4)
    77c0:	defffc04 	addi	sp,sp,-16
    77c4:	dc400115 	stw	r17,4(sp)
    77c8:	dc000015 	stw	r16,0(sp)
    77cc:	dfc00315 	stw	ra,12(sp)
    77d0:	dc800215 	stw	r18,8(sp)
    77d4:	2023883a 	mov	r17,r4
    77d8:	2821883a 	mov	r16,r5
    77dc:	10000f26 	beq	r2,zero,781c <_Balloc+0x60>
    77e0:	8407883a 	add	r3,r16,r16
    77e4:	18c7883a 	add	r3,r3,r3
    77e8:	10c7883a 	add	r3,r2,r3
    77ec:	18800017 	ldw	r2,0(r3)
    77f0:	10001126 	beq	r2,zero,7838 <_Balloc+0x7c>
    77f4:	11000017 	ldw	r4,0(r2)
    77f8:	19000015 	stw	r4,0(r3)
    77fc:	10000415 	stw	zero,16(r2)
    7800:	10000315 	stw	zero,12(r2)
    7804:	dfc00317 	ldw	ra,12(sp)
    7808:	dc800217 	ldw	r18,8(sp)
    780c:	dc400117 	ldw	r17,4(sp)
    7810:	dc000017 	ldw	r16,0(sp)
    7814:	dec00404 	addi	sp,sp,16
    7818:	f800283a 	ret
    781c:	01800844 	movi	r6,33
    7820:	01400104 	movi	r5,4
    7824:	000a8a80 	call	a8a8 <_calloc_r>
    7828:	88801315 	stw	r2,76(r17)
    782c:	103fec1e 	bne	r2,zero,77e0 <__alt_data_end+0xf80077e0>
    7830:	0005883a 	mov	r2,zero
    7834:	003ff306 	br	7804 <__alt_data_end+0xf8007804>
    7838:	01400044 	movi	r5,1
    783c:	2c24983a 	sll	r18,r5,r16
    7840:	8809883a 	mov	r4,r17
    7844:	91800144 	addi	r6,r18,5
    7848:	318d883a 	add	r6,r6,r6
    784c:	318d883a 	add	r6,r6,r6
    7850:	000a8a80 	call	a8a8 <_calloc_r>
    7854:	103ff626 	beq	r2,zero,7830 <__alt_data_end+0xf8007830>
    7858:	14000115 	stw	r16,4(r2)
    785c:	14800215 	stw	r18,8(r2)
    7860:	003fe606 	br	77fc <__alt_data_end+0xf80077fc>

00007864 <_Bfree>:
    7864:	28000826 	beq	r5,zero,7888 <_Bfree+0x24>
    7868:	28c00117 	ldw	r3,4(r5)
    786c:	20801317 	ldw	r2,76(r4)
    7870:	18c7883a 	add	r3,r3,r3
    7874:	18c7883a 	add	r3,r3,r3
    7878:	10c5883a 	add	r2,r2,r3
    787c:	10c00017 	ldw	r3,0(r2)
    7880:	28c00015 	stw	r3,0(r5)
    7884:	11400015 	stw	r5,0(r2)
    7888:	f800283a 	ret

0000788c <__multadd>:
    788c:	defff704 	addi	sp,sp,-36
    7890:	dc800215 	stw	r18,8(sp)
    7894:	2c800417 	ldw	r18,16(r5)
    7898:	dd800615 	stw	r22,24(sp)
    789c:	dd400515 	stw	r21,20(sp)
    78a0:	dd000415 	stw	r20,16(sp)
    78a4:	dcc00315 	stw	r19,12(sp)
    78a8:	dc400115 	stw	r17,4(sp)
    78ac:	dc000015 	stw	r16,0(sp)
    78b0:	dfc00815 	stw	ra,32(sp)
    78b4:	ddc00715 	stw	r23,28(sp)
    78b8:	2827883a 	mov	r19,r5
    78bc:	2029883a 	mov	r20,r4
    78c0:	3023883a 	mov	r17,r6
    78c4:	3821883a 	mov	r16,r7
    78c8:	2d400504 	addi	r21,r5,20
    78cc:	002d883a 	mov	r22,zero
    78d0:	adc00017 	ldw	r23,0(r21)
    78d4:	880b883a 	mov	r5,r17
    78d8:	ad400104 	addi	r21,r21,4
    78dc:	b93fffcc 	andi	r4,r23,65535
    78e0:	00017b40 	call	17b4 <__mulsi3>
    78e4:	b808d43a 	srli	r4,r23,16
    78e8:	880b883a 	mov	r5,r17
    78ec:	1421883a 	add	r16,r2,r16
    78f0:	00017b40 	call	17b4 <__mulsi3>
    78f4:	800ed43a 	srli	r7,r16,16
    78f8:	80ffffcc 	andi	r3,r16,65535
    78fc:	b5800044 	addi	r22,r22,1
    7900:	11c5883a 	add	r2,r2,r7
    7904:	100e943a 	slli	r7,r2,16
    7908:	1020d43a 	srli	r16,r2,16
    790c:	38c7883a 	add	r3,r7,r3
    7910:	a8ffff15 	stw	r3,-4(r21)
    7914:	b4bfee16 	blt	r22,r18,78d0 <__alt_data_end+0xf80078d0>
    7918:	80000926 	beq	r16,zero,7940 <__multadd+0xb4>
    791c:	98800217 	ldw	r2,8(r19)
    7920:	9080130e 	bge	r18,r2,7970 <__multadd+0xe4>
    7924:	90800144 	addi	r2,r18,5
    7928:	1085883a 	add	r2,r2,r2
    792c:	1085883a 	add	r2,r2,r2
    7930:	9885883a 	add	r2,r19,r2
    7934:	14000015 	stw	r16,0(r2)
    7938:	94800044 	addi	r18,r18,1
    793c:	9c800415 	stw	r18,16(r19)
    7940:	9805883a 	mov	r2,r19
    7944:	dfc00817 	ldw	ra,32(sp)
    7948:	ddc00717 	ldw	r23,28(sp)
    794c:	dd800617 	ldw	r22,24(sp)
    7950:	dd400517 	ldw	r21,20(sp)
    7954:	dd000417 	ldw	r20,16(sp)
    7958:	dcc00317 	ldw	r19,12(sp)
    795c:	dc800217 	ldw	r18,8(sp)
    7960:	dc400117 	ldw	r17,4(sp)
    7964:	dc000017 	ldw	r16,0(sp)
    7968:	dec00904 	addi	sp,sp,36
    796c:	f800283a 	ret
    7970:	99400117 	ldw	r5,4(r19)
    7974:	a009883a 	mov	r4,r20
    7978:	29400044 	addi	r5,r5,1
    797c:	00077bc0 	call	77bc <_Balloc>
    7980:	99800417 	ldw	r6,16(r19)
    7984:	99400304 	addi	r5,r19,12
    7988:	11000304 	addi	r4,r2,12
    798c:	31800084 	addi	r6,r6,2
    7990:	318d883a 	add	r6,r6,r6
    7994:	318d883a 	add	r6,r6,r6
    7998:	1023883a 	mov	r17,r2
    799c:	00073f00 	call	73f0 <memcpy>
    79a0:	98000a26 	beq	r19,zero,79cc <__multadd+0x140>
    79a4:	98c00117 	ldw	r3,4(r19)
    79a8:	a0801317 	ldw	r2,76(r20)
    79ac:	18c7883a 	add	r3,r3,r3
    79b0:	18c7883a 	add	r3,r3,r3
    79b4:	10c5883a 	add	r2,r2,r3
    79b8:	10c00017 	ldw	r3,0(r2)
    79bc:	98c00015 	stw	r3,0(r19)
    79c0:	14c00015 	stw	r19,0(r2)
    79c4:	8827883a 	mov	r19,r17
    79c8:	003fd606 	br	7924 <__alt_data_end+0xf8007924>
    79cc:	8827883a 	mov	r19,r17
    79d0:	003fd406 	br	7924 <__alt_data_end+0xf8007924>

000079d4 <__s2b>:
    79d4:	defff904 	addi	sp,sp,-28
    79d8:	dc400115 	stw	r17,4(sp)
    79dc:	dc000015 	stw	r16,0(sp)
    79e0:	2023883a 	mov	r17,r4
    79e4:	2821883a 	mov	r16,r5
    79e8:	39000204 	addi	r4,r7,8
    79ec:	01400244 	movi	r5,9
    79f0:	dcc00315 	stw	r19,12(sp)
    79f4:	dc800215 	stw	r18,8(sp)
    79f8:	dfc00615 	stw	ra,24(sp)
    79fc:	dd400515 	stw	r21,20(sp)
    7a00:	dd000415 	stw	r20,16(sp)
    7a04:	3825883a 	mov	r18,r7
    7a08:	3027883a 	mov	r19,r6
    7a0c:	000bd000 	call	bd00 <__divsi3>
    7a10:	00c00044 	movi	r3,1
    7a14:	000b883a 	mov	r5,zero
    7a18:	1880030e 	bge	r3,r2,7a28 <__s2b+0x54>
    7a1c:	18c7883a 	add	r3,r3,r3
    7a20:	29400044 	addi	r5,r5,1
    7a24:	18bffd16 	blt	r3,r2,7a1c <__alt_data_end+0xf8007a1c>
    7a28:	8809883a 	mov	r4,r17
    7a2c:	00077bc0 	call	77bc <_Balloc>
    7a30:	d8c00717 	ldw	r3,28(sp)
    7a34:	10c00515 	stw	r3,20(r2)
    7a38:	00c00044 	movi	r3,1
    7a3c:	10c00415 	stw	r3,16(r2)
    7a40:	00c00244 	movi	r3,9
    7a44:	1cc0210e 	bge	r3,r19,7acc <__s2b+0xf8>
    7a48:	80eb883a 	add	r21,r16,r3
    7a4c:	a829883a 	mov	r20,r21
    7a50:	84e1883a 	add	r16,r16,r19
    7a54:	a1c00007 	ldb	r7,0(r20)
    7a58:	01800284 	movi	r6,10
    7a5c:	a5000044 	addi	r20,r20,1
    7a60:	100b883a 	mov	r5,r2
    7a64:	39fff404 	addi	r7,r7,-48
    7a68:	8809883a 	mov	r4,r17
    7a6c:	000788c0 	call	788c <__multadd>
    7a70:	a43ff81e 	bne	r20,r16,7a54 <__alt_data_end+0xf8007a54>
    7a74:	ace1883a 	add	r16,r21,r19
    7a78:	843ffe04 	addi	r16,r16,-8
    7a7c:	9c800a0e 	bge	r19,r18,7aa8 <__s2b+0xd4>
    7a80:	94e5c83a 	sub	r18,r18,r19
    7a84:	84a5883a 	add	r18,r16,r18
    7a88:	81c00007 	ldb	r7,0(r16)
    7a8c:	01800284 	movi	r6,10
    7a90:	84000044 	addi	r16,r16,1
    7a94:	100b883a 	mov	r5,r2
    7a98:	39fff404 	addi	r7,r7,-48
    7a9c:	8809883a 	mov	r4,r17
    7aa0:	000788c0 	call	788c <__multadd>
    7aa4:	84bff81e 	bne	r16,r18,7a88 <__alt_data_end+0xf8007a88>
    7aa8:	dfc00617 	ldw	ra,24(sp)
    7aac:	dd400517 	ldw	r21,20(sp)
    7ab0:	dd000417 	ldw	r20,16(sp)
    7ab4:	dcc00317 	ldw	r19,12(sp)
    7ab8:	dc800217 	ldw	r18,8(sp)
    7abc:	dc400117 	ldw	r17,4(sp)
    7ac0:	dc000017 	ldw	r16,0(sp)
    7ac4:	dec00704 	addi	sp,sp,28
    7ac8:	f800283a 	ret
    7acc:	84000284 	addi	r16,r16,10
    7ad0:	1827883a 	mov	r19,r3
    7ad4:	003fe906 	br	7a7c <__alt_data_end+0xf8007a7c>

00007ad8 <__hi0bits>:
    7ad8:	20bfffec 	andhi	r2,r4,65535
    7adc:	1000141e 	bne	r2,zero,7b30 <__hi0bits+0x58>
    7ae0:	2008943a 	slli	r4,r4,16
    7ae4:	00800404 	movi	r2,16
    7ae8:	20ffc02c 	andhi	r3,r4,65280
    7aec:	1800021e 	bne	r3,zero,7af8 <__hi0bits+0x20>
    7af0:	2008923a 	slli	r4,r4,8
    7af4:	10800204 	addi	r2,r2,8
    7af8:	20fc002c 	andhi	r3,r4,61440
    7afc:	1800021e 	bne	r3,zero,7b08 <__hi0bits+0x30>
    7b00:	2008913a 	slli	r4,r4,4
    7b04:	10800104 	addi	r2,r2,4
    7b08:	20f0002c 	andhi	r3,r4,49152
    7b0c:	1800031e 	bne	r3,zero,7b1c <__hi0bits+0x44>
    7b10:	2109883a 	add	r4,r4,r4
    7b14:	10800084 	addi	r2,r2,2
    7b18:	2109883a 	add	r4,r4,r4
    7b1c:	20000316 	blt	r4,zero,7b2c <__hi0bits+0x54>
    7b20:	2110002c 	andhi	r4,r4,16384
    7b24:	2000041e 	bne	r4,zero,7b38 <__hi0bits+0x60>
    7b28:	00800804 	movi	r2,32
    7b2c:	f800283a 	ret
    7b30:	0005883a 	mov	r2,zero
    7b34:	003fec06 	br	7ae8 <__alt_data_end+0xf8007ae8>
    7b38:	10800044 	addi	r2,r2,1
    7b3c:	f800283a 	ret

00007b40 <__lo0bits>:
    7b40:	20c00017 	ldw	r3,0(r4)
    7b44:	188001cc 	andi	r2,r3,7
    7b48:	10000826 	beq	r2,zero,7b6c <__lo0bits+0x2c>
    7b4c:	1880004c 	andi	r2,r3,1
    7b50:	1000211e 	bne	r2,zero,7bd8 <__lo0bits+0x98>
    7b54:	1880008c 	andi	r2,r3,2
    7b58:	1000211e 	bne	r2,zero,7be0 <__lo0bits+0xa0>
    7b5c:	1806d0ba 	srli	r3,r3,2
    7b60:	00800084 	movi	r2,2
    7b64:	20c00015 	stw	r3,0(r4)
    7b68:	f800283a 	ret
    7b6c:	18bfffcc 	andi	r2,r3,65535
    7b70:	10001326 	beq	r2,zero,7bc0 <__lo0bits+0x80>
    7b74:	0005883a 	mov	r2,zero
    7b78:	19403fcc 	andi	r5,r3,255
    7b7c:	2800021e 	bne	r5,zero,7b88 <__lo0bits+0x48>
    7b80:	1806d23a 	srli	r3,r3,8
    7b84:	10800204 	addi	r2,r2,8
    7b88:	194003cc 	andi	r5,r3,15
    7b8c:	2800021e 	bne	r5,zero,7b98 <__lo0bits+0x58>
    7b90:	1806d13a 	srli	r3,r3,4
    7b94:	10800104 	addi	r2,r2,4
    7b98:	194000cc 	andi	r5,r3,3
    7b9c:	2800021e 	bne	r5,zero,7ba8 <__lo0bits+0x68>
    7ba0:	1806d0ba 	srli	r3,r3,2
    7ba4:	10800084 	addi	r2,r2,2
    7ba8:	1940004c 	andi	r5,r3,1
    7bac:	2800081e 	bne	r5,zero,7bd0 <__lo0bits+0x90>
    7bb0:	1806d07a 	srli	r3,r3,1
    7bb4:	1800051e 	bne	r3,zero,7bcc <__lo0bits+0x8c>
    7bb8:	00800804 	movi	r2,32
    7bbc:	f800283a 	ret
    7bc0:	1806d43a 	srli	r3,r3,16
    7bc4:	00800404 	movi	r2,16
    7bc8:	003feb06 	br	7b78 <__alt_data_end+0xf8007b78>
    7bcc:	10800044 	addi	r2,r2,1
    7bd0:	20c00015 	stw	r3,0(r4)
    7bd4:	f800283a 	ret
    7bd8:	0005883a 	mov	r2,zero
    7bdc:	f800283a 	ret
    7be0:	1806d07a 	srli	r3,r3,1
    7be4:	00800044 	movi	r2,1
    7be8:	20c00015 	stw	r3,0(r4)
    7bec:	f800283a 	ret

00007bf0 <__i2b>:
    7bf0:	defffd04 	addi	sp,sp,-12
    7bf4:	dc000015 	stw	r16,0(sp)
    7bf8:	04000044 	movi	r16,1
    7bfc:	dc400115 	stw	r17,4(sp)
    7c00:	2823883a 	mov	r17,r5
    7c04:	800b883a 	mov	r5,r16
    7c08:	dfc00215 	stw	ra,8(sp)
    7c0c:	00077bc0 	call	77bc <_Balloc>
    7c10:	14400515 	stw	r17,20(r2)
    7c14:	14000415 	stw	r16,16(r2)
    7c18:	dfc00217 	ldw	ra,8(sp)
    7c1c:	dc400117 	ldw	r17,4(sp)
    7c20:	dc000017 	ldw	r16,0(sp)
    7c24:	dec00304 	addi	sp,sp,12
    7c28:	f800283a 	ret

00007c2c <__multiply>:
    7c2c:	deffef04 	addi	sp,sp,-68
    7c30:	dc400815 	stw	r17,32(sp)
    7c34:	dc000715 	stw	r16,28(sp)
    7c38:	34400417 	ldw	r17,16(r6)
    7c3c:	2c000417 	ldw	r16,16(r5)
    7c40:	dd800d15 	stw	r22,52(sp)
    7c44:	dc800915 	stw	r18,36(sp)
    7c48:	dfc01015 	stw	ra,64(sp)
    7c4c:	df000f15 	stw	fp,60(sp)
    7c50:	ddc00e15 	stw	r23,56(sp)
    7c54:	dd400c15 	stw	r21,48(sp)
    7c58:	dd000b15 	stw	r20,44(sp)
    7c5c:	dcc00a15 	stw	r19,40(sp)
    7c60:	2825883a 	mov	r18,r5
    7c64:	302d883a 	mov	r22,r6
    7c68:	8440050e 	bge	r16,r17,7c80 <__multiply+0x54>
    7c6c:	8007883a 	mov	r3,r16
    7c70:	3025883a 	mov	r18,r6
    7c74:	8821883a 	mov	r16,r17
    7c78:	282d883a 	mov	r22,r5
    7c7c:	1823883a 	mov	r17,r3
    7c80:	90800217 	ldw	r2,8(r18)
    7c84:	8447883a 	add	r3,r16,r17
    7c88:	d8c00215 	stw	r3,8(sp)
    7c8c:	91400117 	ldw	r5,4(r18)
    7c90:	10c0010e 	bge	r2,r3,7c98 <__multiply+0x6c>
    7c94:	29400044 	addi	r5,r5,1
    7c98:	00077bc0 	call	77bc <_Balloc>
    7c9c:	d8c00217 	ldw	r3,8(sp)
    7ca0:	d8800615 	stw	r2,24(sp)
    7ca4:	18eb883a 	add	r21,r3,r3
    7ca8:	ad6b883a 	add	r21,r21,r21
    7cac:	10c00504 	addi	r3,r2,20
    7cb0:	1d6b883a 	add	r21,r3,r21
    7cb4:	d8c00115 	stw	r3,4(sp)
    7cb8:	dd400315 	stw	r21,12(sp)
    7cbc:	1805883a 	mov	r2,r3
    7cc0:	1d40042e 	bgeu	r3,r21,7cd4 <__multiply+0xa8>
    7cc4:	d8c00317 	ldw	r3,12(sp)
    7cc8:	10000015 	stw	zero,0(r2)
    7ccc:	10800104 	addi	r2,r2,4
    7cd0:	10fffc36 	bltu	r2,r3,7cc4 <__alt_data_end+0xf8007cc4>
    7cd4:	8c63883a 	add	r17,r17,r17
    7cd8:	b5800504 	addi	r22,r22,20
    7cdc:	8c63883a 	add	r17,r17,r17
    7ce0:	94800504 	addi	r18,r18,20
    7ce4:	8421883a 	add	r16,r16,r16
    7ce8:	b463883a 	add	r17,r22,r17
    7cec:	8421883a 	add	r16,r16,r16
    7cf0:	dd800015 	stw	r22,0(sp)
    7cf4:	dc800415 	stw	r18,16(sp)
    7cf8:	dc400515 	stw	r17,20(sp)
    7cfc:	9429883a 	add	r20,r18,r16
    7d00:	b4404f2e 	bgeu	r22,r17,7e40 <__multiply+0x214>
    7d04:	d8c00017 	ldw	r3,0(sp)
    7d08:	1c800017 	ldw	r18,0(r3)
    7d0c:	947fffcc 	andi	r17,r18,65535
    7d10:	88001e26 	beq	r17,zero,7d8c <__multiply+0x160>
    7d14:	dd800117 	ldw	r22,4(sp)
    7d18:	dd400417 	ldw	r21,16(sp)
    7d1c:	0027883a 	mov	r19,zero
    7d20:	ac800017 	ldw	r18,0(r21)
    7d24:	b4000017 	ldw	r16,0(r22)
    7d28:	880b883a 	mov	r5,r17
    7d2c:	913fffcc 	andi	r4,r18,65535
    7d30:	00017b40 	call	17b4 <__mulsi3>
    7d34:	9008d43a 	srli	r4,r18,16
    7d38:	84bfffcc 	andi	r18,r16,65535
    7d3c:	1485883a 	add	r2,r2,r18
    7d40:	14e5883a 	add	r18,r2,r19
    7d44:	8020d43a 	srli	r16,r16,16
    7d48:	9026d43a 	srli	r19,r18,16
    7d4c:	880b883a 	mov	r5,r17
    7d50:	00017b40 	call	17b4 <__mulsi3>
    7d54:	1405883a 	add	r2,r2,r16
    7d58:	14e1883a 	add	r16,r2,r19
    7d5c:	90ffffcc 	andi	r3,r18,65535
    7d60:	8024943a 	slli	r18,r16,16
    7d64:	ad400104 	addi	r21,r21,4
    7d68:	b005883a 	mov	r2,r22
    7d6c:	90c6b03a 	or	r3,r18,r3
    7d70:	b0c00015 	stw	r3,0(r22)
    7d74:	8026d43a 	srli	r19,r16,16
    7d78:	b5800104 	addi	r22,r22,4
    7d7c:	ad3fe836 	bltu	r21,r20,7d20 <__alt_data_end+0xf8007d20>
    7d80:	d8c00017 	ldw	r3,0(sp)
    7d84:	14c00115 	stw	r19,4(r2)
    7d88:	1c800017 	ldw	r18,0(r3)
    7d8c:	9024d43a 	srli	r18,r18,16
    7d90:	90002226 	beq	r18,zero,7e1c <__multiply+0x1f0>
    7d94:	d8c00117 	ldw	r3,4(sp)
    7d98:	dd800417 	ldw	r22,16(sp)
    7d9c:	002f883a 	mov	r23,zero
    7da0:	1f000017 	ldw	fp,0(r3)
    7da4:	1823883a 	mov	r17,r3
    7da8:	182b883a 	mov	r21,r3
    7dac:	e021883a 	mov	r16,fp
    7db0:	00000106 	br	7db8 <__multiply+0x18c>
    7db4:	982b883a 	mov	r21,r19
    7db8:	b100000b 	ldhu	r4,0(r22)
    7dbc:	8020d43a 	srli	r16,r16,16
    7dc0:	900b883a 	mov	r5,r18
    7dc4:	00017b40 	call	17b4 <__mulsi3>
    7dc8:	1405883a 	add	r2,r2,r16
    7dcc:	15ef883a 	add	r23,r2,r23
    7dd0:	b804943a 	slli	r2,r23,16
    7dd4:	e0ffffcc 	andi	r3,fp,65535
    7dd8:	8c400104 	addi	r17,r17,4
    7ddc:	10c6b03a 	or	r3,r2,r3
    7de0:	88ffff15 	stw	r3,-4(r17)
    7de4:	b5800104 	addi	r22,r22,4
    7de8:	b13fff17 	ldw	r4,-4(r22)
    7dec:	acc00104 	addi	r19,r21,4
    7df0:	900b883a 	mov	r5,r18
    7df4:	2008d43a 	srli	r4,r4,16
    7df8:	9c000017 	ldw	r16,0(r19)
    7dfc:	00017b40 	call	17b4 <__mulsi3>
    7e00:	b806d43a 	srli	r3,r23,16
    7e04:	813fffcc 	andi	r4,r16,65535
    7e08:	1105883a 	add	r2,r2,r4
    7e0c:	10f9883a 	add	fp,r2,r3
    7e10:	e02ed43a 	srli	r23,fp,16
    7e14:	b53fe736 	bltu	r22,r20,7db4 <__alt_data_end+0xf8007db4>
    7e18:	af000115 	stw	fp,4(r21)
    7e1c:	d8c00017 	ldw	r3,0(sp)
    7e20:	d9000517 	ldw	r4,20(sp)
    7e24:	18c00104 	addi	r3,r3,4
    7e28:	d8c00015 	stw	r3,0(sp)
    7e2c:	d8c00117 	ldw	r3,4(sp)
    7e30:	18c00104 	addi	r3,r3,4
    7e34:	d8c00115 	stw	r3,4(sp)
    7e38:	d8c00017 	ldw	r3,0(sp)
    7e3c:	193fb136 	bltu	r3,r4,7d04 <__alt_data_end+0xf8007d04>
    7e40:	d8c00217 	ldw	r3,8(sp)
    7e44:	00c00c0e 	bge	zero,r3,7e78 <__multiply+0x24c>
    7e48:	d8c00317 	ldw	r3,12(sp)
    7e4c:	18bfff17 	ldw	r2,-4(r3)
    7e50:	1d7fff04 	addi	r21,r3,-4
    7e54:	10000326 	beq	r2,zero,7e64 <__multiply+0x238>
    7e58:	00000706 	br	7e78 <__multiply+0x24c>
    7e5c:	a8800017 	ldw	r2,0(r21)
    7e60:	1000051e 	bne	r2,zero,7e78 <__multiply+0x24c>
    7e64:	d8c00217 	ldw	r3,8(sp)
    7e68:	ad7fff04 	addi	r21,r21,-4
    7e6c:	18ffffc4 	addi	r3,r3,-1
    7e70:	d8c00215 	stw	r3,8(sp)
    7e74:	183ff91e 	bne	r3,zero,7e5c <__alt_data_end+0xf8007e5c>
    7e78:	d8c00617 	ldw	r3,24(sp)
    7e7c:	d9000217 	ldw	r4,8(sp)
    7e80:	1805883a 	mov	r2,r3
    7e84:	19000415 	stw	r4,16(r3)
    7e88:	dfc01017 	ldw	ra,64(sp)
    7e8c:	df000f17 	ldw	fp,60(sp)
    7e90:	ddc00e17 	ldw	r23,56(sp)
    7e94:	dd800d17 	ldw	r22,52(sp)
    7e98:	dd400c17 	ldw	r21,48(sp)
    7e9c:	dd000b17 	ldw	r20,44(sp)
    7ea0:	dcc00a17 	ldw	r19,40(sp)
    7ea4:	dc800917 	ldw	r18,36(sp)
    7ea8:	dc400817 	ldw	r17,32(sp)
    7eac:	dc000717 	ldw	r16,28(sp)
    7eb0:	dec01104 	addi	sp,sp,68
    7eb4:	f800283a 	ret

00007eb8 <__pow5mult>:
    7eb8:	defffa04 	addi	sp,sp,-24
    7ebc:	dcc00315 	stw	r19,12(sp)
    7ec0:	dc000015 	stw	r16,0(sp)
    7ec4:	dfc00515 	stw	ra,20(sp)
    7ec8:	dd000415 	stw	r20,16(sp)
    7ecc:	dc800215 	stw	r18,8(sp)
    7ed0:	dc400115 	stw	r17,4(sp)
    7ed4:	308000cc 	andi	r2,r6,3
    7ed8:	3021883a 	mov	r16,r6
    7edc:	2027883a 	mov	r19,r4
    7ee0:	10002f1e 	bne	r2,zero,7fa0 <__pow5mult+0xe8>
    7ee4:	2825883a 	mov	r18,r5
    7ee8:	8021d0ba 	srai	r16,r16,2
    7eec:	80001a26 	beq	r16,zero,7f58 <__pow5mult+0xa0>
    7ef0:	9c401217 	ldw	r17,72(r19)
    7ef4:	8800061e 	bne	r17,zero,7f10 <__pow5mult+0x58>
    7ef8:	00003406 	br	7fcc <__pow5mult+0x114>
    7efc:	8021d07a 	srai	r16,r16,1
    7f00:	80001526 	beq	r16,zero,7f58 <__pow5mult+0xa0>
    7f04:	88800017 	ldw	r2,0(r17)
    7f08:	10001c26 	beq	r2,zero,7f7c <__pow5mult+0xc4>
    7f0c:	1023883a 	mov	r17,r2
    7f10:	8080004c 	andi	r2,r16,1
    7f14:	103ff926 	beq	r2,zero,7efc <__alt_data_end+0xf8007efc>
    7f18:	880d883a 	mov	r6,r17
    7f1c:	900b883a 	mov	r5,r18
    7f20:	9809883a 	mov	r4,r19
    7f24:	0007c2c0 	call	7c2c <__multiply>
    7f28:	90001b26 	beq	r18,zero,7f98 <__pow5mult+0xe0>
    7f2c:	91000117 	ldw	r4,4(r18)
    7f30:	98c01317 	ldw	r3,76(r19)
    7f34:	8021d07a 	srai	r16,r16,1
    7f38:	2109883a 	add	r4,r4,r4
    7f3c:	2109883a 	add	r4,r4,r4
    7f40:	1907883a 	add	r3,r3,r4
    7f44:	19000017 	ldw	r4,0(r3)
    7f48:	91000015 	stw	r4,0(r18)
    7f4c:	1c800015 	stw	r18,0(r3)
    7f50:	1025883a 	mov	r18,r2
    7f54:	803feb1e 	bne	r16,zero,7f04 <__alt_data_end+0xf8007f04>
    7f58:	9005883a 	mov	r2,r18
    7f5c:	dfc00517 	ldw	ra,20(sp)
    7f60:	dd000417 	ldw	r20,16(sp)
    7f64:	dcc00317 	ldw	r19,12(sp)
    7f68:	dc800217 	ldw	r18,8(sp)
    7f6c:	dc400117 	ldw	r17,4(sp)
    7f70:	dc000017 	ldw	r16,0(sp)
    7f74:	dec00604 	addi	sp,sp,24
    7f78:	f800283a 	ret
    7f7c:	880d883a 	mov	r6,r17
    7f80:	880b883a 	mov	r5,r17
    7f84:	9809883a 	mov	r4,r19
    7f88:	0007c2c0 	call	7c2c <__multiply>
    7f8c:	88800015 	stw	r2,0(r17)
    7f90:	10000015 	stw	zero,0(r2)
    7f94:	003fdd06 	br	7f0c <__alt_data_end+0xf8007f0c>
    7f98:	1025883a 	mov	r18,r2
    7f9c:	003fd706 	br	7efc <__alt_data_end+0xf8007efc>
    7fa0:	10bfffc4 	addi	r2,r2,-1
    7fa4:	1085883a 	add	r2,r2,r2
    7fa8:	00c00074 	movhi	r3,1
    7fac:	18c84d04 	addi	r3,r3,8500
    7fb0:	1085883a 	add	r2,r2,r2
    7fb4:	1885883a 	add	r2,r3,r2
    7fb8:	11800017 	ldw	r6,0(r2)
    7fbc:	000f883a 	mov	r7,zero
    7fc0:	000788c0 	call	788c <__multadd>
    7fc4:	1025883a 	mov	r18,r2
    7fc8:	003fc706 	br	7ee8 <__alt_data_end+0xf8007ee8>
    7fcc:	05000044 	movi	r20,1
    7fd0:	a00b883a 	mov	r5,r20
    7fd4:	9809883a 	mov	r4,r19
    7fd8:	00077bc0 	call	77bc <_Balloc>
    7fdc:	1023883a 	mov	r17,r2
    7fe0:	00809c44 	movi	r2,625
    7fe4:	88800515 	stw	r2,20(r17)
    7fe8:	8d000415 	stw	r20,16(r17)
    7fec:	9c401215 	stw	r17,72(r19)
    7ff0:	88000015 	stw	zero,0(r17)
    7ff4:	003fc606 	br	7f10 <__alt_data_end+0xf8007f10>

00007ff8 <__lshift>:
    7ff8:	defff904 	addi	sp,sp,-28
    7ffc:	dd400515 	stw	r21,20(sp)
    8000:	dcc00315 	stw	r19,12(sp)
    8004:	302bd17a 	srai	r21,r6,5
    8008:	2cc00417 	ldw	r19,16(r5)
    800c:	28800217 	ldw	r2,8(r5)
    8010:	dd000415 	stw	r20,16(sp)
    8014:	ace7883a 	add	r19,r21,r19
    8018:	dc800215 	stw	r18,8(sp)
    801c:	dc400115 	stw	r17,4(sp)
    8020:	dc000015 	stw	r16,0(sp)
    8024:	dfc00615 	stw	ra,24(sp)
    8028:	9c000044 	addi	r16,r19,1
    802c:	2823883a 	mov	r17,r5
    8030:	3029883a 	mov	r20,r6
    8034:	2025883a 	mov	r18,r4
    8038:	29400117 	ldw	r5,4(r5)
    803c:	1400030e 	bge	r2,r16,804c <__lshift+0x54>
    8040:	1085883a 	add	r2,r2,r2
    8044:	29400044 	addi	r5,r5,1
    8048:	143ffd16 	blt	r2,r16,8040 <__alt_data_end+0xf8008040>
    804c:	9009883a 	mov	r4,r18
    8050:	00077bc0 	call	77bc <_Balloc>
    8054:	10c00504 	addi	r3,r2,20
    8058:	0540070e 	bge	zero,r21,8078 <__lshift+0x80>
    805c:	ad6b883a 	add	r21,r21,r21
    8060:	ad6b883a 	add	r21,r21,r21
    8064:	1809883a 	mov	r4,r3
    8068:	1d47883a 	add	r3,r3,r21
    806c:	20000015 	stw	zero,0(r4)
    8070:	21000104 	addi	r4,r4,4
    8074:	193ffd1e 	bne	r3,r4,806c <__alt_data_end+0xf800806c>
    8078:	8a000417 	ldw	r8,16(r17)
    807c:	89000504 	addi	r4,r17,20
    8080:	a18007cc 	andi	r6,r20,31
    8084:	4211883a 	add	r8,r8,r8
    8088:	4211883a 	add	r8,r8,r8
    808c:	2211883a 	add	r8,r4,r8
    8090:	30002326 	beq	r6,zero,8120 <__lshift+0x128>
    8094:	02400804 	movi	r9,32
    8098:	4993c83a 	sub	r9,r9,r6
    809c:	000b883a 	mov	r5,zero
    80a0:	21c00017 	ldw	r7,0(r4)
    80a4:	1815883a 	mov	r10,r3
    80a8:	18c00104 	addi	r3,r3,4
    80ac:	398e983a 	sll	r7,r7,r6
    80b0:	21000104 	addi	r4,r4,4
    80b4:	394ab03a 	or	r5,r7,r5
    80b8:	197fff15 	stw	r5,-4(r3)
    80bc:	217fff17 	ldw	r5,-4(r4)
    80c0:	2a4ad83a 	srl	r5,r5,r9
    80c4:	223ff636 	bltu	r4,r8,80a0 <__alt_data_end+0xf80080a0>
    80c8:	51400115 	stw	r5,4(r10)
    80cc:	28001a1e 	bne	r5,zero,8138 <__lshift+0x140>
    80d0:	843fffc4 	addi	r16,r16,-1
    80d4:	14000415 	stw	r16,16(r2)
    80d8:	88000826 	beq	r17,zero,80fc <__lshift+0x104>
    80dc:	89000117 	ldw	r4,4(r17)
    80e0:	90c01317 	ldw	r3,76(r18)
    80e4:	2109883a 	add	r4,r4,r4
    80e8:	2109883a 	add	r4,r4,r4
    80ec:	1907883a 	add	r3,r3,r4
    80f0:	19000017 	ldw	r4,0(r3)
    80f4:	89000015 	stw	r4,0(r17)
    80f8:	1c400015 	stw	r17,0(r3)
    80fc:	dfc00617 	ldw	ra,24(sp)
    8100:	dd400517 	ldw	r21,20(sp)
    8104:	dd000417 	ldw	r20,16(sp)
    8108:	dcc00317 	ldw	r19,12(sp)
    810c:	dc800217 	ldw	r18,8(sp)
    8110:	dc400117 	ldw	r17,4(sp)
    8114:	dc000017 	ldw	r16,0(sp)
    8118:	dec00704 	addi	sp,sp,28
    811c:	f800283a 	ret
    8120:	21400017 	ldw	r5,0(r4)
    8124:	18c00104 	addi	r3,r3,4
    8128:	21000104 	addi	r4,r4,4
    812c:	197fff15 	stw	r5,-4(r3)
    8130:	223ffb36 	bltu	r4,r8,8120 <__alt_data_end+0xf8008120>
    8134:	003fe606 	br	80d0 <__alt_data_end+0xf80080d0>
    8138:	9c000084 	addi	r16,r19,2
    813c:	003fe406 	br	80d0 <__alt_data_end+0xf80080d0>

00008140 <__mcmp>:
    8140:	20800417 	ldw	r2,16(r4)
    8144:	28c00417 	ldw	r3,16(r5)
    8148:	10c5c83a 	sub	r2,r2,r3
    814c:	1000111e 	bne	r2,zero,8194 <__mcmp+0x54>
    8150:	18c7883a 	add	r3,r3,r3
    8154:	18c7883a 	add	r3,r3,r3
    8158:	21000504 	addi	r4,r4,20
    815c:	29400504 	addi	r5,r5,20
    8160:	20c5883a 	add	r2,r4,r3
    8164:	28cb883a 	add	r5,r5,r3
    8168:	00000106 	br	8170 <__mcmp+0x30>
    816c:	20800a2e 	bgeu	r4,r2,8198 <__mcmp+0x58>
    8170:	10bfff04 	addi	r2,r2,-4
    8174:	297fff04 	addi	r5,r5,-4
    8178:	11800017 	ldw	r6,0(r2)
    817c:	28c00017 	ldw	r3,0(r5)
    8180:	30fffa26 	beq	r6,r3,816c <__alt_data_end+0xf800816c>
    8184:	30c00236 	bltu	r6,r3,8190 <__mcmp+0x50>
    8188:	00800044 	movi	r2,1
    818c:	f800283a 	ret
    8190:	00bfffc4 	movi	r2,-1
    8194:	f800283a 	ret
    8198:	0005883a 	mov	r2,zero
    819c:	f800283a 	ret

000081a0 <__mdiff>:
    81a0:	28c00417 	ldw	r3,16(r5)
    81a4:	30800417 	ldw	r2,16(r6)
    81a8:	defffa04 	addi	sp,sp,-24
    81ac:	dcc00315 	stw	r19,12(sp)
    81b0:	dc800215 	stw	r18,8(sp)
    81b4:	dfc00515 	stw	ra,20(sp)
    81b8:	dd000415 	stw	r20,16(sp)
    81bc:	dc400115 	stw	r17,4(sp)
    81c0:	dc000015 	stw	r16,0(sp)
    81c4:	1887c83a 	sub	r3,r3,r2
    81c8:	2825883a 	mov	r18,r5
    81cc:	3027883a 	mov	r19,r6
    81d0:	1800141e 	bne	r3,zero,8224 <__mdiff+0x84>
    81d4:	1085883a 	add	r2,r2,r2
    81d8:	1085883a 	add	r2,r2,r2
    81dc:	2a000504 	addi	r8,r5,20
    81e0:	34000504 	addi	r16,r6,20
    81e4:	4087883a 	add	r3,r8,r2
    81e8:	8085883a 	add	r2,r16,r2
    81ec:	00000106 	br	81f4 <__mdiff+0x54>
    81f0:	40c0592e 	bgeu	r8,r3,8358 <__mdiff+0x1b8>
    81f4:	18ffff04 	addi	r3,r3,-4
    81f8:	10bfff04 	addi	r2,r2,-4
    81fc:	19c00017 	ldw	r7,0(r3)
    8200:	11400017 	ldw	r5,0(r2)
    8204:	397ffa26 	beq	r7,r5,81f0 <__alt_data_end+0xf80081f0>
    8208:	3940592e 	bgeu	r7,r5,8370 <__mdiff+0x1d0>
    820c:	9005883a 	mov	r2,r18
    8210:	4023883a 	mov	r17,r8
    8214:	9825883a 	mov	r18,r19
    8218:	05000044 	movi	r20,1
    821c:	1027883a 	mov	r19,r2
    8220:	00000406 	br	8234 <__mdiff+0x94>
    8224:	18005616 	blt	r3,zero,8380 <__mdiff+0x1e0>
    8228:	34400504 	addi	r17,r6,20
    822c:	2c000504 	addi	r16,r5,20
    8230:	0029883a 	mov	r20,zero
    8234:	91400117 	ldw	r5,4(r18)
    8238:	00077bc0 	call	77bc <_Balloc>
    823c:	92400417 	ldw	r9,16(r18)
    8240:	9b000417 	ldw	r12,16(r19)
    8244:	12c00504 	addi	r11,r2,20
    8248:	4a51883a 	add	r8,r9,r9
    824c:	6319883a 	add	r12,r12,r12
    8250:	4211883a 	add	r8,r8,r8
    8254:	6319883a 	add	r12,r12,r12
    8258:	15000315 	stw	r20,12(r2)
    825c:	8211883a 	add	r8,r16,r8
    8260:	8b19883a 	add	r12,r17,r12
    8264:	0007883a 	mov	r3,zero
    8268:	81400017 	ldw	r5,0(r16)
    826c:	89c00017 	ldw	r7,0(r17)
    8270:	59800104 	addi	r6,r11,4
    8274:	293fffcc 	andi	r4,r5,65535
    8278:	20c7883a 	add	r3,r4,r3
    827c:	393fffcc 	andi	r4,r7,65535
    8280:	1909c83a 	sub	r4,r3,r4
    8284:	280ad43a 	srli	r5,r5,16
    8288:	380ed43a 	srli	r7,r7,16
    828c:	2007d43a 	srai	r3,r4,16
    8290:	213fffcc 	andi	r4,r4,65535
    8294:	29cbc83a 	sub	r5,r5,r7
    8298:	28c7883a 	add	r3,r5,r3
    829c:	180a943a 	slli	r5,r3,16
    82a0:	8c400104 	addi	r17,r17,4
    82a4:	84000104 	addi	r16,r16,4
    82a8:	2908b03a 	or	r4,r5,r4
    82ac:	59000015 	stw	r4,0(r11)
    82b0:	1807d43a 	srai	r3,r3,16
    82b4:	3015883a 	mov	r10,r6
    82b8:	3017883a 	mov	r11,r6
    82bc:	8b3fea36 	bltu	r17,r12,8268 <__alt_data_end+0xf8008268>
    82c0:	8200162e 	bgeu	r16,r8,831c <__mdiff+0x17c>
    82c4:	8017883a 	mov	r11,r16
    82c8:	59400017 	ldw	r5,0(r11)
    82cc:	31800104 	addi	r6,r6,4
    82d0:	5ac00104 	addi	r11,r11,4
    82d4:	293fffcc 	andi	r4,r5,65535
    82d8:	20c7883a 	add	r3,r4,r3
    82dc:	280ed43a 	srli	r7,r5,16
    82e0:	180bd43a 	srai	r5,r3,16
    82e4:	193fffcc 	andi	r4,r3,65535
    82e8:	3947883a 	add	r3,r7,r5
    82ec:	180a943a 	slli	r5,r3,16
    82f0:	1807d43a 	srai	r3,r3,16
    82f4:	2908b03a 	or	r4,r5,r4
    82f8:	313fff15 	stw	r4,-4(r6)
    82fc:	5a3ff236 	bltu	r11,r8,82c8 <__alt_data_end+0xf80082c8>
    8300:	0406303a 	nor	r3,zero,r16
    8304:	1a07883a 	add	r3,r3,r8
    8308:	1806d0ba 	srli	r3,r3,2
    830c:	18c00044 	addi	r3,r3,1
    8310:	18c7883a 	add	r3,r3,r3
    8314:	18c7883a 	add	r3,r3,r3
    8318:	50d5883a 	add	r10,r10,r3
    831c:	50ffff04 	addi	r3,r10,-4
    8320:	2000041e 	bne	r4,zero,8334 <__mdiff+0x194>
    8324:	18ffff04 	addi	r3,r3,-4
    8328:	19000017 	ldw	r4,0(r3)
    832c:	4a7fffc4 	addi	r9,r9,-1
    8330:	203ffc26 	beq	r4,zero,8324 <__alt_data_end+0xf8008324>
    8334:	12400415 	stw	r9,16(r2)
    8338:	dfc00517 	ldw	ra,20(sp)
    833c:	dd000417 	ldw	r20,16(sp)
    8340:	dcc00317 	ldw	r19,12(sp)
    8344:	dc800217 	ldw	r18,8(sp)
    8348:	dc400117 	ldw	r17,4(sp)
    834c:	dc000017 	ldw	r16,0(sp)
    8350:	dec00604 	addi	sp,sp,24
    8354:	f800283a 	ret
    8358:	000b883a 	mov	r5,zero
    835c:	00077bc0 	call	77bc <_Balloc>
    8360:	00c00044 	movi	r3,1
    8364:	10c00415 	stw	r3,16(r2)
    8368:	10000515 	stw	zero,20(r2)
    836c:	003ff206 	br	8338 <__alt_data_end+0xf8008338>
    8370:	8023883a 	mov	r17,r16
    8374:	0029883a 	mov	r20,zero
    8378:	4021883a 	mov	r16,r8
    837c:	003fad06 	br	8234 <__alt_data_end+0xf8008234>
    8380:	9005883a 	mov	r2,r18
    8384:	94400504 	addi	r17,r18,20
    8388:	9c000504 	addi	r16,r19,20
    838c:	9825883a 	mov	r18,r19
    8390:	05000044 	movi	r20,1
    8394:	1027883a 	mov	r19,r2
    8398:	003fa606 	br	8234 <__alt_data_end+0xf8008234>

0000839c <__ulp>:
    839c:	295ffc2c 	andhi	r5,r5,32752
    83a0:	00bf3034 	movhi	r2,64704
    83a4:	2887883a 	add	r3,r5,r2
    83a8:	00c0020e 	bge	zero,r3,83b4 <__ulp+0x18>
    83ac:	0005883a 	mov	r2,zero
    83b0:	f800283a 	ret
    83b4:	00c7c83a 	sub	r3,zero,r3
    83b8:	1807d53a 	srai	r3,r3,20
    83bc:	008004c4 	movi	r2,19
    83c0:	10c00b0e 	bge	r2,r3,83f0 <__ulp+0x54>
    83c4:	18bffb04 	addi	r2,r3,-20
    83c8:	01000784 	movi	r4,30
    83cc:	0007883a 	mov	r3,zero
    83d0:	20800516 	blt	r4,r2,83e8 <__ulp+0x4c>
    83d4:	010007c4 	movi	r4,31
    83d8:	2089c83a 	sub	r4,r4,r2
    83dc:	00800044 	movi	r2,1
    83e0:	1104983a 	sll	r2,r2,r4
    83e4:	f800283a 	ret
    83e8:	00800044 	movi	r2,1
    83ec:	f800283a 	ret
    83f0:	01400234 	movhi	r5,8
    83f4:	28c7d83a 	sra	r3,r5,r3
    83f8:	0005883a 	mov	r2,zero
    83fc:	f800283a 	ret

00008400 <__b2d>:
    8400:	defffa04 	addi	sp,sp,-24
    8404:	dc000015 	stw	r16,0(sp)
    8408:	24000417 	ldw	r16,16(r4)
    840c:	dc400115 	stw	r17,4(sp)
    8410:	24400504 	addi	r17,r4,20
    8414:	8421883a 	add	r16,r16,r16
    8418:	8421883a 	add	r16,r16,r16
    841c:	8c21883a 	add	r16,r17,r16
    8420:	dc800215 	stw	r18,8(sp)
    8424:	84bfff17 	ldw	r18,-4(r16)
    8428:	dd000415 	stw	r20,16(sp)
    842c:	dcc00315 	stw	r19,12(sp)
    8430:	9009883a 	mov	r4,r18
    8434:	2829883a 	mov	r20,r5
    8438:	dfc00515 	stw	ra,20(sp)
    843c:	0007ad80 	call	7ad8 <__hi0bits>
    8440:	00c00804 	movi	r3,32
    8444:	1889c83a 	sub	r4,r3,r2
    8448:	a1000015 	stw	r4,0(r20)
    844c:	01000284 	movi	r4,10
    8450:	84ffff04 	addi	r19,r16,-4
    8454:	20801216 	blt	r4,r2,84a0 <__b2d+0xa0>
    8458:	018002c4 	movi	r6,11
    845c:	308dc83a 	sub	r6,r6,r2
    8460:	9186d83a 	srl	r3,r18,r6
    8464:	18cffc34 	orhi	r3,r3,16368
    8468:	8cc0212e 	bgeu	r17,r19,84f0 <__b2d+0xf0>
    846c:	813ffe17 	ldw	r4,-8(r16)
    8470:	218cd83a 	srl	r6,r4,r6
    8474:	10800544 	addi	r2,r2,21
    8478:	9084983a 	sll	r2,r18,r2
    847c:	1184b03a 	or	r2,r2,r6
    8480:	dfc00517 	ldw	ra,20(sp)
    8484:	dd000417 	ldw	r20,16(sp)
    8488:	dcc00317 	ldw	r19,12(sp)
    848c:	dc800217 	ldw	r18,8(sp)
    8490:	dc400117 	ldw	r17,4(sp)
    8494:	dc000017 	ldw	r16,0(sp)
    8498:	dec00604 	addi	sp,sp,24
    849c:	f800283a 	ret
    84a0:	8cc00f2e 	bgeu	r17,r19,84e0 <__b2d+0xe0>
    84a4:	117ffd44 	addi	r5,r2,-11
    84a8:	80bffe17 	ldw	r2,-8(r16)
    84ac:	28000e26 	beq	r5,zero,84e8 <__b2d+0xe8>
    84b0:	1949c83a 	sub	r4,r3,r5
    84b4:	9164983a 	sll	r18,r18,r5
    84b8:	1106d83a 	srl	r3,r2,r4
    84bc:	81bffe04 	addi	r6,r16,-8
    84c0:	948ffc34 	orhi	r18,r18,16368
    84c4:	90c6b03a 	or	r3,r18,r3
    84c8:	89800e2e 	bgeu	r17,r6,8504 <__b2d+0x104>
    84cc:	81bffd17 	ldw	r6,-12(r16)
    84d0:	1144983a 	sll	r2,r2,r5
    84d4:	310ad83a 	srl	r5,r6,r4
    84d8:	2884b03a 	or	r2,r5,r2
    84dc:	003fe806 	br	8480 <__alt_data_end+0xf8008480>
    84e0:	10bffd44 	addi	r2,r2,-11
    84e4:	1000041e 	bne	r2,zero,84f8 <__b2d+0xf8>
    84e8:	90cffc34 	orhi	r3,r18,16368
    84ec:	003fe406 	br	8480 <__alt_data_end+0xf8008480>
    84f0:	000d883a 	mov	r6,zero
    84f4:	003fdf06 	br	8474 <__alt_data_end+0xf8008474>
    84f8:	90a4983a 	sll	r18,r18,r2
    84fc:	0005883a 	mov	r2,zero
    8500:	003ff906 	br	84e8 <__alt_data_end+0xf80084e8>
    8504:	1144983a 	sll	r2,r2,r5
    8508:	003fdd06 	br	8480 <__alt_data_end+0xf8008480>

0000850c <__d2b>:
    850c:	defff804 	addi	sp,sp,-32
    8510:	dc000215 	stw	r16,8(sp)
    8514:	3021883a 	mov	r16,r6
    8518:	dc400315 	stw	r17,12(sp)
    851c:	8022907a 	slli	r17,r16,1
    8520:	dd000615 	stw	r20,24(sp)
    8524:	2829883a 	mov	r20,r5
    8528:	01400044 	movi	r5,1
    852c:	dcc00515 	stw	r19,20(sp)
    8530:	dc800415 	stw	r18,16(sp)
    8534:	dfc00715 	stw	ra,28(sp)
    8538:	3825883a 	mov	r18,r7
    853c:	8822d57a 	srli	r17,r17,21
    8540:	00077bc0 	call	77bc <_Balloc>
    8544:	1027883a 	mov	r19,r2
    8548:	00800434 	movhi	r2,16
    854c:	10bfffc4 	addi	r2,r2,-1
    8550:	808c703a 	and	r6,r16,r2
    8554:	88000126 	beq	r17,zero,855c <__d2b+0x50>
    8558:	31800434 	orhi	r6,r6,16
    855c:	d9800015 	stw	r6,0(sp)
    8560:	a0002426 	beq	r20,zero,85f4 <__d2b+0xe8>
    8564:	d9000104 	addi	r4,sp,4
    8568:	dd000115 	stw	r20,4(sp)
    856c:	0007b400 	call	7b40 <__lo0bits>
    8570:	d8c00017 	ldw	r3,0(sp)
    8574:	10002f1e 	bne	r2,zero,8634 <__d2b+0x128>
    8578:	d9000117 	ldw	r4,4(sp)
    857c:	99000515 	stw	r4,20(r19)
    8580:	1821003a 	cmpeq	r16,r3,zero
    8584:	01000084 	movi	r4,2
    8588:	2421c83a 	sub	r16,r4,r16
    858c:	98c00615 	stw	r3,24(r19)
    8590:	9c000415 	stw	r16,16(r19)
    8594:	88001f1e 	bne	r17,zero,8614 <__d2b+0x108>
    8598:	10bef384 	addi	r2,r2,-1074
    859c:	90800015 	stw	r2,0(r18)
    85a0:	00900034 	movhi	r2,16384
    85a4:	10bfffc4 	addi	r2,r2,-1
    85a8:	8085883a 	add	r2,r16,r2
    85ac:	1085883a 	add	r2,r2,r2
    85b0:	1085883a 	add	r2,r2,r2
    85b4:	9885883a 	add	r2,r19,r2
    85b8:	11000517 	ldw	r4,20(r2)
    85bc:	8020917a 	slli	r16,r16,5
    85c0:	0007ad80 	call	7ad8 <__hi0bits>
    85c4:	d8c00817 	ldw	r3,32(sp)
    85c8:	8085c83a 	sub	r2,r16,r2
    85cc:	18800015 	stw	r2,0(r3)
    85d0:	9805883a 	mov	r2,r19
    85d4:	dfc00717 	ldw	ra,28(sp)
    85d8:	dd000617 	ldw	r20,24(sp)
    85dc:	dcc00517 	ldw	r19,20(sp)
    85e0:	dc800417 	ldw	r18,16(sp)
    85e4:	dc400317 	ldw	r17,12(sp)
    85e8:	dc000217 	ldw	r16,8(sp)
    85ec:	dec00804 	addi	sp,sp,32
    85f0:	f800283a 	ret
    85f4:	d809883a 	mov	r4,sp
    85f8:	0007b400 	call	7b40 <__lo0bits>
    85fc:	d8c00017 	ldw	r3,0(sp)
    8600:	04000044 	movi	r16,1
    8604:	9c000415 	stw	r16,16(r19)
    8608:	98c00515 	stw	r3,20(r19)
    860c:	10800804 	addi	r2,r2,32
    8610:	883fe126 	beq	r17,zero,8598 <__alt_data_end+0xf8008598>
    8614:	00c00d44 	movi	r3,53
    8618:	8c7ef344 	addi	r17,r17,-1075
    861c:	88a3883a 	add	r17,r17,r2
    8620:	1885c83a 	sub	r2,r3,r2
    8624:	d8c00817 	ldw	r3,32(sp)
    8628:	94400015 	stw	r17,0(r18)
    862c:	18800015 	stw	r2,0(r3)
    8630:	003fe706 	br	85d0 <__alt_data_end+0xf80085d0>
    8634:	01000804 	movi	r4,32
    8638:	2089c83a 	sub	r4,r4,r2
    863c:	1908983a 	sll	r4,r3,r4
    8640:	d9400117 	ldw	r5,4(sp)
    8644:	1886d83a 	srl	r3,r3,r2
    8648:	2148b03a 	or	r4,r4,r5
    864c:	99000515 	stw	r4,20(r19)
    8650:	d8c00015 	stw	r3,0(sp)
    8654:	003fca06 	br	8580 <__alt_data_end+0xf8008580>

00008658 <__ratio>:
    8658:	defff904 	addi	sp,sp,-28
    865c:	dc400315 	stw	r17,12(sp)
    8660:	2823883a 	mov	r17,r5
    8664:	d9400104 	addi	r5,sp,4
    8668:	dfc00615 	stw	ra,24(sp)
    866c:	dcc00515 	stw	r19,20(sp)
    8670:	dc800415 	stw	r18,16(sp)
    8674:	2027883a 	mov	r19,r4
    8678:	dc000215 	stw	r16,8(sp)
    867c:	00084000 	call	8400 <__b2d>
    8680:	d80b883a 	mov	r5,sp
    8684:	8809883a 	mov	r4,r17
    8688:	1025883a 	mov	r18,r2
    868c:	1821883a 	mov	r16,r3
    8690:	00084000 	call	8400 <__b2d>
    8694:	8a000417 	ldw	r8,16(r17)
    8698:	99000417 	ldw	r4,16(r19)
    869c:	d9400117 	ldw	r5,4(sp)
    86a0:	2209c83a 	sub	r4,r4,r8
    86a4:	2010917a 	slli	r8,r4,5
    86a8:	d9000017 	ldw	r4,0(sp)
    86ac:	2909c83a 	sub	r4,r5,r4
    86b0:	4109883a 	add	r4,r8,r4
    86b4:	01000e0e 	bge	zero,r4,86f0 <__ratio+0x98>
    86b8:	2008953a 	slli	r4,r4,20
    86bc:	2421883a 	add	r16,r4,r16
    86c0:	100d883a 	mov	r6,r2
    86c4:	180f883a 	mov	r7,r3
    86c8:	9009883a 	mov	r4,r18
    86cc:	800b883a 	mov	r5,r16
    86d0:	000c7600 	call	c760 <__divdf3>
    86d4:	dfc00617 	ldw	ra,24(sp)
    86d8:	dcc00517 	ldw	r19,20(sp)
    86dc:	dc800417 	ldw	r18,16(sp)
    86e0:	dc400317 	ldw	r17,12(sp)
    86e4:	dc000217 	ldw	r16,8(sp)
    86e8:	dec00704 	addi	sp,sp,28
    86ec:	f800283a 	ret
    86f0:	2008953a 	slli	r4,r4,20
    86f4:	1907c83a 	sub	r3,r3,r4
    86f8:	003ff106 	br	86c0 <__alt_data_end+0xf80086c0>

000086fc <_mprec_log10>:
    86fc:	defffe04 	addi	sp,sp,-8
    8700:	dc000015 	stw	r16,0(sp)
    8704:	dfc00115 	stw	ra,4(sp)
    8708:	008005c4 	movi	r2,23
    870c:	2021883a 	mov	r16,r4
    8710:	11000d0e 	bge	r2,r4,8748 <_mprec_log10+0x4c>
    8714:	0005883a 	mov	r2,zero
    8718:	00cffc34 	movhi	r3,16368
    871c:	843fffc4 	addi	r16,r16,-1
    8720:	000d883a 	mov	r6,zero
    8724:	01d00934 	movhi	r7,16420
    8728:	1009883a 	mov	r4,r2
    872c:	180b883a 	mov	r5,r3
    8730:	000d3880 	call	d388 <__muldf3>
    8734:	803ff91e 	bne	r16,zero,871c <__alt_data_end+0xf800871c>
    8738:	dfc00117 	ldw	ra,4(sp)
    873c:	dc000017 	ldw	r16,0(sp)
    8740:	dec00204 	addi	sp,sp,8
    8744:	f800283a 	ret
    8748:	202090fa 	slli	r16,r4,3
    874c:	00800074 	movhi	r2,1
    8750:	10886404 	addi	r2,r2,8592
    8754:	1421883a 	add	r16,r2,r16
    8758:	80800017 	ldw	r2,0(r16)
    875c:	80c00117 	ldw	r3,4(r16)
    8760:	dfc00117 	ldw	ra,4(sp)
    8764:	dc000017 	ldw	r16,0(sp)
    8768:	dec00204 	addi	sp,sp,8
    876c:	f800283a 	ret

00008770 <__copybits>:
    8770:	297fffc4 	addi	r5,r5,-1
    8774:	280fd17a 	srai	r7,r5,5
    8778:	30c00417 	ldw	r3,16(r6)
    877c:	30800504 	addi	r2,r6,20
    8780:	39c00044 	addi	r7,r7,1
    8784:	18c7883a 	add	r3,r3,r3
    8788:	39cf883a 	add	r7,r7,r7
    878c:	18c7883a 	add	r3,r3,r3
    8790:	39cf883a 	add	r7,r7,r7
    8794:	10c7883a 	add	r3,r2,r3
    8798:	21cf883a 	add	r7,r4,r7
    879c:	10c00d2e 	bgeu	r2,r3,87d4 <__copybits+0x64>
    87a0:	200b883a 	mov	r5,r4
    87a4:	12000017 	ldw	r8,0(r2)
    87a8:	29400104 	addi	r5,r5,4
    87ac:	10800104 	addi	r2,r2,4
    87b0:	2a3fff15 	stw	r8,-4(r5)
    87b4:	10fffb36 	bltu	r2,r3,87a4 <__alt_data_end+0xf80087a4>
    87b8:	1985c83a 	sub	r2,r3,r6
    87bc:	10bffac4 	addi	r2,r2,-21
    87c0:	1004d0ba 	srli	r2,r2,2
    87c4:	10800044 	addi	r2,r2,1
    87c8:	1085883a 	add	r2,r2,r2
    87cc:	1085883a 	add	r2,r2,r2
    87d0:	2089883a 	add	r4,r4,r2
    87d4:	21c0032e 	bgeu	r4,r7,87e4 <__copybits+0x74>
    87d8:	20000015 	stw	zero,0(r4)
    87dc:	21000104 	addi	r4,r4,4
    87e0:	21fffd36 	bltu	r4,r7,87d8 <__alt_data_end+0xf80087d8>
    87e4:	f800283a 	ret

000087e8 <__any_on>:
    87e8:	20c00417 	ldw	r3,16(r4)
    87ec:	2805d17a 	srai	r2,r5,5
    87f0:	21000504 	addi	r4,r4,20
    87f4:	18800d0e 	bge	r3,r2,882c <__any_on+0x44>
    87f8:	18c7883a 	add	r3,r3,r3
    87fc:	18c7883a 	add	r3,r3,r3
    8800:	20c7883a 	add	r3,r4,r3
    8804:	20c0192e 	bgeu	r4,r3,886c <__any_on+0x84>
    8808:	18bfff17 	ldw	r2,-4(r3)
    880c:	18ffff04 	addi	r3,r3,-4
    8810:	1000041e 	bne	r2,zero,8824 <__any_on+0x3c>
    8814:	20c0142e 	bgeu	r4,r3,8868 <__any_on+0x80>
    8818:	18ffff04 	addi	r3,r3,-4
    881c:	19400017 	ldw	r5,0(r3)
    8820:	283ffc26 	beq	r5,zero,8814 <__alt_data_end+0xf8008814>
    8824:	00800044 	movi	r2,1
    8828:	f800283a 	ret
    882c:	10c00a0e 	bge	r2,r3,8858 <__any_on+0x70>
    8830:	1085883a 	add	r2,r2,r2
    8834:	1085883a 	add	r2,r2,r2
    8838:	294007cc 	andi	r5,r5,31
    883c:	2087883a 	add	r3,r4,r2
    8840:	283ff026 	beq	r5,zero,8804 <__alt_data_end+0xf8008804>
    8844:	19800017 	ldw	r6,0(r3)
    8848:	3144d83a 	srl	r2,r6,r5
    884c:	114a983a 	sll	r5,r2,r5
    8850:	317ff41e 	bne	r6,r5,8824 <__alt_data_end+0xf8008824>
    8854:	003feb06 	br	8804 <__alt_data_end+0xf8008804>
    8858:	1085883a 	add	r2,r2,r2
    885c:	1085883a 	add	r2,r2,r2
    8860:	2087883a 	add	r3,r4,r2
    8864:	003fe706 	br	8804 <__alt_data_end+0xf8008804>
    8868:	f800283a 	ret
    886c:	0005883a 	mov	r2,zero
    8870:	f800283a 	ret

00008874 <_realloc_r>:
    8874:	defff604 	addi	sp,sp,-40
    8878:	dc800215 	stw	r18,8(sp)
    887c:	dfc00915 	stw	ra,36(sp)
    8880:	df000815 	stw	fp,32(sp)
    8884:	ddc00715 	stw	r23,28(sp)
    8888:	dd800615 	stw	r22,24(sp)
    888c:	dd400515 	stw	r21,20(sp)
    8890:	dd000415 	stw	r20,16(sp)
    8894:	dcc00315 	stw	r19,12(sp)
    8898:	dc400115 	stw	r17,4(sp)
    889c:	dc000015 	stw	r16,0(sp)
    88a0:	3025883a 	mov	r18,r6
    88a4:	2800b726 	beq	r5,zero,8b84 <_realloc_r+0x310>
    88a8:	282b883a 	mov	r21,r5
    88ac:	2029883a 	mov	r20,r4
    88b0:	000ede40 	call	ede4 <__malloc_lock>
    88b4:	a8bfff17 	ldw	r2,-4(r21)
    88b8:	043fff04 	movi	r16,-4
    88bc:	90c002c4 	addi	r3,r18,11
    88c0:	01000584 	movi	r4,22
    88c4:	acfffe04 	addi	r19,r21,-8
    88c8:	1420703a 	and	r16,r2,r16
    88cc:	20c0332e 	bgeu	r4,r3,899c <_realloc_r+0x128>
    88d0:	047ffe04 	movi	r17,-8
    88d4:	1c62703a 	and	r17,r3,r17
    88d8:	8807883a 	mov	r3,r17
    88dc:	88005816 	blt	r17,zero,8a40 <_realloc_r+0x1cc>
    88e0:	8c805736 	bltu	r17,r18,8a40 <_realloc_r+0x1cc>
    88e4:	80c0300e 	bge	r16,r3,89a8 <_realloc_r+0x134>
    88e8:	07000074 	movhi	fp,1
    88ec:	e70a9804 	addi	fp,fp,10848
    88f0:	e1c00217 	ldw	r7,8(fp)
    88f4:	9c09883a 	add	r4,r19,r16
    88f8:	22000117 	ldw	r8,4(r4)
    88fc:	21c06326 	beq	r4,r7,8a8c <_realloc_r+0x218>
    8900:	017fff84 	movi	r5,-2
    8904:	414a703a 	and	r5,r8,r5
    8908:	214b883a 	add	r5,r4,r5
    890c:	29800117 	ldw	r6,4(r5)
    8910:	3180004c 	andi	r6,r6,1
    8914:	30003f26 	beq	r6,zero,8a14 <_realloc_r+0x1a0>
    8918:	1080004c 	andi	r2,r2,1
    891c:	10008326 	beq	r2,zero,8b2c <_realloc_r+0x2b8>
    8920:	900b883a 	mov	r5,r18
    8924:	a009883a 	mov	r4,r20
    8928:	00019140 	call	1914 <_malloc_r>
    892c:	1025883a 	mov	r18,r2
    8930:	10011e26 	beq	r2,zero,8dac <_realloc_r+0x538>
    8934:	a93fff17 	ldw	r4,-4(r21)
    8938:	10fffe04 	addi	r3,r2,-8
    893c:	00bfff84 	movi	r2,-2
    8940:	2084703a 	and	r2,r4,r2
    8944:	9885883a 	add	r2,r19,r2
    8948:	1880ee26 	beq	r3,r2,8d04 <_realloc_r+0x490>
    894c:	81bfff04 	addi	r6,r16,-4
    8950:	00800904 	movi	r2,36
    8954:	1180b836 	bltu	r2,r6,8c38 <_realloc_r+0x3c4>
    8958:	00c004c4 	movi	r3,19
    895c:	19809636 	bltu	r3,r6,8bb8 <_realloc_r+0x344>
    8960:	9005883a 	mov	r2,r18
    8964:	a807883a 	mov	r3,r21
    8968:	19000017 	ldw	r4,0(r3)
    896c:	11000015 	stw	r4,0(r2)
    8970:	19000117 	ldw	r4,4(r3)
    8974:	11000115 	stw	r4,4(r2)
    8978:	18c00217 	ldw	r3,8(r3)
    897c:	10c00215 	stw	r3,8(r2)
    8980:	a80b883a 	mov	r5,r21
    8984:	a009883a 	mov	r4,r20
    8988:	00067140 	call	6714 <_free_r>
    898c:	a009883a 	mov	r4,r20
    8990:	000ee080 	call	ee08 <__malloc_unlock>
    8994:	9005883a 	mov	r2,r18
    8998:	00001206 	br	89e4 <_realloc_r+0x170>
    899c:	00c00404 	movi	r3,16
    89a0:	1823883a 	mov	r17,r3
    89a4:	003fce06 	br	88e0 <__alt_data_end+0xf80088e0>
    89a8:	a825883a 	mov	r18,r21
    89ac:	8445c83a 	sub	r2,r16,r17
    89b0:	00c003c4 	movi	r3,15
    89b4:	18802636 	bltu	r3,r2,8a50 <_realloc_r+0x1dc>
    89b8:	99800117 	ldw	r6,4(r19)
    89bc:	9c07883a 	add	r3,r19,r16
    89c0:	3180004c 	andi	r6,r6,1
    89c4:	3420b03a 	or	r16,r6,r16
    89c8:	9c000115 	stw	r16,4(r19)
    89cc:	18800117 	ldw	r2,4(r3)
    89d0:	10800054 	ori	r2,r2,1
    89d4:	18800115 	stw	r2,4(r3)
    89d8:	a009883a 	mov	r4,r20
    89dc:	000ee080 	call	ee08 <__malloc_unlock>
    89e0:	9005883a 	mov	r2,r18
    89e4:	dfc00917 	ldw	ra,36(sp)
    89e8:	df000817 	ldw	fp,32(sp)
    89ec:	ddc00717 	ldw	r23,28(sp)
    89f0:	dd800617 	ldw	r22,24(sp)
    89f4:	dd400517 	ldw	r21,20(sp)
    89f8:	dd000417 	ldw	r20,16(sp)
    89fc:	dcc00317 	ldw	r19,12(sp)
    8a00:	dc800217 	ldw	r18,8(sp)
    8a04:	dc400117 	ldw	r17,4(sp)
    8a08:	dc000017 	ldw	r16,0(sp)
    8a0c:	dec00a04 	addi	sp,sp,40
    8a10:	f800283a 	ret
    8a14:	017fff04 	movi	r5,-4
    8a18:	414a703a 	and	r5,r8,r5
    8a1c:	814d883a 	add	r6,r16,r5
    8a20:	30c01f16 	blt	r6,r3,8aa0 <_realloc_r+0x22c>
    8a24:	20800317 	ldw	r2,12(r4)
    8a28:	20c00217 	ldw	r3,8(r4)
    8a2c:	a825883a 	mov	r18,r21
    8a30:	3021883a 	mov	r16,r6
    8a34:	18800315 	stw	r2,12(r3)
    8a38:	10c00215 	stw	r3,8(r2)
    8a3c:	003fdb06 	br	89ac <__alt_data_end+0xf80089ac>
    8a40:	00800304 	movi	r2,12
    8a44:	a0800015 	stw	r2,0(r20)
    8a48:	0005883a 	mov	r2,zero
    8a4c:	003fe506 	br	89e4 <__alt_data_end+0xf80089e4>
    8a50:	98c00117 	ldw	r3,4(r19)
    8a54:	9c4b883a 	add	r5,r19,r17
    8a58:	11000054 	ori	r4,r2,1
    8a5c:	18c0004c 	andi	r3,r3,1
    8a60:	1c62b03a 	or	r17,r3,r17
    8a64:	9c400115 	stw	r17,4(r19)
    8a68:	29000115 	stw	r4,4(r5)
    8a6c:	2885883a 	add	r2,r5,r2
    8a70:	10c00117 	ldw	r3,4(r2)
    8a74:	29400204 	addi	r5,r5,8
    8a78:	a009883a 	mov	r4,r20
    8a7c:	18c00054 	ori	r3,r3,1
    8a80:	10c00115 	stw	r3,4(r2)
    8a84:	00067140 	call	6714 <_free_r>
    8a88:	003fd306 	br	89d8 <__alt_data_end+0xf80089d8>
    8a8c:	017fff04 	movi	r5,-4
    8a90:	414a703a 	and	r5,r8,r5
    8a94:	89800404 	addi	r6,r17,16
    8a98:	8151883a 	add	r8,r16,r5
    8a9c:	4180590e 	bge	r8,r6,8c04 <_realloc_r+0x390>
    8aa0:	1080004c 	andi	r2,r2,1
    8aa4:	103f9e1e 	bne	r2,zero,8920 <__alt_data_end+0xf8008920>
    8aa8:	adbffe17 	ldw	r22,-8(r21)
    8aac:	00bfff04 	movi	r2,-4
    8ab0:	9dadc83a 	sub	r22,r19,r22
    8ab4:	b1800117 	ldw	r6,4(r22)
    8ab8:	3084703a 	and	r2,r6,r2
    8abc:	20002026 	beq	r4,zero,8b40 <_realloc_r+0x2cc>
    8ac0:	80af883a 	add	r23,r16,r2
    8ac4:	b96f883a 	add	r23,r23,r5
    8ac8:	21c05f26 	beq	r4,r7,8c48 <_realloc_r+0x3d4>
    8acc:	b8c01c16 	blt	r23,r3,8b40 <_realloc_r+0x2cc>
    8ad0:	20800317 	ldw	r2,12(r4)
    8ad4:	20c00217 	ldw	r3,8(r4)
    8ad8:	81bfff04 	addi	r6,r16,-4
    8adc:	01000904 	movi	r4,36
    8ae0:	18800315 	stw	r2,12(r3)
    8ae4:	10c00215 	stw	r3,8(r2)
    8ae8:	b0c00217 	ldw	r3,8(r22)
    8aec:	b0800317 	ldw	r2,12(r22)
    8af0:	b4800204 	addi	r18,r22,8
    8af4:	18800315 	stw	r2,12(r3)
    8af8:	10c00215 	stw	r3,8(r2)
    8afc:	21801b36 	bltu	r4,r6,8b6c <_realloc_r+0x2f8>
    8b00:	008004c4 	movi	r2,19
    8b04:	1180352e 	bgeu	r2,r6,8bdc <_realloc_r+0x368>
    8b08:	a8800017 	ldw	r2,0(r21)
    8b0c:	b0800215 	stw	r2,8(r22)
    8b10:	a8800117 	ldw	r2,4(r21)
    8b14:	b0800315 	stw	r2,12(r22)
    8b18:	008006c4 	movi	r2,27
    8b1c:	11807f36 	bltu	r2,r6,8d1c <_realloc_r+0x4a8>
    8b20:	b0800404 	addi	r2,r22,16
    8b24:	ad400204 	addi	r21,r21,8
    8b28:	00002d06 	br	8be0 <_realloc_r+0x36c>
    8b2c:	adbffe17 	ldw	r22,-8(r21)
    8b30:	00bfff04 	movi	r2,-4
    8b34:	9dadc83a 	sub	r22,r19,r22
    8b38:	b1000117 	ldw	r4,4(r22)
    8b3c:	2084703a 	and	r2,r4,r2
    8b40:	b03f7726 	beq	r22,zero,8920 <__alt_data_end+0xf8008920>
    8b44:	80af883a 	add	r23,r16,r2
    8b48:	b8ff7516 	blt	r23,r3,8920 <__alt_data_end+0xf8008920>
    8b4c:	b0800317 	ldw	r2,12(r22)
    8b50:	b0c00217 	ldw	r3,8(r22)
    8b54:	81bfff04 	addi	r6,r16,-4
    8b58:	01000904 	movi	r4,36
    8b5c:	18800315 	stw	r2,12(r3)
    8b60:	10c00215 	stw	r3,8(r2)
    8b64:	b4800204 	addi	r18,r22,8
    8b68:	21bfe52e 	bgeu	r4,r6,8b00 <__alt_data_end+0xf8008b00>
    8b6c:	a80b883a 	mov	r5,r21
    8b70:	9009883a 	mov	r4,r18
    8b74:	00075380 	call	7538 <memmove>
    8b78:	b821883a 	mov	r16,r23
    8b7c:	b027883a 	mov	r19,r22
    8b80:	003f8a06 	br	89ac <__alt_data_end+0xf80089ac>
    8b84:	300b883a 	mov	r5,r6
    8b88:	dfc00917 	ldw	ra,36(sp)
    8b8c:	df000817 	ldw	fp,32(sp)
    8b90:	ddc00717 	ldw	r23,28(sp)
    8b94:	dd800617 	ldw	r22,24(sp)
    8b98:	dd400517 	ldw	r21,20(sp)
    8b9c:	dd000417 	ldw	r20,16(sp)
    8ba0:	dcc00317 	ldw	r19,12(sp)
    8ba4:	dc800217 	ldw	r18,8(sp)
    8ba8:	dc400117 	ldw	r17,4(sp)
    8bac:	dc000017 	ldw	r16,0(sp)
    8bb0:	dec00a04 	addi	sp,sp,40
    8bb4:	00019141 	jmpi	1914 <_malloc_r>
    8bb8:	a8c00017 	ldw	r3,0(r21)
    8bbc:	90c00015 	stw	r3,0(r18)
    8bc0:	a8c00117 	ldw	r3,4(r21)
    8bc4:	90c00115 	stw	r3,4(r18)
    8bc8:	00c006c4 	movi	r3,27
    8bcc:	19804536 	bltu	r3,r6,8ce4 <_realloc_r+0x470>
    8bd0:	90800204 	addi	r2,r18,8
    8bd4:	a8c00204 	addi	r3,r21,8
    8bd8:	003f6306 	br	8968 <__alt_data_end+0xf8008968>
    8bdc:	9005883a 	mov	r2,r18
    8be0:	a8c00017 	ldw	r3,0(r21)
    8be4:	b821883a 	mov	r16,r23
    8be8:	b027883a 	mov	r19,r22
    8bec:	10c00015 	stw	r3,0(r2)
    8bf0:	a8c00117 	ldw	r3,4(r21)
    8bf4:	10c00115 	stw	r3,4(r2)
    8bf8:	a8c00217 	ldw	r3,8(r21)
    8bfc:	10c00215 	stw	r3,8(r2)
    8c00:	003f6a06 	br	89ac <__alt_data_end+0xf80089ac>
    8c04:	9c67883a 	add	r19,r19,r17
    8c08:	4445c83a 	sub	r2,r8,r17
    8c0c:	e4c00215 	stw	r19,8(fp)
    8c10:	10800054 	ori	r2,r2,1
    8c14:	98800115 	stw	r2,4(r19)
    8c18:	a8bfff17 	ldw	r2,-4(r21)
    8c1c:	a009883a 	mov	r4,r20
    8c20:	1080004c 	andi	r2,r2,1
    8c24:	1462b03a 	or	r17,r2,r17
    8c28:	ac7fff15 	stw	r17,-4(r21)
    8c2c:	000ee080 	call	ee08 <__malloc_unlock>
    8c30:	a805883a 	mov	r2,r21
    8c34:	003f6b06 	br	89e4 <__alt_data_end+0xf80089e4>
    8c38:	a80b883a 	mov	r5,r21
    8c3c:	9009883a 	mov	r4,r18
    8c40:	00075380 	call	7538 <memmove>
    8c44:	003f4e06 	br	8980 <__alt_data_end+0xf8008980>
    8c48:	89000404 	addi	r4,r17,16
    8c4c:	b93fbc16 	blt	r23,r4,8b40 <__alt_data_end+0xf8008b40>
    8c50:	b0800317 	ldw	r2,12(r22)
    8c54:	b0c00217 	ldw	r3,8(r22)
    8c58:	81bfff04 	addi	r6,r16,-4
    8c5c:	01000904 	movi	r4,36
    8c60:	18800315 	stw	r2,12(r3)
    8c64:	10c00215 	stw	r3,8(r2)
    8c68:	b4800204 	addi	r18,r22,8
    8c6c:	21804336 	bltu	r4,r6,8d7c <_realloc_r+0x508>
    8c70:	008004c4 	movi	r2,19
    8c74:	11803f2e 	bgeu	r2,r6,8d74 <_realloc_r+0x500>
    8c78:	a8800017 	ldw	r2,0(r21)
    8c7c:	b0800215 	stw	r2,8(r22)
    8c80:	a8800117 	ldw	r2,4(r21)
    8c84:	b0800315 	stw	r2,12(r22)
    8c88:	008006c4 	movi	r2,27
    8c8c:	11803f36 	bltu	r2,r6,8d8c <_realloc_r+0x518>
    8c90:	b0800404 	addi	r2,r22,16
    8c94:	ad400204 	addi	r21,r21,8
    8c98:	a8c00017 	ldw	r3,0(r21)
    8c9c:	10c00015 	stw	r3,0(r2)
    8ca0:	a8c00117 	ldw	r3,4(r21)
    8ca4:	10c00115 	stw	r3,4(r2)
    8ca8:	a8c00217 	ldw	r3,8(r21)
    8cac:	10c00215 	stw	r3,8(r2)
    8cb0:	b447883a 	add	r3,r22,r17
    8cb4:	bc45c83a 	sub	r2,r23,r17
    8cb8:	e0c00215 	stw	r3,8(fp)
    8cbc:	10800054 	ori	r2,r2,1
    8cc0:	18800115 	stw	r2,4(r3)
    8cc4:	b0800117 	ldw	r2,4(r22)
    8cc8:	a009883a 	mov	r4,r20
    8ccc:	1080004c 	andi	r2,r2,1
    8cd0:	1462b03a 	or	r17,r2,r17
    8cd4:	b4400115 	stw	r17,4(r22)
    8cd8:	000ee080 	call	ee08 <__malloc_unlock>
    8cdc:	9005883a 	mov	r2,r18
    8ce0:	003f4006 	br	89e4 <__alt_data_end+0xf80089e4>
    8ce4:	a8c00217 	ldw	r3,8(r21)
    8ce8:	90c00215 	stw	r3,8(r18)
    8cec:	a8c00317 	ldw	r3,12(r21)
    8cf0:	90c00315 	stw	r3,12(r18)
    8cf4:	30801126 	beq	r6,r2,8d3c <_realloc_r+0x4c8>
    8cf8:	90800404 	addi	r2,r18,16
    8cfc:	a8c00404 	addi	r3,r21,16
    8d00:	003f1906 	br	8968 <__alt_data_end+0xf8008968>
    8d04:	90ffff17 	ldw	r3,-4(r18)
    8d08:	00bfff04 	movi	r2,-4
    8d0c:	a825883a 	mov	r18,r21
    8d10:	1884703a 	and	r2,r3,r2
    8d14:	80a1883a 	add	r16,r16,r2
    8d18:	003f2406 	br	89ac <__alt_data_end+0xf80089ac>
    8d1c:	a8800217 	ldw	r2,8(r21)
    8d20:	b0800415 	stw	r2,16(r22)
    8d24:	a8800317 	ldw	r2,12(r21)
    8d28:	b0800515 	stw	r2,20(r22)
    8d2c:	31000a26 	beq	r6,r4,8d58 <_realloc_r+0x4e4>
    8d30:	b0800604 	addi	r2,r22,24
    8d34:	ad400404 	addi	r21,r21,16
    8d38:	003fa906 	br	8be0 <__alt_data_end+0xf8008be0>
    8d3c:	a9000417 	ldw	r4,16(r21)
    8d40:	90800604 	addi	r2,r18,24
    8d44:	a8c00604 	addi	r3,r21,24
    8d48:	91000415 	stw	r4,16(r18)
    8d4c:	a9000517 	ldw	r4,20(r21)
    8d50:	91000515 	stw	r4,20(r18)
    8d54:	003f0406 	br	8968 <__alt_data_end+0xf8008968>
    8d58:	a8c00417 	ldw	r3,16(r21)
    8d5c:	ad400604 	addi	r21,r21,24
    8d60:	b0800804 	addi	r2,r22,32
    8d64:	b0c00615 	stw	r3,24(r22)
    8d68:	a8ffff17 	ldw	r3,-4(r21)
    8d6c:	b0c00715 	stw	r3,28(r22)
    8d70:	003f9b06 	br	8be0 <__alt_data_end+0xf8008be0>
    8d74:	9005883a 	mov	r2,r18
    8d78:	003fc706 	br	8c98 <__alt_data_end+0xf8008c98>
    8d7c:	a80b883a 	mov	r5,r21
    8d80:	9009883a 	mov	r4,r18
    8d84:	00075380 	call	7538 <memmove>
    8d88:	003fc906 	br	8cb0 <__alt_data_end+0xf8008cb0>
    8d8c:	a8800217 	ldw	r2,8(r21)
    8d90:	b0800415 	stw	r2,16(r22)
    8d94:	a8800317 	ldw	r2,12(r21)
    8d98:	b0800515 	stw	r2,20(r22)
    8d9c:	31000726 	beq	r6,r4,8dbc <_realloc_r+0x548>
    8da0:	b0800604 	addi	r2,r22,24
    8da4:	ad400404 	addi	r21,r21,16
    8da8:	003fbb06 	br	8c98 <__alt_data_end+0xf8008c98>
    8dac:	a009883a 	mov	r4,r20
    8db0:	000ee080 	call	ee08 <__malloc_unlock>
    8db4:	0005883a 	mov	r2,zero
    8db8:	003f0a06 	br	89e4 <__alt_data_end+0xf80089e4>
    8dbc:	a8c00417 	ldw	r3,16(r21)
    8dc0:	ad400604 	addi	r21,r21,24
    8dc4:	b0800804 	addi	r2,r22,32
    8dc8:	b0c00615 	stw	r3,24(r22)
    8dcc:	a8ffff17 	ldw	r3,-4(r21)
    8dd0:	b0c00715 	stw	r3,28(r22)
    8dd4:	003fb006 	br	8c98 <__alt_data_end+0xf8008c98>

00008dd8 <__fpclassifyd>:
    8dd8:	00a00034 	movhi	r2,32768
    8ddc:	10bfffc4 	addi	r2,r2,-1
    8de0:	2884703a 	and	r2,r5,r2
    8de4:	10000726 	beq	r2,zero,8e04 <__fpclassifyd+0x2c>
    8de8:	00fffc34 	movhi	r3,65520
    8dec:	019ff834 	movhi	r6,32736
    8df0:	28c7883a 	add	r3,r5,r3
    8df4:	31bfffc4 	addi	r6,r6,-1
    8df8:	30c00536 	bltu	r6,r3,8e10 <__fpclassifyd+0x38>
    8dfc:	00800104 	movi	r2,4
    8e00:	f800283a 	ret
    8e04:	2000021e 	bne	r4,zero,8e10 <__fpclassifyd+0x38>
    8e08:	00800084 	movi	r2,2
    8e0c:	f800283a 	ret
    8e10:	00dffc34 	movhi	r3,32752
    8e14:	019ff834 	movhi	r6,32736
    8e18:	28cb883a 	add	r5,r5,r3
    8e1c:	31bfffc4 	addi	r6,r6,-1
    8e20:	317ff62e 	bgeu	r6,r5,8dfc <__alt_data_end+0xf8008dfc>
    8e24:	01400434 	movhi	r5,16
    8e28:	297fffc4 	addi	r5,r5,-1
    8e2c:	28800236 	bltu	r5,r2,8e38 <__fpclassifyd+0x60>
    8e30:	008000c4 	movi	r2,3
    8e34:	f800283a 	ret
    8e38:	10c00226 	beq	r2,r3,8e44 <__fpclassifyd+0x6c>
    8e3c:	0005883a 	mov	r2,zero
    8e40:	f800283a 	ret
    8e44:	2005003a 	cmpeq	r2,r4,zero
    8e48:	f800283a 	ret

00008e4c <__sread>:
    8e4c:	defffe04 	addi	sp,sp,-8
    8e50:	dc000015 	stw	r16,0(sp)
    8e54:	2821883a 	mov	r16,r5
    8e58:	2940038f 	ldh	r5,14(r5)
    8e5c:	dfc00115 	stw	ra,4(sp)
    8e60:	000ada00 	call	ada0 <_read_r>
    8e64:	10000716 	blt	r2,zero,8e84 <__sread+0x38>
    8e68:	80c01417 	ldw	r3,80(r16)
    8e6c:	1887883a 	add	r3,r3,r2
    8e70:	80c01415 	stw	r3,80(r16)
    8e74:	dfc00117 	ldw	ra,4(sp)
    8e78:	dc000017 	ldw	r16,0(sp)
    8e7c:	dec00204 	addi	sp,sp,8
    8e80:	f800283a 	ret
    8e84:	80c0030b 	ldhu	r3,12(r16)
    8e88:	18fbffcc 	andi	r3,r3,61439
    8e8c:	80c0030d 	sth	r3,12(r16)
    8e90:	dfc00117 	ldw	ra,4(sp)
    8e94:	dc000017 	ldw	r16,0(sp)
    8e98:	dec00204 	addi	sp,sp,8
    8e9c:	f800283a 	ret

00008ea0 <__seofread>:
    8ea0:	0005883a 	mov	r2,zero
    8ea4:	f800283a 	ret

00008ea8 <__swrite>:
    8ea8:	2880030b 	ldhu	r2,12(r5)
    8eac:	defffb04 	addi	sp,sp,-20
    8eb0:	dcc00315 	stw	r19,12(sp)
    8eb4:	dc800215 	stw	r18,8(sp)
    8eb8:	dc400115 	stw	r17,4(sp)
    8ebc:	dc000015 	stw	r16,0(sp)
    8ec0:	dfc00415 	stw	ra,16(sp)
    8ec4:	10c0400c 	andi	r3,r2,256
    8ec8:	2821883a 	mov	r16,r5
    8ecc:	2023883a 	mov	r17,r4
    8ed0:	3025883a 	mov	r18,r6
    8ed4:	3827883a 	mov	r19,r7
    8ed8:	18000526 	beq	r3,zero,8ef0 <__swrite+0x48>
    8edc:	2940038f 	ldh	r5,14(r5)
    8ee0:	01c00084 	movi	r7,2
    8ee4:	000d883a 	mov	r6,zero
    8ee8:	000ad400 	call	ad40 <_lseek_r>
    8eec:	8080030b 	ldhu	r2,12(r16)
    8ef0:	8140038f 	ldh	r5,14(r16)
    8ef4:	10bbffcc 	andi	r2,r2,61439
    8ef8:	980f883a 	mov	r7,r19
    8efc:	900d883a 	mov	r6,r18
    8f00:	8809883a 	mov	r4,r17
    8f04:	8080030d 	sth	r2,12(r16)
    8f08:	dfc00417 	ldw	ra,16(sp)
    8f0c:	dcc00317 	ldw	r19,12(sp)
    8f10:	dc800217 	ldw	r18,8(sp)
    8f14:	dc400117 	ldw	r17,4(sp)
    8f18:	dc000017 	ldw	r16,0(sp)
    8f1c:	dec00504 	addi	sp,sp,20
    8f20:	000a7f41 	jmpi	a7f4 <_write_r>

00008f24 <__sseek>:
    8f24:	defffe04 	addi	sp,sp,-8
    8f28:	dc000015 	stw	r16,0(sp)
    8f2c:	2821883a 	mov	r16,r5
    8f30:	2940038f 	ldh	r5,14(r5)
    8f34:	dfc00115 	stw	ra,4(sp)
    8f38:	000ad400 	call	ad40 <_lseek_r>
    8f3c:	00ffffc4 	movi	r3,-1
    8f40:	10c00826 	beq	r2,r3,8f64 <__sseek+0x40>
    8f44:	80c0030b 	ldhu	r3,12(r16)
    8f48:	80801415 	stw	r2,80(r16)
    8f4c:	18c40014 	ori	r3,r3,4096
    8f50:	80c0030d 	sth	r3,12(r16)
    8f54:	dfc00117 	ldw	ra,4(sp)
    8f58:	dc000017 	ldw	r16,0(sp)
    8f5c:	dec00204 	addi	sp,sp,8
    8f60:	f800283a 	ret
    8f64:	80c0030b 	ldhu	r3,12(r16)
    8f68:	18fbffcc 	andi	r3,r3,61439
    8f6c:	80c0030d 	sth	r3,12(r16)
    8f70:	dfc00117 	ldw	ra,4(sp)
    8f74:	dc000017 	ldw	r16,0(sp)
    8f78:	dec00204 	addi	sp,sp,8
    8f7c:	f800283a 	ret

00008f80 <__sclose>:
    8f80:	2940038f 	ldh	r5,14(r5)
    8f84:	000a8541 	jmpi	a854 <_close_r>

00008f88 <strcmp>:
    8f88:	2144b03a 	or	r2,r4,r5
    8f8c:	108000cc 	andi	r2,r2,3
    8f90:	1000171e 	bne	r2,zero,8ff0 <strcmp+0x68>
    8f94:	20800017 	ldw	r2,0(r4)
    8f98:	28c00017 	ldw	r3,0(r5)
    8f9c:	10c0141e 	bne	r2,r3,8ff0 <strcmp+0x68>
    8fa0:	027fbff4 	movhi	r9,65279
    8fa4:	4a7fbfc4 	addi	r9,r9,-257
    8fa8:	0086303a 	nor	r3,zero,r2
    8fac:	02202074 	movhi	r8,32897
    8fb0:	1245883a 	add	r2,r2,r9
    8fb4:	42202004 	addi	r8,r8,-32640
    8fb8:	10c4703a 	and	r2,r2,r3
    8fbc:	1204703a 	and	r2,r2,r8
    8fc0:	10000226 	beq	r2,zero,8fcc <strcmp+0x44>
    8fc4:	00002306 	br	9054 <strcmp+0xcc>
    8fc8:	1000221e 	bne	r2,zero,9054 <strcmp+0xcc>
    8fcc:	21000104 	addi	r4,r4,4
    8fd0:	20c00017 	ldw	r3,0(r4)
    8fd4:	29400104 	addi	r5,r5,4
    8fd8:	29800017 	ldw	r6,0(r5)
    8fdc:	1a4f883a 	add	r7,r3,r9
    8fe0:	00c4303a 	nor	r2,zero,r3
    8fe4:	3884703a 	and	r2,r7,r2
    8fe8:	1204703a 	and	r2,r2,r8
    8fec:	19bff626 	beq	r3,r6,8fc8 <__alt_data_end+0xf8008fc8>
    8ff0:	20800003 	ldbu	r2,0(r4)
    8ff4:	10c03fcc 	andi	r3,r2,255
    8ff8:	18c0201c 	xori	r3,r3,128
    8ffc:	18ffe004 	addi	r3,r3,-128
    9000:	18000c26 	beq	r3,zero,9034 <strcmp+0xac>
    9004:	29800007 	ldb	r6,0(r5)
    9008:	19800326 	beq	r3,r6,9018 <strcmp+0x90>
    900c:	00001306 	br	905c <strcmp+0xd4>
    9010:	29800007 	ldb	r6,0(r5)
    9014:	11800b1e 	bne	r2,r6,9044 <strcmp+0xbc>
    9018:	21000044 	addi	r4,r4,1
    901c:	20c00003 	ldbu	r3,0(r4)
    9020:	29400044 	addi	r5,r5,1
    9024:	18803fcc 	andi	r2,r3,255
    9028:	1080201c 	xori	r2,r2,128
    902c:	10bfe004 	addi	r2,r2,-128
    9030:	103ff71e 	bne	r2,zero,9010 <__alt_data_end+0xf8009010>
    9034:	0007883a 	mov	r3,zero
    9038:	28800003 	ldbu	r2,0(r5)
    903c:	1885c83a 	sub	r2,r3,r2
    9040:	f800283a 	ret
    9044:	28800003 	ldbu	r2,0(r5)
    9048:	18c03fcc 	andi	r3,r3,255
    904c:	1885c83a 	sub	r2,r3,r2
    9050:	f800283a 	ret
    9054:	0005883a 	mov	r2,zero
    9058:	f800283a 	ret
    905c:	10c03fcc 	andi	r3,r2,255
    9060:	003ff506 	br	9038 <__alt_data_end+0xf8009038>

00009064 <strlen>:
    9064:	208000cc 	andi	r2,r4,3
    9068:	10002026 	beq	r2,zero,90ec <strlen+0x88>
    906c:	20800007 	ldb	r2,0(r4)
    9070:	10002026 	beq	r2,zero,90f4 <strlen+0x90>
    9074:	2005883a 	mov	r2,r4
    9078:	00000206 	br	9084 <strlen+0x20>
    907c:	10c00007 	ldb	r3,0(r2)
    9080:	18001826 	beq	r3,zero,90e4 <strlen+0x80>
    9084:	10800044 	addi	r2,r2,1
    9088:	10c000cc 	andi	r3,r2,3
    908c:	183ffb1e 	bne	r3,zero,907c <__alt_data_end+0xf800907c>
    9090:	10c00017 	ldw	r3,0(r2)
    9094:	01ffbff4 	movhi	r7,65279
    9098:	39ffbfc4 	addi	r7,r7,-257
    909c:	00ca303a 	nor	r5,zero,r3
    90a0:	01a02074 	movhi	r6,32897
    90a4:	19c7883a 	add	r3,r3,r7
    90a8:	31a02004 	addi	r6,r6,-32640
    90ac:	1946703a 	and	r3,r3,r5
    90b0:	1986703a 	and	r3,r3,r6
    90b4:	1800091e 	bne	r3,zero,90dc <strlen+0x78>
    90b8:	10800104 	addi	r2,r2,4
    90bc:	10c00017 	ldw	r3,0(r2)
    90c0:	19cb883a 	add	r5,r3,r7
    90c4:	00c6303a 	nor	r3,zero,r3
    90c8:	28c6703a 	and	r3,r5,r3
    90cc:	1986703a 	and	r3,r3,r6
    90d0:	183ff926 	beq	r3,zero,90b8 <__alt_data_end+0xf80090b8>
    90d4:	00000106 	br	90dc <strlen+0x78>
    90d8:	10800044 	addi	r2,r2,1
    90dc:	10c00007 	ldb	r3,0(r2)
    90e0:	183ffd1e 	bne	r3,zero,90d8 <__alt_data_end+0xf80090d8>
    90e4:	1105c83a 	sub	r2,r2,r4
    90e8:	f800283a 	ret
    90ec:	2005883a 	mov	r2,r4
    90f0:	003fe706 	br	9090 <__alt_data_end+0xf8009090>
    90f4:	0005883a 	mov	r2,zero
    90f8:	f800283a 	ret

000090fc <__sprint_r.part.0>:
    90fc:	28801917 	ldw	r2,100(r5)
    9100:	defff604 	addi	sp,sp,-40
    9104:	dd400515 	stw	r21,20(sp)
    9108:	dfc00915 	stw	ra,36(sp)
    910c:	df000815 	stw	fp,32(sp)
    9110:	ddc00715 	stw	r23,28(sp)
    9114:	dd800615 	stw	r22,24(sp)
    9118:	dd000415 	stw	r20,16(sp)
    911c:	dcc00315 	stw	r19,12(sp)
    9120:	dc800215 	stw	r18,8(sp)
    9124:	dc400115 	stw	r17,4(sp)
    9128:	dc000015 	stw	r16,0(sp)
    912c:	1088000c 	andi	r2,r2,8192
    9130:	302b883a 	mov	r21,r6
    9134:	10002e26 	beq	r2,zero,91f0 <__sprint_r.part.0+0xf4>
    9138:	30800217 	ldw	r2,8(r6)
    913c:	35800017 	ldw	r22,0(r6)
    9140:	10002926 	beq	r2,zero,91e8 <__sprint_r.part.0+0xec>
    9144:	2827883a 	mov	r19,r5
    9148:	2029883a 	mov	r20,r4
    914c:	b5c00104 	addi	r23,r22,4
    9150:	04bfffc4 	movi	r18,-1
    9154:	bc400017 	ldw	r17,0(r23)
    9158:	b4000017 	ldw	r16,0(r22)
    915c:	0039883a 	mov	fp,zero
    9160:	8822d0ba 	srli	r17,r17,2
    9164:	8800031e 	bne	r17,zero,9174 <__sprint_r.part.0+0x78>
    9168:	00001806 	br	91cc <__sprint_r.part.0+0xd0>
    916c:	84000104 	addi	r16,r16,4
    9170:	8f001526 	beq	r17,fp,91c8 <__sprint_r.part.0+0xcc>
    9174:	81400017 	ldw	r5,0(r16)
    9178:	980d883a 	mov	r6,r19
    917c:	a009883a 	mov	r4,r20
    9180:	000abec0 	call	abec <_fputwc_r>
    9184:	e7000044 	addi	fp,fp,1
    9188:	14bff81e 	bne	r2,r18,916c <__alt_data_end+0xf800916c>
    918c:	9005883a 	mov	r2,r18
    9190:	a8000215 	stw	zero,8(r21)
    9194:	a8000115 	stw	zero,4(r21)
    9198:	dfc00917 	ldw	ra,36(sp)
    919c:	df000817 	ldw	fp,32(sp)
    91a0:	ddc00717 	ldw	r23,28(sp)
    91a4:	dd800617 	ldw	r22,24(sp)
    91a8:	dd400517 	ldw	r21,20(sp)
    91ac:	dd000417 	ldw	r20,16(sp)
    91b0:	dcc00317 	ldw	r19,12(sp)
    91b4:	dc800217 	ldw	r18,8(sp)
    91b8:	dc400117 	ldw	r17,4(sp)
    91bc:	dc000017 	ldw	r16,0(sp)
    91c0:	dec00a04 	addi	sp,sp,40
    91c4:	f800283a 	ret
    91c8:	a8800217 	ldw	r2,8(r21)
    91cc:	8c63883a 	add	r17,r17,r17
    91d0:	8c63883a 	add	r17,r17,r17
    91d4:	1445c83a 	sub	r2,r2,r17
    91d8:	a8800215 	stw	r2,8(r21)
    91dc:	b5800204 	addi	r22,r22,8
    91e0:	bdc00204 	addi	r23,r23,8
    91e4:	103fdb1e 	bne	r2,zero,9154 <__alt_data_end+0xf8009154>
    91e8:	0005883a 	mov	r2,zero
    91ec:	003fe806 	br	9190 <__alt_data_end+0xf8009190>
    91f0:	0006a240 	call	6a24 <__sfvwrite_r>
    91f4:	003fe606 	br	9190 <__alt_data_end+0xf8009190>

000091f8 <__sprint_r>:
    91f8:	30c00217 	ldw	r3,8(r6)
    91fc:	18000126 	beq	r3,zero,9204 <__sprint_r+0xc>
    9200:	00090fc1 	jmpi	90fc <__sprint_r.part.0>
    9204:	30000115 	stw	zero,4(r6)
    9208:	0005883a 	mov	r2,zero
    920c:	f800283a 	ret

00009210 <___vfiprintf_internal_r>:
    9210:	deffca04 	addi	sp,sp,-216
    9214:	dd403115 	stw	r21,196(sp)
    9218:	dfc03515 	stw	ra,212(sp)
    921c:	df003415 	stw	fp,208(sp)
    9220:	ddc03315 	stw	r23,204(sp)
    9224:	dd803215 	stw	r22,200(sp)
    9228:	dd003015 	stw	r20,192(sp)
    922c:	dcc02f15 	stw	r19,188(sp)
    9230:	dc802e15 	stw	r18,184(sp)
    9234:	dc402d15 	stw	r17,180(sp)
    9238:	dc002c15 	stw	r16,176(sp)
    923c:	d9002115 	stw	r4,132(sp)
    9240:	d9402015 	stw	r5,128(sp)
    9244:	d9c02215 	stw	r7,136(sp)
    9248:	302b883a 	mov	r21,r6
    924c:	20000226 	beq	r4,zero,9258 <___vfiprintf_internal_r+0x48>
    9250:	20800e17 	ldw	r2,56(r4)
    9254:	1000cf26 	beq	r2,zero,9594 <___vfiprintf_internal_r+0x384>
    9258:	d8c02017 	ldw	r3,128(sp)
    925c:	1880030b 	ldhu	r2,12(r3)
    9260:	10c8000c 	andi	r3,r2,8192
    9264:	1800071e 	bne	r3,zero,9284 <___vfiprintf_internal_r+0x74>
    9268:	d9402017 	ldw	r5,128(sp)
    926c:	00f7ffc4 	movi	r3,-8193
    9270:	10880014 	ori	r2,r2,8192
    9274:	29001917 	ldw	r4,100(r5)
    9278:	2880030d 	sth	r2,12(r5)
    927c:	20c6703a 	and	r3,r4,r3
    9280:	28c01915 	stw	r3,100(r5)
    9284:	10c0020c 	andi	r3,r2,8
    9288:	1800a526 	beq	r3,zero,9520 <___vfiprintf_internal_r+0x310>
    928c:	d9002017 	ldw	r4,128(sp)
    9290:	20c00417 	ldw	r3,16(r4)
    9294:	1800a226 	beq	r3,zero,9520 <___vfiprintf_internal_r+0x310>
    9298:	1080068c 	andi	r2,r2,26
    929c:	00c00284 	movi	r3,10
    92a0:	10c0a826 	beq	r2,r3,9544 <___vfiprintf_internal_r+0x334>
    92a4:	d9001a04 	addi	r4,sp,104
    92a8:	d94019c4 	addi	r5,sp,103
    92ac:	04800074 	movhi	r18,1
    92b0:	2145c83a 	sub	r2,r4,r5
    92b4:	94889604 	addi	r18,r18,8792
    92b8:	d9001e15 	stw	r4,120(sp)
    92bc:	d9401f15 	stw	r5,124(sp)
    92c0:	dec01a15 	stw	sp,104(sp)
    92c4:	d8001c15 	stw	zero,112(sp)
    92c8:	d8001b15 	stw	zero,108(sp)
    92cc:	d811883a 	mov	r8,sp
    92d0:	d8002615 	stw	zero,152(sp)
    92d4:	d8002415 	stw	zero,144(sp)
    92d8:	d8802815 	stw	r2,160(sp)
    92dc:	a82d883a 	mov	r22,r21
    92e0:	b0800007 	ldb	r2,0(r22)
    92e4:	10040d26 	beq	r2,zero,a31c <___vfiprintf_internal_r+0x110c>
    92e8:	00c00944 	movi	r3,37
    92ec:	b029883a 	mov	r20,r22
    92f0:	10c0021e 	bne	r2,r3,92fc <___vfiprintf_internal_r+0xec>
    92f4:	00001606 	br	9350 <___vfiprintf_internal_r+0x140>
    92f8:	10c00326 	beq	r2,r3,9308 <___vfiprintf_internal_r+0xf8>
    92fc:	a5000044 	addi	r20,r20,1
    9300:	a0800007 	ldb	r2,0(r20)
    9304:	103ffc1e 	bne	r2,zero,92f8 <__alt_data_end+0xf80092f8>
    9308:	a5a1c83a 	sub	r16,r20,r22
    930c:	80001026 	beq	r16,zero,9350 <___vfiprintf_internal_r+0x140>
    9310:	d8c01c17 	ldw	r3,112(sp)
    9314:	d8801b17 	ldw	r2,108(sp)
    9318:	45800015 	stw	r22,0(r8)
    931c:	80c7883a 	add	r3,r16,r3
    9320:	10800044 	addi	r2,r2,1
    9324:	44000115 	stw	r16,4(r8)
    9328:	d8c01c15 	stw	r3,112(sp)
    932c:	d8801b15 	stw	r2,108(sp)
    9330:	010001c4 	movi	r4,7
    9334:	2080750e 	bge	r4,r2,950c <___vfiprintf_internal_r+0x2fc>
    9338:	1803951e 	bne	r3,zero,a190 <___vfiprintf_internal_r+0xf80>
    933c:	d8c02417 	ldw	r3,144(sp)
    9340:	d8001b15 	stw	zero,108(sp)
    9344:	d811883a 	mov	r8,sp
    9348:	1c07883a 	add	r3,r3,r16
    934c:	d8c02415 	stw	r3,144(sp)
    9350:	a0800007 	ldb	r2,0(r20)
    9354:	1002e026 	beq	r2,zero,9ed8 <___vfiprintf_internal_r+0xcc8>
    9358:	a5800044 	addi	r22,r20,1
    935c:	a0c00047 	ldb	r3,1(r20)
    9360:	d8001d85 	stb	zero,118(sp)
    9364:	0027883a 	mov	r19,zero
    9368:	d8002305 	stb	zero,140(sp)
    936c:	043fffc4 	movi	r16,-1
    9370:	d8002515 	stw	zero,148(sp)
    9374:	0023883a 	mov	r17,zero
    9378:	05001604 	movi	r20,88
    937c:	05400244 	movi	r21,9
    9380:	402f883a 	mov	r23,r8
    9384:	b5800044 	addi	r22,r22,1
    9388:	18bff804 	addi	r2,r3,-32
    938c:	a0827736 	bltu	r20,r2,9d6c <___vfiprintf_internal_r+0xb5c>
    9390:	100490ba 	slli	r2,r2,2
    9394:	01000074 	movhi	r4,1
    9398:	2124ea04 	addi	r4,r4,-27736
    939c:	1105883a 	add	r2,r2,r4
    93a0:	10800017 	ldw	r2,0(r2)
    93a4:	1000683a 	jmp	r2
    93a8:	00009a6c 	andhi	zero,zero,617
    93ac:	00009d6c 	andhi	zero,zero,629
    93b0:	00009d6c 	andhi	zero,zero,629
    93b4:	00009a88 	cmpgei	zero,zero,618
    93b8:	00009d6c 	andhi	zero,zero,629
    93bc:	00009d6c 	andhi	zero,zero,629
    93c0:	00009d6c 	andhi	zero,zero,629
    93c4:	00009d6c 	andhi	zero,zero,629
    93c8:	00009d6c 	andhi	zero,zero,629
    93cc:	00009d6c 	andhi	zero,zero,629
    93d0:	00009c90 	cmplti	zero,zero,626
    93d4:	00009cb4 	movhi	zero,626
    93d8:	00009d6c 	andhi	zero,zero,629
    93dc:	000095ac 	andhi	zero,zero,598
    93e0:	00009cc8 	cmpgei	zero,zero,627
    93e4:	00009d6c 	andhi	zero,zero,629
    93e8:	00009a94 	movui	zero,618
    93ec:	00009aa0 	cmpeqi	zero,zero,618
    93f0:	00009aa0 	cmpeqi	zero,zero,618
    93f4:	00009aa0 	cmpeqi	zero,zero,618
    93f8:	00009aa0 	cmpeqi	zero,zero,618
    93fc:	00009aa0 	cmpeqi	zero,zero,618
    9400:	00009aa0 	cmpeqi	zero,zero,618
    9404:	00009aa0 	cmpeqi	zero,zero,618
    9408:	00009aa0 	cmpeqi	zero,zero,618
    940c:	00009aa0 	cmpeqi	zero,zero,618
    9410:	00009d6c 	andhi	zero,zero,629
    9414:	00009d6c 	andhi	zero,zero,629
    9418:	00009d6c 	andhi	zero,zero,629
    941c:	00009d6c 	andhi	zero,zero,629
    9420:	00009d6c 	andhi	zero,zero,629
    9424:	00009d6c 	andhi	zero,zero,629
    9428:	00009d6c 	andhi	zero,zero,629
    942c:	00009d6c 	andhi	zero,zero,629
    9430:	00009d6c 	andhi	zero,zero,629
    9434:	00009d6c 	andhi	zero,zero,629
    9438:	00009ae0 	cmpeqi	zero,zero,619
    943c:	00009d6c 	andhi	zero,zero,629
    9440:	00009d6c 	andhi	zero,zero,629
    9444:	00009d6c 	andhi	zero,zero,629
    9448:	00009d6c 	andhi	zero,zero,629
    944c:	00009d6c 	andhi	zero,zero,629
    9450:	00009d6c 	andhi	zero,zero,629
    9454:	00009d6c 	andhi	zero,zero,629
    9458:	00009d6c 	andhi	zero,zero,629
    945c:	00009d6c 	andhi	zero,zero,629
    9460:	00009d6c 	andhi	zero,zero,629
    9464:	00009b1c 	xori	zero,zero,620
    9468:	00009d6c 	andhi	zero,zero,629
    946c:	00009d6c 	andhi	zero,zero,629
    9470:	00009d6c 	andhi	zero,zero,629
    9474:	00009d6c 	andhi	zero,zero,629
    9478:	00009d6c 	andhi	zero,zero,629
    947c:	00009b78 	rdprs	zero,zero,621
    9480:	00009d6c 	andhi	zero,zero,629
    9484:	00009d6c 	andhi	zero,zero,629
    9488:	00009bec 	andhi	zero,zero,623
    948c:	00009d6c 	andhi	zero,zero,629
    9490:	00009d6c 	andhi	zero,zero,629
    9494:	00009d6c 	andhi	zero,zero,629
    9498:	00009d6c 	andhi	zero,zero,629
    949c:	00009d6c 	andhi	zero,zero,629
    94a0:	00009d6c 	andhi	zero,zero,629
    94a4:	00009d6c 	andhi	zero,zero,629
    94a8:	00009d6c 	andhi	zero,zero,629
    94ac:	00009d6c 	andhi	zero,zero,629
    94b0:	00009d6c 	andhi	zero,zero,629
    94b4:	00009994 	movui	zero,614
    94b8:	000099c4 	movi	zero,615
    94bc:	00009d6c 	andhi	zero,zero,629
    94c0:	00009d6c 	andhi	zero,zero,629
    94c4:	00009d6c 	andhi	zero,zero,629
    94c8:	00009d14 	movui	zero,628
    94cc:	000099c4 	movi	zero,615
    94d0:	00009d6c 	andhi	zero,zero,629
    94d4:	00009d6c 	andhi	zero,zero,629
    94d8:	0000986c 	andhi	zero,zero,609
    94dc:	00009d6c 	andhi	zero,zero,629
    94e0:	00009880 	call	988 <button_interrupt+0x31c>
    94e4:	000098b8 	rdprs	zero,zero,610
    94e8:	000095b8 	rdprs	zero,zero,598
    94ec:	00009860 	cmpeqi	zero,zero,609
    94f0:	00009d6c 	andhi	zero,zero,629
    94f4:	00009c2c 	andhi	zero,zero,624
    94f8:	00009d6c 	andhi	zero,zero,629
    94fc:	00009c78 	rdprs	zero,zero,625
    9500:	00009d6c 	andhi	zero,zero,629
    9504:	00009d6c 	andhi	zero,zero,629
    9508:	0000993c 	xorhi	zero,zero,612
    950c:	42000204 	addi	r8,r8,8
    9510:	d8c02417 	ldw	r3,144(sp)
    9514:	1c07883a 	add	r3,r3,r16
    9518:	d8c02415 	stw	r3,144(sp)
    951c:	003f8c06 	br	9350 <__alt_data_end+0xf8009350>
    9520:	d9402017 	ldw	r5,128(sp)
    9524:	d9002117 	ldw	r4,132(sp)
    9528:	00045940 	call	4594 <__swsetup_r>
    952c:	1003c11e 	bne	r2,zero,a434 <___vfiprintf_internal_r+0x1224>
    9530:	d9402017 	ldw	r5,128(sp)
    9534:	00c00284 	movi	r3,10
    9538:	2880030b 	ldhu	r2,12(r5)
    953c:	1080068c 	andi	r2,r2,26
    9540:	10ff581e 	bne	r2,r3,92a4 <__alt_data_end+0xf80092a4>
    9544:	d8c02017 	ldw	r3,128(sp)
    9548:	1880038f 	ldh	r2,14(r3)
    954c:	103f5516 	blt	r2,zero,92a4 <__alt_data_end+0xf80092a4>
    9550:	d9c02217 	ldw	r7,136(sp)
    9554:	d9002117 	ldw	r4,132(sp)
    9558:	a80d883a 	mov	r6,r21
    955c:	180b883a 	mov	r5,r3
    9560:	000a7380 	call	a738 <__sbprintf>
    9564:	dfc03517 	ldw	ra,212(sp)
    9568:	df003417 	ldw	fp,208(sp)
    956c:	ddc03317 	ldw	r23,204(sp)
    9570:	dd803217 	ldw	r22,200(sp)
    9574:	dd403117 	ldw	r21,196(sp)
    9578:	dd003017 	ldw	r20,192(sp)
    957c:	dcc02f17 	ldw	r19,188(sp)
    9580:	dc802e17 	ldw	r18,184(sp)
    9584:	dc402d17 	ldw	r17,180(sp)
    9588:	dc002c17 	ldw	r16,176(sp)
    958c:	dec03604 	addi	sp,sp,216
    9590:	f800283a 	ret
    9594:	00065a00 	call	65a0 <__sinit>
    9598:	003f2f06 	br	9258 <__alt_data_end+0xf8009258>
    959c:	d8c02517 	ldw	r3,148(sp)
    95a0:	d8802215 	stw	r2,136(sp)
    95a4:	00c7c83a 	sub	r3,zero,r3
    95a8:	d8c02515 	stw	r3,148(sp)
    95ac:	8c400114 	ori	r17,r17,4
    95b0:	b0c00007 	ldb	r3,0(r22)
    95b4:	003f7306 	br	9384 <__alt_data_end+0xf8009384>
    95b8:	00800c04 	movi	r2,48
    95bc:	d9402217 	ldw	r5,136(sp)
    95c0:	d8801d05 	stb	r2,116(sp)
    95c4:	00801e04 	movi	r2,120
    95c8:	d8801d45 	stb	r2,117(sp)
    95cc:	d8001d85 	stb	zero,118(sp)
    95d0:	b811883a 	mov	r8,r23
    95d4:	28c00104 	addi	r3,r5,4
    95d8:	2cc00017 	ldw	r19,0(r5)
    95dc:	0029883a 	mov	r20,zero
    95e0:	88800094 	ori	r2,r17,2
    95e4:	80032516 	blt	r16,zero,a27c <___vfiprintf_internal_r+0x106c>
    95e8:	00bfdfc4 	movi	r2,-129
    95ec:	88a2703a 	and	r17,r17,r2
    95f0:	d8c02215 	stw	r3,136(sp)
    95f4:	8c400094 	ori	r17,r17,2
    95f8:	98032a1e 	bne	r19,zero,a2a4 <___vfiprintf_internal_r+0x1094>
    95fc:	00800074 	movhi	r2,1
    9600:	10883604 	addi	r2,r2,8408
    9604:	d8802615 	stw	r2,152(sp)
    9608:	002b883a 	mov	r21,zero
    960c:	8001741e 	bne	r16,zero,9be0 <___vfiprintf_internal_r+0x9d0>
    9610:	0021883a 	mov	r16,zero
    9614:	0029883a 	mov	r20,zero
    9618:	ddc01a04 	addi	r23,sp,104
    961c:	8027883a 	mov	r19,r16
    9620:	8500010e 	bge	r16,r20,9628 <___vfiprintf_internal_r+0x418>
    9624:	a027883a 	mov	r19,r20
    9628:	ad403fcc 	andi	r21,r21,255
    962c:	ad40201c 	xori	r21,r21,128
    9630:	ad7fe004 	addi	r21,r21,-128
    9634:	a8000126 	beq	r21,zero,963c <___vfiprintf_internal_r+0x42c>
    9638:	9cc00044 	addi	r19,r19,1
    963c:	89c0008c 	andi	r7,r17,2
    9640:	38000126 	beq	r7,zero,9648 <___vfiprintf_internal_r+0x438>
    9644:	9cc00084 	addi	r19,r19,2
    9648:	88c0210c 	andi	r3,r17,132
    964c:	1801dd1e 	bne	r3,zero,9dc4 <___vfiprintf_internal_r+0xbb4>
    9650:	d9402517 	ldw	r5,148(sp)
    9654:	2cebc83a 	sub	r21,r5,r19
    9658:	0541da0e 	bge	zero,r21,9dc4 <___vfiprintf_internal_r+0xbb4>
    965c:	07000404 	movi	fp,16
    9660:	d8801c17 	ldw	r2,112(sp)
    9664:	e543be0e 	bge	fp,r21,a560 <___vfiprintf_internal_r+0x1350>
    9668:	01400074 	movhi	r5,1
    966c:	29489a04 	addi	r5,r5,8808
    9670:	dc002715 	stw	r16,156(sp)
    9674:	d9801b17 	ldw	r6,108(sp)
    9678:	a821883a 	mov	r16,r21
    967c:	d9402315 	stw	r5,140(sp)
    9680:	028001c4 	movi	r10,7
    9684:	d9c02915 	stw	r7,164(sp)
    9688:	182b883a 	mov	r21,r3
    968c:	00000506 	br	96a4 <___vfiprintf_internal_r+0x494>
    9690:	31000084 	addi	r4,r6,2
    9694:	42000204 	addi	r8,r8,8
    9698:	180d883a 	mov	r6,r3
    969c:	843ffc04 	addi	r16,r16,-16
    96a0:	e4000f0e 	bge	fp,r16,96e0 <___vfiprintf_internal_r+0x4d0>
    96a4:	01000074 	movhi	r4,1
    96a8:	10800404 	addi	r2,r2,16
    96ac:	30c00044 	addi	r3,r6,1
    96b0:	21089a04 	addi	r4,r4,8808
    96b4:	41000015 	stw	r4,0(r8)
    96b8:	47000115 	stw	fp,4(r8)
    96bc:	d8801c15 	stw	r2,112(sp)
    96c0:	d8c01b15 	stw	r3,108(sp)
    96c4:	50fff20e 	bge	r10,r3,9690 <__alt_data_end+0xf8009690>
    96c8:	1001b21e 	bne	r2,zero,9d94 <___vfiprintf_internal_r+0xb84>
    96cc:	843ffc04 	addi	r16,r16,-16
    96d0:	000d883a 	mov	r6,zero
    96d4:	01000044 	movi	r4,1
    96d8:	d811883a 	mov	r8,sp
    96dc:	e43ff116 	blt	fp,r16,96a4 <__alt_data_end+0xf80096a4>
    96e0:	a807883a 	mov	r3,r21
    96e4:	d9c02917 	ldw	r7,164(sp)
    96e8:	802b883a 	mov	r21,r16
    96ec:	dc002717 	ldw	r16,156(sp)
    96f0:	d9402317 	ldw	r5,140(sp)
    96f4:	a885883a 	add	r2,r21,r2
    96f8:	45400115 	stw	r21,4(r8)
    96fc:	41400015 	stw	r5,0(r8)
    9700:	d8801c15 	stw	r2,112(sp)
    9704:	d9001b15 	stw	r4,108(sp)
    9708:	014001c4 	movi	r5,7
    970c:	29026216 	blt	r5,r4,a098 <___vfiprintf_internal_r+0xe88>
    9710:	d9801d87 	ldb	r6,118(sp)
    9714:	42000204 	addi	r8,r8,8
    9718:	21400044 	addi	r5,r4,1
    971c:	3001ae1e 	bne	r6,zero,9dd8 <___vfiprintf_internal_r+0xbc8>
    9720:	3801bb26 	beq	r7,zero,9e10 <___vfiprintf_internal_r+0xc00>
    9724:	d9001d04 	addi	r4,sp,116
    9728:	10800084 	addi	r2,r2,2
    972c:	41000015 	stw	r4,0(r8)
    9730:	01000084 	movi	r4,2
    9734:	41000115 	stw	r4,4(r8)
    9738:	d8801c15 	stw	r2,112(sp)
    973c:	d9401b15 	stw	r5,108(sp)
    9740:	010001c4 	movi	r4,7
    9744:	2142680e 	bge	r4,r5,a0e8 <___vfiprintf_internal_r+0xed8>
    9748:	1002b11e 	bne	r2,zero,a210 <___vfiprintf_internal_r+0x1000>
    974c:	01802004 	movi	r6,128
    9750:	01400044 	movi	r5,1
    9754:	0009883a 	mov	r4,zero
    9758:	d811883a 	mov	r8,sp
    975c:	1981ae1e 	bne	r3,r6,9e18 <___vfiprintf_internal_r+0xc08>
    9760:	d8c02517 	ldw	r3,148(sp)
    9764:	1cf9c83a 	sub	fp,r3,r19
    9768:	0701ab0e 	bge	zero,fp,9e18 <___vfiprintf_internal_r+0xc08>
    976c:	05400404 	movi	r21,16
    9770:	af03a90e 	bge	r21,fp,a618 <___vfiprintf_internal_r+0x1408>
    9774:	01400074 	movhi	r5,1
    9778:	29489604 	addi	r5,r5,8792
    977c:	d9402315 	stw	r5,140(sp)
    9780:	01c001c4 	movi	r7,7
    9784:	00000506 	br	979c <___vfiprintf_internal_r+0x58c>
    9788:	21800084 	addi	r6,r4,2
    978c:	42000204 	addi	r8,r8,8
    9790:	1809883a 	mov	r4,r3
    9794:	e73ffc04 	addi	fp,fp,-16
    9798:	af000d0e 	bge	r21,fp,97d0 <___vfiprintf_internal_r+0x5c0>
    979c:	10800404 	addi	r2,r2,16
    97a0:	20c00044 	addi	r3,r4,1
    97a4:	44800015 	stw	r18,0(r8)
    97a8:	45400115 	stw	r21,4(r8)
    97ac:	d8801c15 	stw	r2,112(sp)
    97b0:	d8c01b15 	stw	r3,108(sp)
    97b4:	38fff40e 	bge	r7,r3,9788 <__alt_data_end+0xf8009788>
    97b8:	10022b1e 	bne	r2,zero,a068 <___vfiprintf_internal_r+0xe58>
    97bc:	e73ffc04 	addi	fp,fp,-16
    97c0:	01800044 	movi	r6,1
    97c4:	0009883a 	mov	r4,zero
    97c8:	d811883a 	mov	r8,sp
    97cc:	af3ff316 	blt	r21,fp,979c <__alt_data_end+0xf800979c>
    97d0:	d8c02317 	ldw	r3,140(sp)
    97d4:	1705883a 	add	r2,r2,fp
    97d8:	47000115 	stw	fp,4(r8)
    97dc:	40c00015 	stw	r3,0(r8)
    97e0:	d8801c15 	stw	r2,112(sp)
    97e4:	d9801b15 	stw	r6,108(sp)
    97e8:	00c001c4 	movi	r3,7
    97ec:	19829416 	blt	r3,r6,a240 <___vfiprintf_internal_r+0x1030>
    97f0:	8521c83a 	sub	r16,r16,r20
    97f4:	42000204 	addi	r8,r8,8
    97f8:	31400044 	addi	r5,r6,1
    97fc:	3009883a 	mov	r4,r6
    9800:	04018716 	blt	zero,r16,9e20 <___vfiprintf_internal_r+0xc10>
    9804:	a085883a 	add	r2,r20,r2
    9808:	45c00015 	stw	r23,0(r8)
    980c:	45000115 	stw	r20,4(r8)
    9810:	d8801c15 	stw	r2,112(sp)
    9814:	d9401b15 	stw	r5,108(sp)
    9818:	00c001c4 	movi	r3,7
    981c:	1941c20e 	bge	r3,r5,9f28 <___vfiprintf_internal_r+0xd18>
    9820:	1002531e 	bne	r2,zero,a170 <___vfiprintf_internal_r+0xf60>
    9824:	d8001b15 	stw	zero,108(sp)
    9828:	8c40010c 	andi	r17,r17,4
    982c:	88023226 	beq	r17,zero,a0f8 <___vfiprintf_internal_r+0xee8>
    9830:	d9002517 	ldw	r4,148(sp)
    9834:	24e3c83a 	sub	r17,r4,r19
    9838:	04432916 	blt	zero,r17,a4e0 <___vfiprintf_internal_r+0x12d0>
    983c:	d8802517 	ldw	r2,148(sp)
    9840:	14c0010e 	bge	r2,r19,9848 <___vfiprintf_internal_r+0x638>
    9844:	9805883a 	mov	r2,r19
    9848:	d8c02417 	ldw	r3,144(sp)
    984c:	1887883a 	add	r3,r3,r2
    9850:	d8c02415 	stw	r3,144(sp)
    9854:	d8001b15 	stw	zero,108(sp)
    9858:	d811883a 	mov	r8,sp
    985c:	003ea006 	br	92e0 <__alt_data_end+0xf80092e0>
    9860:	8c400814 	ori	r17,r17,32
    9864:	b0c00007 	ldb	r3,0(r22)
    9868:	003ec606 	br	9384 <__alt_data_end+0xf8009384>
    986c:	b0c00007 	ldb	r3,0(r22)
    9870:	00801b04 	movi	r2,108
    9874:	18832026 	beq	r3,r2,a4f8 <___vfiprintf_internal_r+0x12e8>
    9878:	8c400414 	ori	r17,r17,16
    987c:	003ec106 	br	9384 <__alt_data_end+0xf8009384>
    9880:	9cc03fcc 	andi	r19,r19,255
    9884:	b811883a 	mov	r8,r23
    9888:	9803981e 	bne	r19,zero,a6ec <___vfiprintf_internal_r+0x14dc>
    988c:	8880080c 	andi	r2,r17,32
    9890:	1002be26 	beq	r2,zero,a38c <___vfiprintf_internal_r+0x117c>
    9894:	d9002217 	ldw	r4,136(sp)
    9898:	d9402417 	ldw	r5,144(sp)
    989c:	20800017 	ldw	r2,0(r4)
    98a0:	2807d7fa 	srai	r3,r5,31
    98a4:	21000104 	addi	r4,r4,4
    98a8:	d9002215 	stw	r4,136(sp)
    98ac:	11400015 	stw	r5,0(r2)
    98b0:	10c00115 	stw	r3,4(r2)
    98b4:	003e8a06 	br	92e0 <__alt_data_end+0xf80092e0>
    98b8:	9cc03fcc 	andi	r19,r19,255
    98bc:	b811883a 	mov	r8,r23
    98c0:	9803871e 	bne	r19,zero,a6e0 <___vfiprintf_internal_r+0x14d0>
    98c4:	8880080c 	andi	r2,r17,32
    98c8:	10009a26 	beq	r2,zero,9b34 <___vfiprintf_internal_r+0x924>
    98cc:	d9002217 	ldw	r4,136(sp)
    98d0:	d8001d85 	stb	zero,118(sp)
    98d4:	20800204 	addi	r2,r4,8
    98d8:	24c00017 	ldw	r19,0(r4)
    98dc:	25000117 	ldw	r20,4(r4)
    98e0:	8002a416 	blt	r16,zero,a374 <___vfiprintf_internal_r+0x1164>
    98e4:	013fdfc4 	movi	r4,-129
    98e8:	9d06b03a 	or	r3,r19,r20
    98ec:	d8802215 	stw	r2,136(sp)
    98f0:	8922703a 	and	r17,r17,r4
    98f4:	18009b26 	beq	r3,zero,9b64 <___vfiprintf_internal_r+0x954>
    98f8:	002b883a 	mov	r21,zero
    98fc:	ddc01a04 	addi	r23,sp,104
    9900:	9806d0fa 	srli	r3,r19,3
    9904:	a008977a 	slli	r4,r20,29
    9908:	a028d0fa 	srli	r20,r20,3
    990c:	9cc001cc 	andi	r19,r19,7
    9910:	98800c04 	addi	r2,r19,48
    9914:	bdffffc4 	addi	r23,r23,-1
    9918:	20e6b03a 	or	r19,r4,r3
    991c:	b8800005 	stb	r2,0(r23)
    9920:	9d06b03a 	or	r3,r19,r20
    9924:	183ff61e 	bne	r3,zero,9900 <__alt_data_end+0xf8009900>
    9928:	88c0004c 	andi	r3,r17,1
    992c:	18021f1e 	bne	r3,zero,a1ac <___vfiprintf_internal_r+0xf9c>
    9930:	d9401e17 	ldw	r5,120(sp)
    9934:	2de9c83a 	sub	r20,r5,r23
    9938:	003f3806 	br	961c <__alt_data_end+0xf800961c>
    993c:	9cc03fcc 	andi	r19,r19,255
    9940:	b811883a 	mov	r8,r23
    9944:	98034f1e 	bne	r19,zero,a684 <___vfiprintf_internal_r+0x1474>
    9948:	00800074 	movhi	r2,1
    994c:	10883604 	addi	r2,r2,8408
    9950:	d8802615 	stw	r2,152(sp)
    9954:	8880080c 	andi	r2,r17,32
    9958:	1000ac26 	beq	r2,zero,9c0c <___vfiprintf_internal_r+0x9fc>
    995c:	d9002217 	ldw	r4,136(sp)
    9960:	24c00017 	ldw	r19,0(r4)
    9964:	25000117 	ldw	r20,4(r4)
    9968:	21000204 	addi	r4,r4,8
    996c:	d9002215 	stw	r4,136(sp)
    9970:	8880004c 	andi	r2,r17,1
    9974:	1001e726 	beq	r2,zero,a114 <___vfiprintf_internal_r+0xf04>
    9978:	9d04b03a 	or	r2,r19,r20
    997c:	10025c1e 	bne	r2,zero,a2f0 <___vfiprintf_internal_r+0x10e0>
    9980:	d8001d85 	stb	zero,118(sp)
    9984:	80024416 	blt	r16,zero,a298 <___vfiprintf_internal_r+0x1088>
    9988:	00bfdfc4 	movi	r2,-129
    998c:	88a2703a 	and	r17,r17,r2
    9990:	003f1d06 	br	9608 <__alt_data_end+0xf8009608>
    9994:	d8c02217 	ldw	r3,136(sp)
    9998:	04c00044 	movi	r19,1
    999c:	b811883a 	mov	r8,r23
    99a0:	18800017 	ldw	r2,0(r3)
    99a4:	18c00104 	addi	r3,r3,4
    99a8:	d8001d85 	stb	zero,118(sp)
    99ac:	d8801005 	stb	r2,64(sp)
    99b0:	d8c02215 	stw	r3,136(sp)
    99b4:	9829883a 	mov	r20,r19
    99b8:	ddc01004 	addi	r23,sp,64
    99bc:	0021883a 	mov	r16,zero
    99c0:	003f1e06 	br	963c <__alt_data_end+0xf800963c>
    99c4:	9cc03fcc 	andi	r19,r19,255
    99c8:	b811883a 	mov	r8,r23
    99cc:	9803331e 	bne	r19,zero,a69c <___vfiprintf_internal_r+0x148c>
    99d0:	8880080c 	andi	r2,r17,32
    99d4:	10004826 	beq	r2,zero,9af8 <___vfiprintf_internal_r+0x8e8>
    99d8:	d9002217 	ldw	r4,136(sp)
    99dc:	20800117 	ldw	r2,4(r4)
    99e0:	24c00017 	ldw	r19,0(r4)
    99e4:	21000204 	addi	r4,r4,8
    99e8:	d9002215 	stw	r4,136(sp)
    99ec:	1029883a 	mov	r20,r2
    99f0:	10024c16 	blt	r2,zero,a324 <___vfiprintf_internal_r+0x1114>
    99f4:	dd401d83 	ldbu	r21,118(sp)
    99f8:	80007116 	blt	r16,zero,9bc0 <___vfiprintf_internal_r+0x9b0>
    99fc:	00ffdfc4 	movi	r3,-129
    9a00:	9d04b03a 	or	r2,r19,r20
    9a04:	88e2703a 	and	r17,r17,r3
    9a08:	1000d126 	beq	r2,zero,9d50 <___vfiprintf_internal_r+0xb40>
    9a0c:	a0023526 	beq	r20,zero,a2e4 <___vfiprintf_internal_r+0x10d4>
    9a10:	ddc01a04 	addi	r23,sp,104
    9a14:	4039883a 	mov	fp,r8
    9a18:	9809883a 	mov	r4,r19
    9a1c:	a00b883a 	mov	r5,r20
    9a20:	01800284 	movi	r6,10
    9a24:	000f883a 	mov	r7,zero
    9a28:	000b73c0 	call	b73c <__umoddi3>
    9a2c:	10800c04 	addi	r2,r2,48
    9a30:	bdffffc4 	addi	r23,r23,-1
    9a34:	9809883a 	mov	r4,r19
    9a38:	a00b883a 	mov	r5,r20
    9a3c:	b8800005 	stb	r2,0(r23)
    9a40:	01800284 	movi	r6,10
    9a44:	000f883a 	mov	r7,zero
    9a48:	000b1400 	call	b140 <__udivdi3>
    9a4c:	1027883a 	mov	r19,r2
    9a50:	10c4b03a 	or	r2,r2,r3
    9a54:	1829883a 	mov	r20,r3
    9a58:	103fef1e 	bne	r2,zero,9a18 <__alt_data_end+0xf8009a18>
    9a5c:	d9001e17 	ldw	r4,120(sp)
    9a60:	e011883a 	mov	r8,fp
    9a64:	25e9c83a 	sub	r20,r4,r23
    9a68:	003eec06 	br	961c <__alt_data_end+0xf800961c>
    9a6c:	d8802307 	ldb	r2,140(sp)
    9a70:	1002361e 	bne	r2,zero,a34c <___vfiprintf_internal_r+0x113c>
    9a74:	00c00804 	movi	r3,32
    9a78:	d8c02305 	stb	r3,140(sp)
    9a7c:	04c00044 	movi	r19,1
    9a80:	b0c00007 	ldb	r3,0(r22)
    9a84:	003e3f06 	br	9384 <__alt_data_end+0xf8009384>
    9a88:	8c400054 	ori	r17,r17,1
    9a8c:	b0c00007 	ldb	r3,0(r22)
    9a90:	003e3c06 	br	9384 <__alt_data_end+0xf8009384>
    9a94:	8c402014 	ori	r17,r17,128
    9a98:	b0c00007 	ldb	r3,0(r22)
    9a9c:	003e3906 	br	9384 <__alt_data_end+0xf8009384>
    9aa0:	dc002715 	stw	r16,156(sp)
    9aa4:	d8002515 	stw	zero,148(sp)
    9aa8:	1f3ff404 	addi	fp,r3,-48
    9aac:	0009883a 	mov	r4,zero
    9ab0:	b021883a 	mov	r16,r22
    9ab4:	01400284 	movi	r5,10
    9ab8:	00017b40 	call	17b4 <__mulsi3>
    9abc:	80c00007 	ldb	r3,0(r16)
    9ac0:	e089883a 	add	r4,fp,r2
    9ac4:	b5800044 	addi	r22,r22,1
    9ac8:	1f3ff404 	addi	fp,r3,-48
    9acc:	b021883a 	mov	r16,r22
    9ad0:	af3ff82e 	bgeu	r21,fp,9ab4 <__alt_data_end+0xf8009ab4>
    9ad4:	d9002515 	stw	r4,148(sp)
    9ad8:	dc002717 	ldw	r16,156(sp)
    9adc:	003e2a06 	br	9388 <__alt_data_end+0xf8009388>
    9ae0:	9cc03fcc 	andi	r19,r19,255
    9ae4:	b811883a 	mov	r8,r23
    9ae8:	9802e91e 	bne	r19,zero,a690 <___vfiprintf_internal_r+0x1480>
    9aec:	8c400414 	ori	r17,r17,16
    9af0:	8880080c 	andi	r2,r17,32
    9af4:	103fb81e 	bne	r2,zero,99d8 <__alt_data_end+0xf80099d8>
    9af8:	8880040c 	andi	r2,r17,16
    9afc:	10022e26 	beq	r2,zero,a3b8 <___vfiprintf_internal_r+0x11a8>
    9b00:	d9402217 	ldw	r5,136(sp)
    9b04:	2cc00017 	ldw	r19,0(r5)
    9b08:	29400104 	addi	r5,r5,4
    9b0c:	d9402215 	stw	r5,136(sp)
    9b10:	9829d7fa 	srai	r20,r19,31
    9b14:	a005883a 	mov	r2,r20
    9b18:	003fb506 	br	99f0 <__alt_data_end+0xf80099f0>
    9b1c:	9cc03fcc 	andi	r19,r19,255
    9b20:	b811883a 	mov	r8,r23
    9b24:	9802fa1e 	bne	r19,zero,a710 <___vfiprintf_internal_r+0x1500>
    9b28:	8c400414 	ori	r17,r17,16
    9b2c:	8880080c 	andi	r2,r17,32
    9b30:	103f661e 	bne	r2,zero,98cc <__alt_data_end+0xf80098cc>
    9b34:	8880040c 	andi	r2,r17,16
    9b38:	10020626 	beq	r2,zero,a354 <___vfiprintf_internal_r+0x1144>
    9b3c:	d9402217 	ldw	r5,136(sp)
    9b40:	d8001d85 	stb	zero,118(sp)
    9b44:	0029883a 	mov	r20,zero
    9b48:	28800104 	addi	r2,r5,4
    9b4c:	2cc00017 	ldw	r19,0(r5)
    9b50:	80020816 	blt	r16,zero,a374 <___vfiprintf_internal_r+0x1164>
    9b54:	00ffdfc4 	movi	r3,-129
    9b58:	d8802215 	stw	r2,136(sp)
    9b5c:	88e2703a 	and	r17,r17,r3
    9b60:	983f651e 	bne	r19,zero,98f8 <__alt_data_end+0xf80098f8>
    9b64:	002b883a 	mov	r21,zero
    9b68:	8002cf26 	beq	r16,zero,a6a8 <___vfiprintf_internal_r+0x1498>
    9b6c:	0027883a 	mov	r19,zero
    9b70:	0029883a 	mov	r20,zero
    9b74:	003f6106 	br	98fc <__alt_data_end+0xf80098fc>
    9b78:	9cc03fcc 	andi	r19,r19,255
    9b7c:	b811883a 	mov	r8,r23
    9b80:	9802e01e 	bne	r19,zero,a704 <___vfiprintf_internal_r+0x14f4>
    9b84:	8c400414 	ori	r17,r17,16
    9b88:	8880080c 	andi	r2,r17,32
    9b8c:	1000641e 	bne	r2,zero,9d20 <___vfiprintf_internal_r+0xb10>
    9b90:	8880040c 	andi	r2,r17,16
    9b94:	1001c81e 	bne	r2,zero,a2b8 <___vfiprintf_internal_r+0x10a8>
    9b98:	8880100c 	andi	r2,r17,64
    9b9c:	d8001d85 	stb	zero,118(sp)
    9ba0:	1002281e 	bne	r2,zero,a444 <___vfiprintf_internal_r+0x1234>
    9ba4:	d9002217 	ldw	r4,136(sp)
    9ba8:	0029883a 	mov	r20,zero
    9bac:	20800104 	addi	r2,r4,4
    9bb0:	24c00017 	ldw	r19,0(r4)
    9bb4:	8001c60e 	bge	r16,zero,a2d0 <___vfiprintf_internal_r+0x10c0>
    9bb8:	d8802215 	stw	r2,136(sp)
    9bbc:	002b883a 	mov	r21,zero
    9bc0:	9d04b03a 	or	r2,r19,r20
    9bc4:	103f911e 	bne	r2,zero,9a0c <__alt_data_end+0xf8009a0c>
    9bc8:	00800044 	movi	r2,1
    9bcc:	10803fcc 	andi	r2,r2,255
    9bd0:	00c00044 	movi	r3,1
    9bd4:	10c05f26 	beq	r2,r3,9d54 <___vfiprintf_internal_r+0xb44>
    9bd8:	00c00084 	movi	r3,2
    9bdc:	10ffe31e 	bne	r2,r3,9b6c <__alt_data_end+0xf8009b6c>
    9be0:	0027883a 	mov	r19,zero
    9be4:	0029883a 	mov	r20,zero
    9be8:	00015106 	br	a130 <___vfiprintf_internal_r+0xf20>
    9bec:	9cc03fcc 	andi	r19,r19,255
    9bf0:	b811883a 	mov	r8,r23
    9bf4:	9802c01e 	bne	r19,zero,a6f8 <___vfiprintf_internal_r+0x14e8>
    9bf8:	01400074 	movhi	r5,1
    9bfc:	29483104 	addi	r5,r5,8388
    9c00:	d9402615 	stw	r5,152(sp)
    9c04:	8880080c 	andi	r2,r17,32
    9c08:	103f541e 	bne	r2,zero,995c <__alt_data_end+0xf800995c>
    9c0c:	8880040c 	andi	r2,r17,16
    9c10:	1001f226 	beq	r2,zero,a3dc <___vfiprintf_internal_r+0x11cc>
    9c14:	d9402217 	ldw	r5,136(sp)
    9c18:	0029883a 	mov	r20,zero
    9c1c:	2cc00017 	ldw	r19,0(r5)
    9c20:	29400104 	addi	r5,r5,4
    9c24:	d9402215 	stw	r5,136(sp)
    9c28:	003f5106 	br	9970 <__alt_data_end+0xf8009970>
    9c2c:	d8c02217 	ldw	r3,136(sp)
    9c30:	b811883a 	mov	r8,r23
    9c34:	d8001d85 	stb	zero,118(sp)
    9c38:	1dc00017 	ldw	r23,0(r3)
    9c3c:	1f000104 	addi	fp,r3,4
    9c40:	b8025926 	beq	r23,zero,a5a8 <___vfiprintf_internal_r+0x1398>
    9c44:	80023316 	blt	r16,zero,a514 <___vfiprintf_internal_r+0x1304>
    9c48:	800d883a 	mov	r6,r16
    9c4c:	000b883a 	mov	r5,zero
    9c50:	b809883a 	mov	r4,r23
    9c54:	da002a15 	stw	r8,168(sp)
    9c58:	000730c0 	call	730c <memchr>
    9c5c:	da002a17 	ldw	r8,168(sp)
    9c60:	10026826 	beq	r2,zero,a604 <___vfiprintf_internal_r+0x13f4>
    9c64:	15e9c83a 	sub	r20,r2,r23
    9c68:	dd401d83 	ldbu	r21,118(sp)
    9c6c:	df002215 	stw	fp,136(sp)
    9c70:	0021883a 	mov	r16,zero
    9c74:	003e6906 	br	961c <__alt_data_end+0xf800961c>
    9c78:	9cc03fcc 	andi	r19,r19,255
    9c7c:	b811883a 	mov	r8,r23
    9c80:	983fc126 	beq	r19,zero,9b88 <__alt_data_end+0xf8009b88>
    9c84:	d8c02303 	ldbu	r3,140(sp)
    9c88:	d8c01d85 	stb	r3,118(sp)
    9c8c:	003fbe06 	br	9b88 <__alt_data_end+0xf8009b88>
    9c90:	d9002217 	ldw	r4,136(sp)
    9c94:	d9402217 	ldw	r5,136(sp)
    9c98:	21000017 	ldw	r4,0(r4)
    9c9c:	28800104 	addi	r2,r5,4
    9ca0:	d9002515 	stw	r4,148(sp)
    9ca4:	203e3d16 	blt	r4,zero,959c <__alt_data_end+0xf800959c>
    9ca8:	d8802215 	stw	r2,136(sp)
    9cac:	b0c00007 	ldb	r3,0(r22)
    9cb0:	003db406 	br	9384 <__alt_data_end+0xf8009384>
    9cb4:	00c00ac4 	movi	r3,43
    9cb8:	d8c02305 	stb	r3,140(sp)
    9cbc:	04c00044 	movi	r19,1
    9cc0:	b0c00007 	ldb	r3,0(r22)
    9cc4:	003daf06 	br	9384 <__alt_data_end+0xf8009384>
    9cc8:	b0c00007 	ldb	r3,0(r22)
    9ccc:	01000a84 	movi	r4,42
    9cd0:	b4000044 	addi	r16,r22,1
    9cd4:	19025e26 	beq	r3,r4,a650 <___vfiprintf_internal_r+0x1440>
    9cd8:	1f3ff404 	addi	fp,r3,-48
    9cdc:	0009883a 	mov	r4,zero
    9ce0:	af025236 	bltu	r21,fp,a62c <___vfiprintf_internal_r+0x141c>
    9ce4:	01400284 	movi	r5,10
    9ce8:	00017b40 	call	17b4 <__mulsi3>
    9cec:	80c00007 	ldb	r3,0(r16)
    9cf0:	1709883a 	add	r4,r2,fp
    9cf4:	85800044 	addi	r22,r16,1
    9cf8:	1f3ff404 	addi	fp,r3,-48
    9cfc:	b021883a 	mov	r16,r22
    9d00:	af3ff82e 	bgeu	r21,fp,9ce4 <__alt_data_end+0xf8009ce4>
    9d04:	2021883a 	mov	r16,r4
    9d08:	203d9f0e 	bge	r4,zero,9388 <__alt_data_end+0xf8009388>
    9d0c:	043fffc4 	movi	r16,-1
    9d10:	003d9d06 	br	9388 <__alt_data_end+0xf8009388>
    9d14:	8c401014 	ori	r17,r17,64
    9d18:	b0c00007 	ldb	r3,0(r22)
    9d1c:	003d9906 	br	9384 <__alt_data_end+0xf8009384>
    9d20:	d9002217 	ldw	r4,136(sp)
    9d24:	d8001d85 	stb	zero,118(sp)
    9d28:	20c00204 	addi	r3,r4,8
    9d2c:	24c00017 	ldw	r19,0(r4)
    9d30:	25000117 	ldw	r20,4(r4)
    9d34:	8001e716 	blt	r16,zero,a4d4 <___vfiprintf_internal_r+0x12c4>
    9d38:	013fdfc4 	movi	r4,-129
    9d3c:	9d04b03a 	or	r2,r19,r20
    9d40:	d8c02215 	stw	r3,136(sp)
    9d44:	8922703a 	and	r17,r17,r4
    9d48:	002b883a 	mov	r21,zero
    9d4c:	103f2f1e 	bne	r2,zero,9a0c <__alt_data_end+0xf8009a0c>
    9d50:	803e2f26 	beq	r16,zero,9610 <__alt_data_end+0xf8009610>
    9d54:	0027883a 	mov	r19,zero
    9d58:	9cc00c04 	addi	r19,r19,48
    9d5c:	dcc019c5 	stb	r19,103(sp)
    9d60:	dd002817 	ldw	r20,160(sp)
    9d64:	ddc019c4 	addi	r23,sp,103
    9d68:	003e2c06 	br	961c <__alt_data_end+0xf800961c>
    9d6c:	9cc03fcc 	andi	r19,r19,255
    9d70:	b811883a 	mov	r8,r23
    9d74:	9802571e 	bne	r19,zero,a6d4 <___vfiprintf_internal_r+0x14c4>
    9d78:	18005726 	beq	r3,zero,9ed8 <___vfiprintf_internal_r+0xcc8>
    9d7c:	04c00044 	movi	r19,1
    9d80:	d8c01005 	stb	r3,64(sp)
    9d84:	d8001d85 	stb	zero,118(sp)
    9d88:	9829883a 	mov	r20,r19
    9d8c:	ddc01004 	addi	r23,sp,64
    9d90:	003f0a06 	br	99bc <__alt_data_end+0xf80099bc>
    9d94:	d9402017 	ldw	r5,128(sp)
    9d98:	d9002117 	ldw	r4,132(sp)
    9d9c:	d9801a04 	addi	r6,sp,104
    9da0:	da802a15 	stw	r10,168(sp)
    9da4:	00090fc0 	call	90fc <__sprint_r.part.0>
    9da8:	da802a17 	ldw	r10,168(sp)
    9dac:	1000501e 	bne	r2,zero,9ef0 <___vfiprintf_internal_r+0xce0>
    9db0:	d9801b17 	ldw	r6,108(sp)
    9db4:	d8801c17 	ldw	r2,112(sp)
    9db8:	d811883a 	mov	r8,sp
    9dbc:	31000044 	addi	r4,r6,1
    9dc0:	003e3606 	br	969c <__alt_data_end+0xf800969c>
    9dc4:	d9001b17 	ldw	r4,108(sp)
    9dc8:	d8801c17 	ldw	r2,112(sp)
    9dcc:	21400044 	addi	r5,r4,1
    9dd0:	d9801d87 	ldb	r6,118(sp)
    9dd4:	303e5226 	beq	r6,zero,9720 <__alt_data_end+0xf8009720>
    9dd8:	01800044 	movi	r6,1
    9ddc:	d9001d84 	addi	r4,sp,118
    9de0:	1185883a 	add	r2,r2,r6
    9de4:	41000015 	stw	r4,0(r8)
    9de8:	41800115 	stw	r6,4(r8)
    9dec:	d8801c15 	stw	r2,112(sp)
    9df0:	d9401b15 	stw	r5,108(sp)
    9df4:	010001c4 	movi	r4,7
    9df8:	2140b00e 	bge	r4,r5,a0bc <___vfiprintf_internal_r+0xeac>
    9dfc:	1000f61e 	bne	r2,zero,a1d8 <___vfiprintf_internal_r+0xfc8>
    9e00:	3800b31e 	bne	r7,zero,a0d0 <___vfiprintf_internal_r+0xec0>
    9e04:	0009883a 	mov	r4,zero
    9e08:	300b883a 	mov	r5,r6
    9e0c:	d811883a 	mov	r8,sp
    9e10:	01802004 	movi	r6,128
    9e14:	19be5226 	beq	r3,r6,9760 <__alt_data_end+0xf8009760>
    9e18:	8521c83a 	sub	r16,r16,r20
    9e1c:	043e790e 	bge	zero,r16,9804 <__alt_data_end+0xf8009804>
    9e20:	05400404 	movi	r21,16
    9e24:	ac01b00e 	bge	r21,r16,a4e8 <___vfiprintf_internal_r+0x12d8>
    9e28:	01400074 	movhi	r5,1
    9e2c:	29489604 	addi	r5,r5,8792
    9e30:	d9402315 	stw	r5,140(sp)
    9e34:	070001c4 	movi	fp,7
    9e38:	00000506 	br	9e50 <___vfiprintf_internal_r+0xc40>
    9e3c:	21400084 	addi	r5,r4,2
    9e40:	42000204 	addi	r8,r8,8
    9e44:	1809883a 	mov	r4,r3
    9e48:	843ffc04 	addi	r16,r16,-16
    9e4c:	ac000d0e 	bge	r21,r16,9e84 <___vfiprintf_internal_r+0xc74>
    9e50:	10800404 	addi	r2,r2,16
    9e54:	20c00044 	addi	r3,r4,1
    9e58:	44800015 	stw	r18,0(r8)
    9e5c:	45400115 	stw	r21,4(r8)
    9e60:	d8801c15 	stw	r2,112(sp)
    9e64:	d8c01b15 	stw	r3,108(sp)
    9e68:	e0fff40e 	bge	fp,r3,9e3c <__alt_data_end+0xf8009e3c>
    9e6c:	1000101e 	bne	r2,zero,9eb0 <___vfiprintf_internal_r+0xca0>
    9e70:	843ffc04 	addi	r16,r16,-16
    9e74:	01400044 	movi	r5,1
    9e78:	0009883a 	mov	r4,zero
    9e7c:	d811883a 	mov	r8,sp
    9e80:	ac3ff316 	blt	r21,r16,9e50 <__alt_data_end+0xf8009e50>
    9e84:	d8c02317 	ldw	r3,140(sp)
    9e88:	1405883a 	add	r2,r2,r16
    9e8c:	44000115 	stw	r16,4(r8)
    9e90:	40c00015 	stw	r3,0(r8)
    9e94:	d8801c15 	stw	r2,112(sp)
    9e98:	d9401b15 	stw	r5,108(sp)
    9e9c:	00c001c4 	movi	r3,7
    9ea0:	19401916 	blt	r3,r5,9f08 <___vfiprintf_internal_r+0xcf8>
    9ea4:	42000204 	addi	r8,r8,8
    9ea8:	29400044 	addi	r5,r5,1
    9eac:	003e5506 	br	9804 <__alt_data_end+0xf8009804>
    9eb0:	d9402017 	ldw	r5,128(sp)
    9eb4:	d9002117 	ldw	r4,132(sp)
    9eb8:	d9801a04 	addi	r6,sp,104
    9ebc:	00090fc0 	call	90fc <__sprint_r.part.0>
    9ec0:	10000b1e 	bne	r2,zero,9ef0 <___vfiprintf_internal_r+0xce0>
    9ec4:	d9001b17 	ldw	r4,108(sp)
    9ec8:	d8801c17 	ldw	r2,112(sp)
    9ecc:	d811883a 	mov	r8,sp
    9ed0:	21400044 	addi	r5,r4,1
    9ed4:	003fdc06 	br	9e48 <__alt_data_end+0xf8009e48>
    9ed8:	d8801c17 	ldw	r2,112(sp)
    9edc:	10000426 	beq	r2,zero,9ef0 <___vfiprintf_internal_r+0xce0>
    9ee0:	d9402017 	ldw	r5,128(sp)
    9ee4:	d9002117 	ldw	r4,132(sp)
    9ee8:	d9801a04 	addi	r6,sp,104
    9eec:	00090fc0 	call	90fc <__sprint_r.part.0>
    9ef0:	d9402017 	ldw	r5,128(sp)
    9ef4:	2880030b 	ldhu	r2,12(r5)
    9ef8:	1080100c 	andi	r2,r2,64
    9efc:	10014d1e 	bne	r2,zero,a434 <___vfiprintf_internal_r+0x1224>
    9f00:	d8802417 	ldw	r2,144(sp)
    9f04:	003d9706 	br	9564 <__alt_data_end+0xf8009564>
    9f08:	1000d21e 	bne	r2,zero,a254 <___vfiprintf_internal_r+0x1044>
    9f0c:	00c00044 	movi	r3,1
    9f10:	a005883a 	mov	r2,r20
    9f14:	ddc00015 	stw	r23,0(sp)
    9f18:	dd000115 	stw	r20,4(sp)
    9f1c:	dd001c15 	stw	r20,112(sp)
    9f20:	d8c01b15 	stw	r3,108(sp)
    9f24:	d811883a 	mov	r8,sp
    9f28:	42000204 	addi	r8,r8,8
    9f2c:	8c40010c 	andi	r17,r17,4
    9f30:	88004026 	beq	r17,zero,a034 <___vfiprintf_internal_r+0xe24>
    9f34:	d9002517 	ldw	r4,148(sp)
    9f38:	24e3c83a 	sub	r17,r4,r19
    9f3c:	04403d0e 	bge	zero,r17,a034 <___vfiprintf_internal_r+0xe24>
    9f40:	04000404 	movi	r16,16
    9f44:	8441a90e 	bge	r16,r17,a5ec <___vfiprintf_internal_r+0x13dc>
    9f48:	00c00074 	movhi	r3,1
    9f4c:	18c89a04 	addi	r3,r3,8808
    9f50:	d9001b17 	ldw	r4,108(sp)
    9f54:	d8c02315 	stw	r3,140(sp)
    9f58:	050001c4 	movi	r20,7
    9f5c:	dd402117 	ldw	r21,132(sp)
    9f60:	ddc02017 	ldw	r23,128(sp)
    9f64:	00000506 	br	9f7c <___vfiprintf_internal_r+0xd6c>
    9f68:	21400084 	addi	r5,r4,2
    9f6c:	42000204 	addi	r8,r8,8
    9f70:	1809883a 	mov	r4,r3
    9f74:	8c7ffc04 	addi	r17,r17,-16
    9f78:	84400f0e 	bge	r16,r17,9fb8 <___vfiprintf_internal_r+0xda8>
    9f7c:	01400074 	movhi	r5,1
    9f80:	10800404 	addi	r2,r2,16
    9f84:	20c00044 	addi	r3,r4,1
    9f88:	29489a04 	addi	r5,r5,8808
    9f8c:	41400015 	stw	r5,0(r8)
    9f90:	44000115 	stw	r16,4(r8)
    9f94:	d8801c15 	stw	r2,112(sp)
    9f98:	d8c01b15 	stw	r3,108(sp)
    9f9c:	a0fff20e 	bge	r20,r3,9f68 <__alt_data_end+0xf8009f68>
    9fa0:	1000141e 	bne	r2,zero,9ff4 <___vfiprintf_internal_r+0xde4>
    9fa4:	8c7ffc04 	addi	r17,r17,-16
    9fa8:	01400044 	movi	r5,1
    9fac:	0009883a 	mov	r4,zero
    9fb0:	d811883a 	mov	r8,sp
    9fb4:	847ff116 	blt	r16,r17,9f7c <__alt_data_end+0xf8009f7c>
    9fb8:	d8c02317 	ldw	r3,140(sp)
    9fbc:	1445883a 	add	r2,r2,r17
    9fc0:	44400115 	stw	r17,4(r8)
    9fc4:	40c00015 	stw	r3,0(r8)
    9fc8:	d8801c15 	stw	r2,112(sp)
    9fcc:	d9401b15 	stw	r5,108(sp)
    9fd0:	00c001c4 	movi	r3,7
    9fd4:	1940170e 	bge	r3,r5,a034 <___vfiprintf_internal_r+0xe24>
    9fd8:	1000101e 	bne	r2,zero,a01c <___vfiprintf_internal_r+0xe0c>
    9fdc:	d8802517 	ldw	r2,148(sp)
    9fe0:	14c11616 	blt	r2,r19,a43c <___vfiprintf_internal_r+0x122c>
    9fe4:	d9002417 	ldw	r4,144(sp)
    9fe8:	2089883a 	add	r4,r4,r2
    9fec:	d9002415 	stw	r4,144(sp)
    9ff0:	003e1806 	br	9854 <__alt_data_end+0xf8009854>
    9ff4:	d9801a04 	addi	r6,sp,104
    9ff8:	b80b883a 	mov	r5,r23
    9ffc:	a809883a 	mov	r4,r21
    a000:	00090fc0 	call	90fc <__sprint_r.part.0>
    a004:	103fba1e 	bne	r2,zero,9ef0 <__alt_data_end+0xf8009ef0>
    a008:	d9001b17 	ldw	r4,108(sp)
    a00c:	d8801c17 	ldw	r2,112(sp)
    a010:	d811883a 	mov	r8,sp
    a014:	21400044 	addi	r5,r4,1
    a018:	003fd606 	br	9f74 <__alt_data_end+0xf8009f74>
    a01c:	d9402017 	ldw	r5,128(sp)
    a020:	d9002117 	ldw	r4,132(sp)
    a024:	d9801a04 	addi	r6,sp,104
    a028:	00090fc0 	call	90fc <__sprint_r.part.0>
    a02c:	103fb01e 	bne	r2,zero,9ef0 <__alt_data_end+0xf8009ef0>
    a030:	d8801c17 	ldw	r2,112(sp)
    a034:	d8c02517 	ldw	r3,148(sp)
    a038:	1cc0010e 	bge	r3,r19,a040 <___vfiprintf_internal_r+0xe30>
    a03c:	9807883a 	mov	r3,r19
    a040:	d9002417 	ldw	r4,144(sp)
    a044:	20c9883a 	add	r4,r4,r3
    a048:	d9002415 	stw	r4,144(sp)
    a04c:	103e0126 	beq	r2,zero,9854 <__alt_data_end+0xf8009854>
    a050:	d9402017 	ldw	r5,128(sp)
    a054:	d9002117 	ldw	r4,132(sp)
    a058:	d9801a04 	addi	r6,sp,104
    a05c:	00090fc0 	call	90fc <__sprint_r.part.0>
    a060:	103dfc26 	beq	r2,zero,9854 <__alt_data_end+0xf8009854>
    a064:	003fa206 	br	9ef0 <__alt_data_end+0xf8009ef0>
    a068:	d9402017 	ldw	r5,128(sp)
    a06c:	d9002117 	ldw	r4,132(sp)
    a070:	d9801a04 	addi	r6,sp,104
    a074:	d9c02b15 	stw	r7,172(sp)
    a078:	00090fc0 	call	90fc <__sprint_r.part.0>
    a07c:	d9c02b17 	ldw	r7,172(sp)
    a080:	103f9b1e 	bne	r2,zero,9ef0 <__alt_data_end+0xf8009ef0>
    a084:	d9001b17 	ldw	r4,108(sp)
    a088:	d8801c17 	ldw	r2,112(sp)
    a08c:	d811883a 	mov	r8,sp
    a090:	21800044 	addi	r6,r4,1
    a094:	003dbf06 	br	9794 <__alt_data_end+0xf8009794>
    a098:	1000d81e 	bne	r2,zero,a3fc <___vfiprintf_internal_r+0x11ec>
    a09c:	d9001d87 	ldb	r4,118(sp)
    a0a0:	20000a26 	beq	r4,zero,a0cc <___vfiprintf_internal_r+0xebc>
    a0a4:	00800044 	movi	r2,1
    a0a8:	d9001d84 	addi	r4,sp,118
    a0ac:	100b883a 	mov	r5,r2
    a0b0:	d9000015 	stw	r4,0(sp)
    a0b4:	d8800115 	stw	r2,4(sp)
    a0b8:	d811883a 	mov	r8,sp
    a0bc:	2809883a 	mov	r4,r5
    a0c0:	42000204 	addi	r8,r8,8
    a0c4:	29400044 	addi	r5,r5,1
    a0c8:	003d9506 	br	9720 <__alt_data_end+0xf8009720>
    a0cc:	3800fd26 	beq	r7,zero,a4c4 <___vfiprintf_internal_r+0x12b4>
    a0d0:	00800084 	movi	r2,2
    a0d4:	d9001d04 	addi	r4,sp,116
    a0d8:	d9000015 	stw	r4,0(sp)
    a0dc:	d8800115 	stw	r2,4(sp)
    a0e0:	01400044 	movi	r5,1
    a0e4:	d811883a 	mov	r8,sp
    a0e8:	2809883a 	mov	r4,r5
    a0ec:	42000204 	addi	r8,r8,8
    a0f0:	29400044 	addi	r5,r5,1
    a0f4:	003f4606 	br	9e10 <__alt_data_end+0xf8009e10>
    a0f8:	d8802517 	ldw	r2,148(sp)
    a0fc:	14c0010e 	bge	r2,r19,a104 <___vfiprintf_internal_r+0xef4>
    a100:	9805883a 	mov	r2,r19
    a104:	d9402417 	ldw	r5,144(sp)
    a108:	288b883a 	add	r5,r5,r2
    a10c:	d9402415 	stw	r5,144(sp)
    a110:	003dd006 	br	9854 <__alt_data_end+0xf8009854>
    a114:	d8001d85 	stb	zero,118(sp)
    a118:	80005d16 	blt	r16,zero,a290 <___vfiprintf_internal_r+0x1080>
    a11c:	00ffdfc4 	movi	r3,-129
    a120:	9d04b03a 	or	r2,r19,r20
    a124:	88e2703a 	and	r17,r17,r3
    a128:	103d3726 	beq	r2,zero,9608 <__alt_data_end+0xf8009608>
    a12c:	002b883a 	mov	r21,zero
    a130:	d9002617 	ldw	r4,152(sp)
    a134:	ddc01a04 	addi	r23,sp,104
    a138:	988003cc 	andi	r2,r19,15
    a13c:	a006973a 	slli	r3,r20,28
    a140:	2085883a 	add	r2,r4,r2
    a144:	9826d13a 	srli	r19,r19,4
    a148:	10800003 	ldbu	r2,0(r2)
    a14c:	a028d13a 	srli	r20,r20,4
    a150:	bdffffc4 	addi	r23,r23,-1
    a154:	1ce6b03a 	or	r19,r3,r19
    a158:	b8800005 	stb	r2,0(r23)
    a15c:	9d04b03a 	or	r2,r19,r20
    a160:	103ff51e 	bne	r2,zero,a138 <__alt_data_end+0xf800a138>
    a164:	d8801e17 	ldw	r2,120(sp)
    a168:	15e9c83a 	sub	r20,r2,r23
    a16c:	003d2b06 	br	961c <__alt_data_end+0xf800961c>
    a170:	d9402017 	ldw	r5,128(sp)
    a174:	d9002117 	ldw	r4,132(sp)
    a178:	d9801a04 	addi	r6,sp,104
    a17c:	00090fc0 	call	90fc <__sprint_r.part.0>
    a180:	103f5b1e 	bne	r2,zero,9ef0 <__alt_data_end+0xf8009ef0>
    a184:	d8801c17 	ldw	r2,112(sp)
    a188:	d811883a 	mov	r8,sp
    a18c:	003f6706 	br	9f2c <__alt_data_end+0xf8009f2c>
    a190:	d9402017 	ldw	r5,128(sp)
    a194:	d9002117 	ldw	r4,132(sp)
    a198:	d9801a04 	addi	r6,sp,104
    a19c:	00090fc0 	call	90fc <__sprint_r.part.0>
    a1a0:	103f531e 	bne	r2,zero,9ef0 <__alt_data_end+0xf8009ef0>
    a1a4:	d811883a 	mov	r8,sp
    a1a8:	003cd906 	br	9510 <__alt_data_end+0xf8009510>
    a1ac:	10803fcc 	andi	r2,r2,255
    a1b0:	1080201c 	xori	r2,r2,128
    a1b4:	10bfe004 	addi	r2,r2,-128
    a1b8:	00c00c04 	movi	r3,48
    a1bc:	10ffe926 	beq	r2,r3,a164 <__alt_data_end+0xf800a164>
    a1c0:	b8ffffc5 	stb	r3,-1(r23)
    a1c4:	d8c01e17 	ldw	r3,120(sp)
    a1c8:	b8bfffc4 	addi	r2,r23,-1
    a1cc:	102f883a 	mov	r23,r2
    a1d0:	18a9c83a 	sub	r20,r3,r2
    a1d4:	003d1106 	br	961c <__alt_data_end+0xf800961c>
    a1d8:	d9402017 	ldw	r5,128(sp)
    a1dc:	d9002117 	ldw	r4,132(sp)
    a1e0:	d9801a04 	addi	r6,sp,104
    a1e4:	d8c02a15 	stw	r3,168(sp)
    a1e8:	d9c02b15 	stw	r7,172(sp)
    a1ec:	00090fc0 	call	90fc <__sprint_r.part.0>
    a1f0:	d8c02a17 	ldw	r3,168(sp)
    a1f4:	d9c02b17 	ldw	r7,172(sp)
    a1f8:	103f3d1e 	bne	r2,zero,9ef0 <__alt_data_end+0xf8009ef0>
    a1fc:	d9001b17 	ldw	r4,108(sp)
    a200:	d8801c17 	ldw	r2,112(sp)
    a204:	d811883a 	mov	r8,sp
    a208:	21400044 	addi	r5,r4,1
    a20c:	003d4406 	br	9720 <__alt_data_end+0xf8009720>
    a210:	d9402017 	ldw	r5,128(sp)
    a214:	d9002117 	ldw	r4,132(sp)
    a218:	d9801a04 	addi	r6,sp,104
    a21c:	d8c02a15 	stw	r3,168(sp)
    a220:	00090fc0 	call	90fc <__sprint_r.part.0>
    a224:	d8c02a17 	ldw	r3,168(sp)
    a228:	103f311e 	bne	r2,zero,9ef0 <__alt_data_end+0xf8009ef0>
    a22c:	d9001b17 	ldw	r4,108(sp)
    a230:	d8801c17 	ldw	r2,112(sp)
    a234:	d811883a 	mov	r8,sp
    a238:	21400044 	addi	r5,r4,1
    a23c:	003ef406 	br	9e10 <__alt_data_end+0xf8009e10>
    a240:	1000bd1e 	bne	r2,zero,a538 <___vfiprintf_internal_r+0x1328>
    a244:	01400044 	movi	r5,1
    a248:	0009883a 	mov	r4,zero
    a24c:	d811883a 	mov	r8,sp
    a250:	003ef106 	br	9e18 <__alt_data_end+0xf8009e18>
    a254:	d9402017 	ldw	r5,128(sp)
    a258:	d9002117 	ldw	r4,132(sp)
    a25c:	d9801a04 	addi	r6,sp,104
    a260:	00090fc0 	call	90fc <__sprint_r.part.0>
    a264:	103f221e 	bne	r2,zero,9ef0 <__alt_data_end+0xf8009ef0>
    a268:	d9401b17 	ldw	r5,108(sp)
    a26c:	d8801c17 	ldw	r2,112(sp)
    a270:	d811883a 	mov	r8,sp
    a274:	29400044 	addi	r5,r5,1
    a278:	003d6206 	br	9804 <__alt_data_end+0xf8009804>
    a27c:	01400074 	movhi	r5,1
    a280:	29483604 	addi	r5,r5,8408
    a284:	d9402615 	stw	r5,152(sp)
    a288:	d8c02215 	stw	r3,136(sp)
    a28c:	1023883a 	mov	r17,r2
    a290:	9d04b03a 	or	r2,r19,r20
    a294:	103fa51e 	bne	r2,zero,a12c <__alt_data_end+0xf800a12c>
    a298:	002b883a 	mov	r21,zero
    a29c:	00800084 	movi	r2,2
    a2a0:	003e4a06 	br	9bcc <__alt_data_end+0xf8009bcc>
    a2a4:	01400074 	movhi	r5,1
    a2a8:	29483604 	addi	r5,r5,8408
    a2ac:	002b883a 	mov	r21,zero
    a2b0:	d9402615 	stw	r5,152(sp)
    a2b4:	003f9e06 	br	a130 <__alt_data_end+0xf800a130>
    a2b8:	d9402217 	ldw	r5,136(sp)
    a2bc:	d8001d85 	stb	zero,118(sp)
    a2c0:	0029883a 	mov	r20,zero
    a2c4:	28800104 	addi	r2,r5,4
    a2c8:	2cc00017 	ldw	r19,0(r5)
    a2cc:	803e3a16 	blt	r16,zero,9bb8 <__alt_data_end+0xf8009bb8>
    a2d0:	00ffdfc4 	movi	r3,-129
    a2d4:	d8802215 	stw	r2,136(sp)
    a2d8:	88e2703a 	and	r17,r17,r3
    a2dc:	002b883a 	mov	r21,zero
    a2e0:	983e9b26 	beq	r19,zero,9d50 <__alt_data_end+0xf8009d50>
    a2e4:	00800244 	movi	r2,9
    a2e8:	14fdc936 	bltu	r2,r19,9a10 <__alt_data_end+0xf8009a10>
    a2ec:	003e9a06 	br	9d58 <__alt_data_end+0xf8009d58>
    a2f0:	00800c04 	movi	r2,48
    a2f4:	d8c01d45 	stb	r3,117(sp)
    a2f8:	d8801d05 	stb	r2,116(sp)
    a2fc:	d8001d85 	stb	zero,118(sp)
    a300:	88c00094 	ori	r3,r17,2
    a304:	80009c16 	blt	r16,zero,a578 <___vfiprintf_internal_r+0x1368>
    a308:	00bfdfc4 	movi	r2,-129
    a30c:	88a2703a 	and	r17,r17,r2
    a310:	8c400094 	ori	r17,r17,2
    a314:	002b883a 	mov	r21,zero
    a318:	003f8506 	br	a130 <__alt_data_end+0xf800a130>
    a31c:	b029883a 	mov	r20,r22
    a320:	003c0b06 	br	9350 <__alt_data_end+0xf8009350>
    a324:	04e7c83a 	sub	r19,zero,r19
    a328:	05400b44 	movi	r21,45
    a32c:	9804c03a 	cmpne	r2,r19,zero
    a330:	0529c83a 	sub	r20,zero,r20
    a334:	dd401d85 	stb	r21,118(sp)
    a338:	a0a9c83a 	sub	r20,r20,r2
    a33c:	80009716 	blt	r16,zero,a59c <___vfiprintf_internal_r+0x138c>
    a340:	00bfdfc4 	movi	r2,-129
    a344:	88a2703a 	and	r17,r17,r2
    a348:	003db006 	br	9a0c <__alt_data_end+0xf8009a0c>
    a34c:	b0c00007 	ldb	r3,0(r22)
    a350:	003c0c06 	br	9384 <__alt_data_end+0xf8009384>
    a354:	8880100c 	andi	r2,r17,64
    a358:	d8001d85 	stb	zero,118(sp)
    a35c:	1000461e 	bne	r2,zero,a478 <___vfiprintf_internal_r+0x1268>
    a360:	d9002217 	ldw	r4,136(sp)
    a364:	0029883a 	mov	r20,zero
    a368:	20800104 	addi	r2,r4,4
    a36c:	24c00017 	ldw	r19,0(r4)
    a370:	803df80e 	bge	r16,zero,9b54 <__alt_data_end+0xf8009b54>
    a374:	9d06b03a 	or	r3,r19,r20
    a378:	d8802215 	stw	r2,136(sp)
    a37c:	183d5e1e 	bne	r3,zero,98f8 <__alt_data_end+0xf80098f8>
    a380:	002b883a 	mov	r21,zero
    a384:	0005883a 	mov	r2,zero
    a388:	003e1006 	br	9bcc <__alt_data_end+0xf8009bcc>
    a38c:	8880040c 	andi	r2,r17,16
    a390:	1000321e 	bne	r2,zero,a45c <___vfiprintf_internal_r+0x124c>
    a394:	8c40100c 	andi	r17,r17,64
    a398:	88008d26 	beq	r17,zero,a5d0 <___vfiprintf_internal_r+0x13c0>
    a39c:	d9402217 	ldw	r5,136(sp)
    a3a0:	d8c02417 	ldw	r3,144(sp)
    a3a4:	28800017 	ldw	r2,0(r5)
    a3a8:	29400104 	addi	r5,r5,4
    a3ac:	d9402215 	stw	r5,136(sp)
    a3b0:	10c0000d 	sth	r3,0(r2)
    a3b4:	003bca06 	br	92e0 <__alt_data_end+0xf80092e0>
    a3b8:	8880100c 	andi	r2,r17,64
    a3bc:	10003a26 	beq	r2,zero,a4a8 <___vfiprintf_internal_r+0x1298>
    a3c0:	d8802217 	ldw	r2,136(sp)
    a3c4:	14c0000f 	ldh	r19,0(r2)
    a3c8:	10800104 	addi	r2,r2,4
    a3cc:	d8802215 	stw	r2,136(sp)
    a3d0:	9829d7fa 	srai	r20,r19,31
    a3d4:	a005883a 	mov	r2,r20
    a3d8:	003d8506 	br	99f0 <__alt_data_end+0xf80099f0>
    a3dc:	8880100c 	andi	r2,r17,64
    a3e0:	10002b26 	beq	r2,zero,a490 <___vfiprintf_internal_r+0x1280>
    a3e4:	d8802217 	ldw	r2,136(sp)
    a3e8:	0029883a 	mov	r20,zero
    a3ec:	14c0000b 	ldhu	r19,0(r2)
    a3f0:	10800104 	addi	r2,r2,4
    a3f4:	d8802215 	stw	r2,136(sp)
    a3f8:	003d5d06 	br	9970 <__alt_data_end+0xf8009970>
    a3fc:	d9402017 	ldw	r5,128(sp)
    a400:	d9002117 	ldw	r4,132(sp)
    a404:	d9801a04 	addi	r6,sp,104
    a408:	d8c02a15 	stw	r3,168(sp)
    a40c:	d9c02b15 	stw	r7,172(sp)
    a410:	00090fc0 	call	90fc <__sprint_r.part.0>
    a414:	d8c02a17 	ldw	r3,168(sp)
    a418:	d9c02b17 	ldw	r7,172(sp)
    a41c:	103eb41e 	bne	r2,zero,9ef0 <__alt_data_end+0xf8009ef0>
    a420:	d9001b17 	ldw	r4,108(sp)
    a424:	d8801c17 	ldw	r2,112(sp)
    a428:	d811883a 	mov	r8,sp
    a42c:	21400044 	addi	r5,r4,1
    a430:	003e6706 	br	9dd0 <__alt_data_end+0xf8009dd0>
    a434:	00bfffc4 	movi	r2,-1
    a438:	003c4a06 	br	9564 <__alt_data_end+0xf8009564>
    a43c:	9805883a 	mov	r2,r19
    a440:	003ee806 	br	9fe4 <__alt_data_end+0xf8009fe4>
    a444:	d8c02217 	ldw	r3,136(sp)
    a448:	0029883a 	mov	r20,zero
    a44c:	18800104 	addi	r2,r3,4
    a450:	1cc0000b 	ldhu	r19,0(r3)
    a454:	803f9e0e 	bge	r16,zero,a2d0 <__alt_data_end+0xf800a2d0>
    a458:	003dd706 	br	9bb8 <__alt_data_end+0xf8009bb8>
    a45c:	d8c02217 	ldw	r3,136(sp)
    a460:	d9002417 	ldw	r4,144(sp)
    a464:	18800017 	ldw	r2,0(r3)
    a468:	18c00104 	addi	r3,r3,4
    a46c:	d8c02215 	stw	r3,136(sp)
    a470:	11000015 	stw	r4,0(r2)
    a474:	003b9a06 	br	92e0 <__alt_data_end+0xf80092e0>
    a478:	d8c02217 	ldw	r3,136(sp)
    a47c:	0029883a 	mov	r20,zero
    a480:	18800104 	addi	r2,r3,4
    a484:	1cc0000b 	ldhu	r19,0(r3)
    a488:	803db20e 	bge	r16,zero,9b54 <__alt_data_end+0xf8009b54>
    a48c:	003fb906 	br	a374 <__alt_data_end+0xf800a374>
    a490:	d9002217 	ldw	r4,136(sp)
    a494:	0029883a 	mov	r20,zero
    a498:	24c00017 	ldw	r19,0(r4)
    a49c:	21000104 	addi	r4,r4,4
    a4a0:	d9002215 	stw	r4,136(sp)
    a4a4:	003d3206 	br	9970 <__alt_data_end+0xf8009970>
    a4a8:	d8c02217 	ldw	r3,136(sp)
    a4ac:	1cc00017 	ldw	r19,0(r3)
    a4b0:	18c00104 	addi	r3,r3,4
    a4b4:	d8c02215 	stw	r3,136(sp)
    a4b8:	9829d7fa 	srai	r20,r19,31
    a4bc:	a005883a 	mov	r2,r20
    a4c0:	003d4b06 	br	99f0 <__alt_data_end+0xf80099f0>
    a4c4:	0009883a 	mov	r4,zero
    a4c8:	01400044 	movi	r5,1
    a4cc:	d811883a 	mov	r8,sp
    a4d0:	003e4f06 	br	9e10 <__alt_data_end+0xf8009e10>
    a4d4:	d8c02215 	stw	r3,136(sp)
    a4d8:	002b883a 	mov	r21,zero
    a4dc:	003db806 	br	9bc0 <__alt_data_end+0xf8009bc0>
    a4e0:	d811883a 	mov	r8,sp
    a4e4:	003e9606 	br	9f40 <__alt_data_end+0xf8009f40>
    a4e8:	01000074 	movhi	r4,1
    a4ec:	21089604 	addi	r4,r4,8792
    a4f0:	d9002315 	stw	r4,140(sp)
    a4f4:	003e6306 	br	9e84 <__alt_data_end+0xf8009e84>
    a4f8:	b0c00043 	ldbu	r3,1(r22)
    a4fc:	8c400814 	ori	r17,r17,32
    a500:	b5800044 	addi	r22,r22,1
    a504:	18c03fcc 	andi	r3,r3,255
    a508:	18c0201c 	xori	r3,r3,128
    a50c:	18ffe004 	addi	r3,r3,-128
    a510:	003b9c06 	br	9384 <__alt_data_end+0xf8009384>
    a514:	b809883a 	mov	r4,r23
    a518:	da002a15 	stw	r8,168(sp)
    a51c:	00090640 	call	9064 <strlen>
    a520:	1029883a 	mov	r20,r2
    a524:	dd401d83 	ldbu	r21,118(sp)
    a528:	df002215 	stw	fp,136(sp)
    a52c:	0021883a 	mov	r16,zero
    a530:	da002a17 	ldw	r8,168(sp)
    a534:	003c3906 	br	961c <__alt_data_end+0xf800961c>
    a538:	d9402017 	ldw	r5,128(sp)
    a53c:	d9002117 	ldw	r4,132(sp)
    a540:	d9801a04 	addi	r6,sp,104
    a544:	00090fc0 	call	90fc <__sprint_r.part.0>
    a548:	103e691e 	bne	r2,zero,9ef0 <__alt_data_end+0xf8009ef0>
    a54c:	d9001b17 	ldw	r4,108(sp)
    a550:	d8801c17 	ldw	r2,112(sp)
    a554:	d811883a 	mov	r8,sp
    a558:	21400044 	addi	r5,r4,1
    a55c:	003e2e06 	br	9e18 <__alt_data_end+0xf8009e18>
    a560:	01000074 	movhi	r4,1
    a564:	21089a04 	addi	r4,r4,8808
    a568:	d9002315 	stw	r4,140(sp)
    a56c:	d9001b17 	ldw	r4,108(sp)
    a570:	21000044 	addi	r4,r4,1
    a574:	003c5e06 	br	96f0 <__alt_data_end+0xf80096f0>
    a578:	002b883a 	mov	r21,zero
    a57c:	00800084 	movi	r2,2
    a580:	10803fcc 	andi	r2,r2,255
    a584:	01000044 	movi	r4,1
    a588:	11002b26 	beq	r2,r4,a638 <___vfiprintf_internal_r+0x1428>
    a58c:	01000084 	movi	r4,2
    a590:	11002b1e 	bne	r2,r4,a640 <___vfiprintf_internal_r+0x1430>
    a594:	1823883a 	mov	r17,r3
    a598:	003ee506 	br	a130 <__alt_data_end+0xf800a130>
    a59c:	8807883a 	mov	r3,r17
    a5a0:	00800044 	movi	r2,1
    a5a4:	003ff606 	br	a580 <__alt_data_end+0xf800a580>
    a5a8:	00800184 	movi	r2,6
    a5ac:	1400012e 	bgeu	r2,r16,a5b4 <___vfiprintf_internal_r+0x13a4>
    a5b0:	1021883a 	mov	r16,r2
    a5b4:	8029883a 	mov	r20,r16
    a5b8:	8027883a 	mov	r19,r16
    a5bc:	80002216 	blt	r16,zero,a648 <___vfiprintf_internal_r+0x1438>
    a5c0:	05c00074 	movhi	r23,1
    a5c4:	df002215 	stw	fp,136(sp)
    a5c8:	bdc83b04 	addi	r23,r23,8428
    a5cc:	003cfb06 	br	99bc <__alt_data_end+0xf80099bc>
    a5d0:	d9002217 	ldw	r4,136(sp)
    a5d4:	d9402417 	ldw	r5,144(sp)
    a5d8:	20800017 	ldw	r2,0(r4)
    a5dc:	21000104 	addi	r4,r4,4
    a5e0:	d9002215 	stw	r4,136(sp)
    a5e4:	11400015 	stw	r5,0(r2)
    a5e8:	003b3d06 	br	92e0 <__alt_data_end+0xf80092e0>
    a5ec:	01400074 	movhi	r5,1
    a5f0:	29489a04 	addi	r5,r5,8808
    a5f4:	d9402315 	stw	r5,140(sp)
    a5f8:	d9401b17 	ldw	r5,108(sp)
    a5fc:	29400044 	addi	r5,r5,1
    a600:	003e6d06 	br	9fb8 <__alt_data_end+0xf8009fb8>
    a604:	8029883a 	mov	r20,r16
    a608:	dd401d83 	ldbu	r21,118(sp)
    a60c:	df002215 	stw	fp,136(sp)
    a610:	0021883a 	mov	r16,zero
    a614:	003c0106 	br	961c <__alt_data_end+0xf800961c>
    a618:	00c00074 	movhi	r3,1
    a61c:	18c89604 	addi	r3,r3,8792
    a620:	d8c02315 	stw	r3,140(sp)
    a624:	280d883a 	mov	r6,r5
    a628:	003c6906 	br	97d0 <__alt_data_end+0xf80097d0>
    a62c:	802d883a 	mov	r22,r16
    a630:	0021883a 	mov	r16,zero
    a634:	003b5406 	br	9388 <__alt_data_end+0xf8009388>
    a638:	1823883a 	mov	r17,r3
    a63c:	003cf306 	br	9a0c <__alt_data_end+0xf8009a0c>
    a640:	1823883a 	mov	r17,r3
    a644:	003cad06 	br	98fc <__alt_data_end+0xf80098fc>
    a648:	0027883a 	mov	r19,zero
    a64c:	003fdc06 	br	a5c0 <__alt_data_end+0xf800a5c0>
    a650:	d9402217 	ldw	r5,136(sp)
    a654:	8005883a 	mov	r2,r16
    a658:	b0c00043 	ldbu	r3,1(r22)
    a65c:	2c000017 	ldw	r16,0(r5)
    a660:	29000104 	addi	r4,r5,4
    a664:	d9002215 	stw	r4,136(sp)
    a668:	102d883a 	mov	r22,r2
    a66c:	803fa50e 	bge	r16,zero,a504 <__alt_data_end+0xf800a504>
    a670:	18c03fcc 	andi	r3,r3,255
    a674:	18c0201c 	xori	r3,r3,128
    a678:	043fffc4 	movi	r16,-1
    a67c:	18ffe004 	addi	r3,r3,-128
    a680:	003b4006 	br	9384 <__alt_data_end+0xf8009384>
    a684:	d9402303 	ldbu	r5,140(sp)
    a688:	d9401d85 	stb	r5,118(sp)
    a68c:	003cae06 	br	9948 <__alt_data_end+0xf8009948>
    a690:	d8c02303 	ldbu	r3,140(sp)
    a694:	d8c01d85 	stb	r3,118(sp)
    a698:	003d1406 	br	9aec <__alt_data_end+0xf8009aec>
    a69c:	d8c02303 	ldbu	r3,140(sp)
    a6a0:	d8c01d85 	stb	r3,118(sp)
    a6a4:	003cca06 	br	99d0 <__alt_data_end+0xf80099d0>
    a6a8:	8880004c 	andi	r2,r17,1
    a6ac:	002b883a 	mov	r21,zero
    a6b0:	10000526 	beq	r2,zero,a6c8 <___vfiprintf_internal_r+0x14b8>
    a6b4:	00800c04 	movi	r2,48
    a6b8:	d88019c5 	stb	r2,103(sp)
    a6bc:	dd002817 	ldw	r20,160(sp)
    a6c0:	ddc019c4 	addi	r23,sp,103
    a6c4:	003bd506 	br	961c <__alt_data_end+0xf800961c>
    a6c8:	0029883a 	mov	r20,zero
    a6cc:	ddc01a04 	addi	r23,sp,104
    a6d0:	003bd206 	br	961c <__alt_data_end+0xf800961c>
    a6d4:	d9002303 	ldbu	r4,140(sp)
    a6d8:	d9001d85 	stb	r4,118(sp)
    a6dc:	003da606 	br	9d78 <__alt_data_end+0xf8009d78>
    a6e0:	d8c02303 	ldbu	r3,140(sp)
    a6e4:	d8c01d85 	stb	r3,118(sp)
    a6e8:	003c7606 	br	98c4 <__alt_data_end+0xf80098c4>
    a6ec:	d8c02303 	ldbu	r3,140(sp)
    a6f0:	d8c01d85 	stb	r3,118(sp)
    a6f4:	003c6506 	br	988c <__alt_data_end+0xf800988c>
    a6f8:	d9002303 	ldbu	r4,140(sp)
    a6fc:	d9001d85 	stb	r4,118(sp)
    a700:	003d3d06 	br	9bf8 <__alt_data_end+0xf8009bf8>
    a704:	d8c02303 	ldbu	r3,140(sp)
    a708:	d8c01d85 	stb	r3,118(sp)
    a70c:	003d1d06 	br	9b84 <__alt_data_end+0xf8009b84>
    a710:	d8c02303 	ldbu	r3,140(sp)
    a714:	d8c01d85 	stb	r3,118(sp)
    a718:	003d0306 	br	9b28 <__alt_data_end+0xf8009b28>

0000a71c <__vfiprintf_internal>:
    a71c:	00800074 	movhi	r2,1
    a720:	10908304 	addi	r2,r2,16908
    a724:	300f883a 	mov	r7,r6
    a728:	280d883a 	mov	r6,r5
    a72c:	200b883a 	mov	r5,r4
    a730:	11000017 	ldw	r4,0(r2)
    a734:	00092101 	jmpi	9210 <___vfiprintf_internal_r>

0000a738 <__sbprintf>:
    a738:	2880030b 	ldhu	r2,12(r5)
    a73c:	2ac01917 	ldw	r11,100(r5)
    a740:	2a80038b 	ldhu	r10,14(r5)
    a744:	2a400717 	ldw	r9,28(r5)
    a748:	2a000917 	ldw	r8,36(r5)
    a74c:	defee204 	addi	sp,sp,-1144
    a750:	00c10004 	movi	r3,1024
    a754:	dc011a15 	stw	r16,1128(sp)
    a758:	10bfff4c 	andi	r2,r2,65533
    a75c:	2821883a 	mov	r16,r5
    a760:	d8cb883a 	add	r5,sp,r3
    a764:	dc811c15 	stw	r18,1136(sp)
    a768:	dc411b15 	stw	r17,1132(sp)
    a76c:	dfc11d15 	stw	ra,1140(sp)
    a770:	2025883a 	mov	r18,r4
    a774:	d881030d 	sth	r2,1036(sp)
    a778:	dac11915 	stw	r11,1124(sp)
    a77c:	da81038d 	sth	r10,1038(sp)
    a780:	da410715 	stw	r9,1052(sp)
    a784:	da010915 	stw	r8,1060(sp)
    a788:	dec10015 	stw	sp,1024(sp)
    a78c:	dec10415 	stw	sp,1040(sp)
    a790:	d8c10215 	stw	r3,1032(sp)
    a794:	d8c10515 	stw	r3,1044(sp)
    a798:	d8010615 	stw	zero,1048(sp)
    a79c:	00092100 	call	9210 <___vfiprintf_internal_r>
    a7a0:	1023883a 	mov	r17,r2
    a7a4:	10000416 	blt	r2,zero,a7b8 <__sbprintf+0x80>
    a7a8:	d9410004 	addi	r5,sp,1024
    a7ac:	9009883a 	mov	r4,r18
    a7b0:	00061b40 	call	61b4 <_fflush_r>
    a7b4:	10000d1e 	bne	r2,zero,a7ec <__sbprintf+0xb4>
    a7b8:	d881030b 	ldhu	r2,1036(sp)
    a7bc:	1080100c 	andi	r2,r2,64
    a7c0:	10000326 	beq	r2,zero,a7d0 <__sbprintf+0x98>
    a7c4:	8080030b 	ldhu	r2,12(r16)
    a7c8:	10801014 	ori	r2,r2,64
    a7cc:	8080030d 	sth	r2,12(r16)
    a7d0:	8805883a 	mov	r2,r17
    a7d4:	dfc11d17 	ldw	ra,1140(sp)
    a7d8:	dc811c17 	ldw	r18,1136(sp)
    a7dc:	dc411b17 	ldw	r17,1132(sp)
    a7e0:	dc011a17 	ldw	r16,1128(sp)
    a7e4:	dec11e04 	addi	sp,sp,1144
    a7e8:	f800283a 	ret
    a7ec:	047fffc4 	movi	r17,-1
    a7f0:	003ff106 	br	a7b8 <__alt_data_end+0xf800a7b8>

0000a7f4 <_write_r>:
    a7f4:	defffd04 	addi	sp,sp,-12
    a7f8:	2805883a 	mov	r2,r5
    a7fc:	dc000015 	stw	r16,0(sp)
    a800:	04000074 	movhi	r16,1
    a804:	dc400115 	stw	r17,4(sp)
    a808:	300b883a 	mov	r5,r6
    a80c:	84179c04 	addi	r16,r16,24176
    a810:	2023883a 	mov	r17,r4
    a814:	380d883a 	mov	r6,r7
    a818:	1009883a 	mov	r4,r2
    a81c:	dfc00215 	stw	ra,8(sp)
    a820:	80000015 	stw	zero,0(r16)
    a824:	000f0dc0 	call	f0dc <write>
    a828:	00ffffc4 	movi	r3,-1
    a82c:	10c00526 	beq	r2,r3,a844 <_write_r+0x50>
    a830:	dfc00217 	ldw	ra,8(sp)
    a834:	dc400117 	ldw	r17,4(sp)
    a838:	dc000017 	ldw	r16,0(sp)
    a83c:	dec00304 	addi	sp,sp,12
    a840:	f800283a 	ret
    a844:	80c00017 	ldw	r3,0(r16)
    a848:	183ff926 	beq	r3,zero,a830 <__alt_data_end+0xf800a830>
    a84c:	88c00015 	stw	r3,0(r17)
    a850:	003ff706 	br	a830 <__alt_data_end+0xf800a830>

0000a854 <_close_r>:
    a854:	defffd04 	addi	sp,sp,-12
    a858:	dc000015 	stw	r16,0(sp)
    a85c:	04000074 	movhi	r16,1
    a860:	dc400115 	stw	r17,4(sp)
    a864:	84179c04 	addi	r16,r16,24176
    a868:	2023883a 	mov	r17,r4
    a86c:	2809883a 	mov	r4,r5
    a870:	dfc00215 	stw	ra,8(sp)
    a874:	80000015 	stw	zero,0(r16)
    a878:	000e7940 	call	e794 <close>
    a87c:	00ffffc4 	movi	r3,-1
    a880:	10c00526 	beq	r2,r3,a898 <_close_r+0x44>
    a884:	dfc00217 	ldw	ra,8(sp)
    a888:	dc400117 	ldw	r17,4(sp)
    a88c:	dc000017 	ldw	r16,0(sp)
    a890:	dec00304 	addi	sp,sp,12
    a894:	f800283a 	ret
    a898:	80c00017 	ldw	r3,0(r16)
    a89c:	183ff926 	beq	r3,zero,a884 <__alt_data_end+0xf800a884>
    a8a0:	88c00015 	stw	r3,0(r17)
    a8a4:	003ff706 	br	a884 <__alt_data_end+0xf800a884>

0000a8a8 <_calloc_r>:
    a8a8:	defffe04 	addi	sp,sp,-8
    a8ac:	2805883a 	mov	r2,r5
    a8b0:	dc000015 	stw	r16,0(sp)
    a8b4:	300b883a 	mov	r5,r6
    a8b8:	2021883a 	mov	r16,r4
    a8bc:	1009883a 	mov	r4,r2
    a8c0:	dfc00115 	stw	ra,4(sp)
    a8c4:	00017b40 	call	17b4 <__mulsi3>
    a8c8:	100b883a 	mov	r5,r2
    a8cc:	8009883a 	mov	r4,r16
    a8d0:	00019140 	call	1914 <_malloc_r>
    a8d4:	10002926 	beq	r2,zero,a97c <_calloc_r+0xd4>
    a8d8:	11bfff17 	ldw	r6,-4(r2)
    a8dc:	1021883a 	mov	r16,r2
    a8e0:	00bfff04 	movi	r2,-4
    a8e4:	308c703a 	and	r6,r6,r2
    a8e8:	00c00904 	movi	r3,36
    a8ec:	308d883a 	add	r6,r6,r2
    a8f0:	19801636 	bltu	r3,r6,a94c <_calloc_r+0xa4>
    a8f4:	008004c4 	movi	r2,19
    a8f8:	11800b2e 	bgeu	r2,r6,a928 <_calloc_r+0x80>
    a8fc:	80000015 	stw	zero,0(r16)
    a900:	80000115 	stw	zero,4(r16)
    a904:	008006c4 	movi	r2,27
    a908:	11801a2e 	bgeu	r2,r6,a974 <_calloc_r+0xcc>
    a90c:	80000215 	stw	zero,8(r16)
    a910:	80000315 	stw	zero,12(r16)
    a914:	30c0151e 	bne	r6,r3,a96c <_calloc_r+0xc4>
    a918:	80000415 	stw	zero,16(r16)
    a91c:	80800604 	addi	r2,r16,24
    a920:	80000515 	stw	zero,20(r16)
    a924:	00000106 	br	a92c <_calloc_r+0x84>
    a928:	8005883a 	mov	r2,r16
    a92c:	10000015 	stw	zero,0(r2)
    a930:	10000115 	stw	zero,4(r2)
    a934:	10000215 	stw	zero,8(r2)
    a938:	8005883a 	mov	r2,r16
    a93c:	dfc00117 	ldw	ra,4(sp)
    a940:	dc000017 	ldw	r16,0(sp)
    a944:	dec00204 	addi	sp,sp,8
    a948:	f800283a 	ret
    a94c:	000b883a 	mov	r5,zero
    a950:	8009883a 	mov	r4,r16
    a954:	00076940 	call	7694 <memset>
    a958:	8005883a 	mov	r2,r16
    a95c:	dfc00117 	ldw	ra,4(sp)
    a960:	dc000017 	ldw	r16,0(sp)
    a964:	dec00204 	addi	sp,sp,8
    a968:	f800283a 	ret
    a96c:	80800404 	addi	r2,r16,16
    a970:	003fee06 	br	a92c <__alt_data_end+0xf800a92c>
    a974:	80800204 	addi	r2,r16,8
    a978:	003fec06 	br	a92c <__alt_data_end+0xf800a92c>
    a97c:	0005883a 	mov	r2,zero
    a980:	003fee06 	br	a93c <__alt_data_end+0xf800a93c>

0000a984 <_fclose_r>:
    a984:	28003926 	beq	r5,zero,aa6c <_fclose_r+0xe8>
    a988:	defffc04 	addi	sp,sp,-16
    a98c:	dc400115 	stw	r17,4(sp)
    a990:	dc000015 	stw	r16,0(sp)
    a994:	dfc00315 	stw	ra,12(sp)
    a998:	dc800215 	stw	r18,8(sp)
    a99c:	2023883a 	mov	r17,r4
    a9a0:	2821883a 	mov	r16,r5
    a9a4:	20000226 	beq	r4,zero,a9b0 <_fclose_r+0x2c>
    a9a8:	20800e17 	ldw	r2,56(r4)
    a9ac:	10002726 	beq	r2,zero,aa4c <_fclose_r+0xc8>
    a9b0:	8080030f 	ldh	r2,12(r16)
    a9b4:	1000071e 	bne	r2,zero,a9d4 <_fclose_r+0x50>
    a9b8:	0005883a 	mov	r2,zero
    a9bc:	dfc00317 	ldw	ra,12(sp)
    a9c0:	dc800217 	ldw	r18,8(sp)
    a9c4:	dc400117 	ldw	r17,4(sp)
    a9c8:	dc000017 	ldw	r16,0(sp)
    a9cc:	dec00404 	addi	sp,sp,16
    a9d0:	f800283a 	ret
    a9d4:	800b883a 	mov	r5,r16
    a9d8:	8809883a 	mov	r4,r17
    a9dc:	0005f980 	call	5f98 <__sflush_r>
    a9e0:	1025883a 	mov	r18,r2
    a9e4:	80800b17 	ldw	r2,44(r16)
    a9e8:	10000426 	beq	r2,zero,a9fc <_fclose_r+0x78>
    a9ec:	81400717 	ldw	r5,28(r16)
    a9f0:	8809883a 	mov	r4,r17
    a9f4:	103ee83a 	callr	r2
    a9f8:	10001616 	blt	r2,zero,aa54 <_fclose_r+0xd0>
    a9fc:	8080030b 	ldhu	r2,12(r16)
    aa00:	1080200c 	andi	r2,r2,128
    aa04:	1000151e 	bne	r2,zero,aa5c <_fclose_r+0xd8>
    aa08:	81400c17 	ldw	r5,48(r16)
    aa0c:	28000526 	beq	r5,zero,aa24 <_fclose_r+0xa0>
    aa10:	80801004 	addi	r2,r16,64
    aa14:	28800226 	beq	r5,r2,aa20 <_fclose_r+0x9c>
    aa18:	8809883a 	mov	r4,r17
    aa1c:	00067140 	call	6714 <_free_r>
    aa20:	80000c15 	stw	zero,48(r16)
    aa24:	81401117 	ldw	r5,68(r16)
    aa28:	28000326 	beq	r5,zero,aa38 <_fclose_r+0xb4>
    aa2c:	8809883a 	mov	r4,r17
    aa30:	00067140 	call	6714 <_free_r>
    aa34:	80001115 	stw	zero,68(r16)
    aa38:	00065b00 	call	65b0 <__sfp_lock_acquire>
    aa3c:	8000030d 	sth	zero,12(r16)
    aa40:	00065b40 	call	65b4 <__sfp_lock_release>
    aa44:	9005883a 	mov	r2,r18
    aa48:	003fdc06 	br	a9bc <__alt_data_end+0xf800a9bc>
    aa4c:	00065a00 	call	65a0 <__sinit>
    aa50:	003fd706 	br	a9b0 <__alt_data_end+0xf800a9b0>
    aa54:	04bfffc4 	movi	r18,-1
    aa58:	003fe806 	br	a9fc <__alt_data_end+0xf800a9fc>
    aa5c:	81400417 	ldw	r5,16(r16)
    aa60:	8809883a 	mov	r4,r17
    aa64:	00067140 	call	6714 <_free_r>
    aa68:	003fe706 	br	aa08 <__alt_data_end+0xf800aa08>
    aa6c:	0005883a 	mov	r2,zero
    aa70:	f800283a 	ret

0000aa74 <fclose>:
    aa74:	00800074 	movhi	r2,1
    aa78:	10908304 	addi	r2,r2,16908
    aa7c:	200b883a 	mov	r5,r4
    aa80:	11000017 	ldw	r4,0(r2)
    aa84:	000a9841 	jmpi	a984 <_fclose_r>

0000aa88 <__fputwc>:
    aa88:	defff804 	addi	sp,sp,-32
    aa8c:	dcc00415 	stw	r19,16(sp)
    aa90:	dc800315 	stw	r18,12(sp)
    aa94:	dc000115 	stw	r16,4(sp)
    aa98:	dfc00715 	stw	ra,28(sp)
    aa9c:	dd400615 	stw	r21,24(sp)
    aaa0:	dd000515 	stw	r20,20(sp)
    aaa4:	dc400215 	stw	r17,8(sp)
    aaa8:	2027883a 	mov	r19,r4
    aaac:	2825883a 	mov	r18,r5
    aab0:	3021883a 	mov	r16,r6
    aab4:	00070fc0 	call	70fc <__locale_mb_cur_max>
    aab8:	00c00044 	movi	r3,1
    aabc:	10c03e26 	beq	r2,r3,abb8 <__fputwc+0x130>
    aac0:	81c01704 	addi	r7,r16,92
    aac4:	900d883a 	mov	r6,r18
    aac8:	d80b883a 	mov	r5,sp
    aacc:	9809883a 	mov	r4,r19
    aad0:	000af580 	call	af58 <_wcrtomb_r>
    aad4:	1029883a 	mov	r20,r2
    aad8:	00bfffc4 	movi	r2,-1
    aadc:	a0802026 	beq	r20,r2,ab60 <__fputwc+0xd8>
    aae0:	d9400003 	ldbu	r5,0(sp)
    aae4:	a0001c26 	beq	r20,zero,ab58 <__fputwc+0xd0>
    aae8:	0023883a 	mov	r17,zero
    aaec:	05400284 	movi	r21,10
    aaf0:	00000906 	br	ab18 <__fputwc+0x90>
    aaf4:	80800017 	ldw	r2,0(r16)
    aaf8:	11400005 	stb	r5,0(r2)
    aafc:	80c00017 	ldw	r3,0(r16)
    ab00:	18c00044 	addi	r3,r3,1
    ab04:	80c00015 	stw	r3,0(r16)
    ab08:	8c400044 	addi	r17,r17,1
    ab0c:	dc45883a 	add	r2,sp,r17
    ab10:	8d00112e 	bgeu	r17,r20,ab58 <__fputwc+0xd0>
    ab14:	11400003 	ldbu	r5,0(r2)
    ab18:	80c00217 	ldw	r3,8(r16)
    ab1c:	18ffffc4 	addi	r3,r3,-1
    ab20:	80c00215 	stw	r3,8(r16)
    ab24:	183ff30e 	bge	r3,zero,aaf4 <__alt_data_end+0xf800aaf4>
    ab28:	80800617 	ldw	r2,24(r16)
    ab2c:	18801916 	blt	r3,r2,ab94 <__fputwc+0x10c>
    ab30:	80800017 	ldw	r2,0(r16)
    ab34:	11400005 	stb	r5,0(r2)
    ab38:	80800017 	ldw	r2,0(r16)
    ab3c:	10c00003 	ldbu	r3,0(r2)
    ab40:	10800044 	addi	r2,r2,1
    ab44:	1d402326 	beq	r3,r21,abd4 <__fputwc+0x14c>
    ab48:	80800015 	stw	r2,0(r16)
    ab4c:	8c400044 	addi	r17,r17,1
    ab50:	dc45883a 	add	r2,sp,r17
    ab54:	8d3fef36 	bltu	r17,r20,ab14 <__alt_data_end+0xf800ab14>
    ab58:	9005883a 	mov	r2,r18
    ab5c:	00000406 	br	ab70 <__fputwc+0xe8>
    ab60:	80c0030b 	ldhu	r3,12(r16)
    ab64:	a005883a 	mov	r2,r20
    ab68:	18c01014 	ori	r3,r3,64
    ab6c:	80c0030d 	sth	r3,12(r16)
    ab70:	dfc00717 	ldw	ra,28(sp)
    ab74:	dd400617 	ldw	r21,24(sp)
    ab78:	dd000517 	ldw	r20,20(sp)
    ab7c:	dcc00417 	ldw	r19,16(sp)
    ab80:	dc800317 	ldw	r18,12(sp)
    ab84:	dc400217 	ldw	r17,8(sp)
    ab88:	dc000117 	ldw	r16,4(sp)
    ab8c:	dec00804 	addi	sp,sp,32
    ab90:	f800283a 	ret
    ab94:	800d883a 	mov	r6,r16
    ab98:	29403fcc 	andi	r5,r5,255
    ab9c:	9809883a 	mov	r4,r19
    aba0:	000ae000 	call	ae00 <__swbuf_r>
    aba4:	10bfffe0 	cmpeqi	r2,r2,-1
    aba8:	10803fcc 	andi	r2,r2,255
    abac:	103fd626 	beq	r2,zero,ab08 <__alt_data_end+0xf800ab08>
    abb0:	00bfffc4 	movi	r2,-1
    abb4:	003fee06 	br	ab70 <__alt_data_end+0xf800ab70>
    abb8:	90ffffc4 	addi	r3,r18,-1
    abbc:	01003f84 	movi	r4,254
    abc0:	20ffbf36 	bltu	r4,r3,aac0 <__alt_data_end+0xf800aac0>
    abc4:	900b883a 	mov	r5,r18
    abc8:	dc800005 	stb	r18,0(sp)
    abcc:	1029883a 	mov	r20,r2
    abd0:	003fc506 	br	aae8 <__alt_data_end+0xf800aae8>
    abd4:	800d883a 	mov	r6,r16
    abd8:	a80b883a 	mov	r5,r21
    abdc:	9809883a 	mov	r4,r19
    abe0:	000ae000 	call	ae00 <__swbuf_r>
    abe4:	10bfffe0 	cmpeqi	r2,r2,-1
    abe8:	003fef06 	br	aba8 <__alt_data_end+0xf800aba8>

0000abec <_fputwc_r>:
    abec:	3080030b 	ldhu	r2,12(r6)
    abf0:	10c8000c 	andi	r3,r2,8192
    abf4:	1800051e 	bne	r3,zero,ac0c <_fputwc_r+0x20>
    abf8:	30c01917 	ldw	r3,100(r6)
    abfc:	10880014 	ori	r2,r2,8192
    ac00:	3080030d 	sth	r2,12(r6)
    ac04:	18880014 	ori	r2,r3,8192
    ac08:	30801915 	stw	r2,100(r6)
    ac0c:	000aa881 	jmpi	aa88 <__fputwc>

0000ac10 <fputwc>:
    ac10:	00800074 	movhi	r2,1
    ac14:	defffc04 	addi	sp,sp,-16
    ac18:	10908304 	addi	r2,r2,16908
    ac1c:	dc000115 	stw	r16,4(sp)
    ac20:	14000017 	ldw	r16,0(r2)
    ac24:	dc400215 	stw	r17,8(sp)
    ac28:	dfc00315 	stw	ra,12(sp)
    ac2c:	2023883a 	mov	r17,r4
    ac30:	80000226 	beq	r16,zero,ac3c <fputwc+0x2c>
    ac34:	80800e17 	ldw	r2,56(r16)
    ac38:	10001026 	beq	r2,zero,ac7c <fputwc+0x6c>
    ac3c:	2880030b 	ldhu	r2,12(r5)
    ac40:	10c8000c 	andi	r3,r2,8192
    ac44:	1800051e 	bne	r3,zero,ac5c <fputwc+0x4c>
    ac48:	28c01917 	ldw	r3,100(r5)
    ac4c:	10880014 	ori	r2,r2,8192
    ac50:	2880030d 	sth	r2,12(r5)
    ac54:	18880014 	ori	r2,r3,8192
    ac58:	28801915 	stw	r2,100(r5)
    ac5c:	280d883a 	mov	r6,r5
    ac60:	8009883a 	mov	r4,r16
    ac64:	880b883a 	mov	r5,r17
    ac68:	dfc00317 	ldw	ra,12(sp)
    ac6c:	dc400217 	ldw	r17,8(sp)
    ac70:	dc000117 	ldw	r16,4(sp)
    ac74:	dec00404 	addi	sp,sp,16
    ac78:	000aa881 	jmpi	aa88 <__fputwc>
    ac7c:	8009883a 	mov	r4,r16
    ac80:	d9400015 	stw	r5,0(sp)
    ac84:	00065a00 	call	65a0 <__sinit>
    ac88:	d9400017 	ldw	r5,0(sp)
    ac8c:	003feb06 	br	ac3c <__alt_data_end+0xf800ac3c>

0000ac90 <_fstat_r>:
    ac90:	defffd04 	addi	sp,sp,-12
    ac94:	2805883a 	mov	r2,r5
    ac98:	dc000015 	stw	r16,0(sp)
    ac9c:	04000074 	movhi	r16,1
    aca0:	dc400115 	stw	r17,4(sp)
    aca4:	84179c04 	addi	r16,r16,24176
    aca8:	2023883a 	mov	r17,r4
    acac:	300b883a 	mov	r5,r6
    acb0:	1009883a 	mov	r4,r2
    acb4:	dfc00215 	stw	ra,8(sp)
    acb8:	80000015 	stw	zero,0(r16)
    acbc:	000e8d40 	call	e8d4 <fstat>
    acc0:	00ffffc4 	movi	r3,-1
    acc4:	10c00526 	beq	r2,r3,acdc <_fstat_r+0x4c>
    acc8:	dfc00217 	ldw	ra,8(sp)
    accc:	dc400117 	ldw	r17,4(sp)
    acd0:	dc000017 	ldw	r16,0(sp)
    acd4:	dec00304 	addi	sp,sp,12
    acd8:	f800283a 	ret
    acdc:	80c00017 	ldw	r3,0(r16)
    ace0:	183ff926 	beq	r3,zero,acc8 <__alt_data_end+0xf800acc8>
    ace4:	88c00015 	stw	r3,0(r17)
    ace8:	003ff706 	br	acc8 <__alt_data_end+0xf800acc8>

0000acec <_isatty_r>:
    acec:	defffd04 	addi	sp,sp,-12
    acf0:	dc000015 	stw	r16,0(sp)
    acf4:	04000074 	movhi	r16,1
    acf8:	dc400115 	stw	r17,4(sp)
    acfc:	84179c04 	addi	r16,r16,24176
    ad00:	2023883a 	mov	r17,r4
    ad04:	2809883a 	mov	r4,r5
    ad08:	dfc00215 	stw	ra,8(sp)
    ad0c:	80000015 	stw	zero,0(r16)
    ad10:	000eab80 	call	eab8 <isatty>
    ad14:	00ffffc4 	movi	r3,-1
    ad18:	10c00526 	beq	r2,r3,ad30 <_isatty_r+0x44>
    ad1c:	dfc00217 	ldw	ra,8(sp)
    ad20:	dc400117 	ldw	r17,4(sp)
    ad24:	dc000017 	ldw	r16,0(sp)
    ad28:	dec00304 	addi	sp,sp,12
    ad2c:	f800283a 	ret
    ad30:	80c00017 	ldw	r3,0(r16)
    ad34:	183ff926 	beq	r3,zero,ad1c <__alt_data_end+0xf800ad1c>
    ad38:	88c00015 	stw	r3,0(r17)
    ad3c:	003ff706 	br	ad1c <__alt_data_end+0xf800ad1c>

0000ad40 <_lseek_r>:
    ad40:	defffd04 	addi	sp,sp,-12
    ad44:	2805883a 	mov	r2,r5
    ad48:	dc000015 	stw	r16,0(sp)
    ad4c:	04000074 	movhi	r16,1
    ad50:	dc400115 	stw	r17,4(sp)
    ad54:	300b883a 	mov	r5,r6
    ad58:	84179c04 	addi	r16,r16,24176
    ad5c:	2023883a 	mov	r17,r4
    ad60:	380d883a 	mov	r6,r7
    ad64:	1009883a 	mov	r4,r2
    ad68:	dfc00215 	stw	ra,8(sp)
    ad6c:	80000015 	stw	zero,0(r16)
    ad70:	000ec8c0 	call	ec8c <lseek>
    ad74:	00ffffc4 	movi	r3,-1
    ad78:	10c00526 	beq	r2,r3,ad90 <_lseek_r+0x50>
    ad7c:	dfc00217 	ldw	ra,8(sp)
    ad80:	dc400117 	ldw	r17,4(sp)
    ad84:	dc000017 	ldw	r16,0(sp)
    ad88:	dec00304 	addi	sp,sp,12
    ad8c:	f800283a 	ret
    ad90:	80c00017 	ldw	r3,0(r16)
    ad94:	183ff926 	beq	r3,zero,ad7c <__alt_data_end+0xf800ad7c>
    ad98:	88c00015 	stw	r3,0(r17)
    ad9c:	003ff706 	br	ad7c <__alt_data_end+0xf800ad7c>

0000ada0 <_read_r>:
    ada0:	defffd04 	addi	sp,sp,-12
    ada4:	2805883a 	mov	r2,r5
    ada8:	dc000015 	stw	r16,0(sp)
    adac:	04000074 	movhi	r16,1
    adb0:	dc400115 	stw	r17,4(sp)
    adb4:	300b883a 	mov	r5,r6
    adb8:	84179c04 	addi	r16,r16,24176
    adbc:	2023883a 	mov	r17,r4
    adc0:	380d883a 	mov	r6,r7
    adc4:	1009883a 	mov	r4,r2
    adc8:	dfc00215 	stw	ra,8(sp)
    adcc:	80000015 	stw	zero,0(r16)
    add0:	000ee680 	call	ee68 <read>
    add4:	00ffffc4 	movi	r3,-1
    add8:	10c00526 	beq	r2,r3,adf0 <_read_r+0x50>
    addc:	dfc00217 	ldw	ra,8(sp)
    ade0:	dc400117 	ldw	r17,4(sp)
    ade4:	dc000017 	ldw	r16,0(sp)
    ade8:	dec00304 	addi	sp,sp,12
    adec:	f800283a 	ret
    adf0:	80c00017 	ldw	r3,0(r16)
    adf4:	183ff926 	beq	r3,zero,addc <__alt_data_end+0xf800addc>
    adf8:	88c00015 	stw	r3,0(r17)
    adfc:	003ff706 	br	addc <__alt_data_end+0xf800addc>

0000ae00 <__swbuf_r>:
    ae00:	defffb04 	addi	sp,sp,-20
    ae04:	dcc00315 	stw	r19,12(sp)
    ae08:	dc800215 	stw	r18,8(sp)
    ae0c:	dc000015 	stw	r16,0(sp)
    ae10:	dfc00415 	stw	ra,16(sp)
    ae14:	dc400115 	stw	r17,4(sp)
    ae18:	2025883a 	mov	r18,r4
    ae1c:	2827883a 	mov	r19,r5
    ae20:	3021883a 	mov	r16,r6
    ae24:	20000226 	beq	r4,zero,ae30 <__swbuf_r+0x30>
    ae28:	20800e17 	ldw	r2,56(r4)
    ae2c:	10004226 	beq	r2,zero,af38 <__swbuf_r+0x138>
    ae30:	80800617 	ldw	r2,24(r16)
    ae34:	8100030b 	ldhu	r4,12(r16)
    ae38:	80800215 	stw	r2,8(r16)
    ae3c:	2080020c 	andi	r2,r4,8
    ae40:	10003626 	beq	r2,zero,af1c <__swbuf_r+0x11c>
    ae44:	80c00417 	ldw	r3,16(r16)
    ae48:	18003426 	beq	r3,zero,af1c <__swbuf_r+0x11c>
    ae4c:	2088000c 	andi	r2,r4,8192
    ae50:	9c403fcc 	andi	r17,r19,255
    ae54:	10001a26 	beq	r2,zero,aec0 <__swbuf_r+0xc0>
    ae58:	80800017 	ldw	r2,0(r16)
    ae5c:	81000517 	ldw	r4,20(r16)
    ae60:	10c7c83a 	sub	r3,r2,r3
    ae64:	1900200e 	bge	r3,r4,aee8 <__swbuf_r+0xe8>
    ae68:	18c00044 	addi	r3,r3,1
    ae6c:	81000217 	ldw	r4,8(r16)
    ae70:	11400044 	addi	r5,r2,1
    ae74:	81400015 	stw	r5,0(r16)
    ae78:	213fffc4 	addi	r4,r4,-1
    ae7c:	81000215 	stw	r4,8(r16)
    ae80:	14c00005 	stb	r19,0(r2)
    ae84:	80800517 	ldw	r2,20(r16)
    ae88:	10c01e26 	beq	r2,r3,af04 <__swbuf_r+0x104>
    ae8c:	8080030b 	ldhu	r2,12(r16)
    ae90:	1080004c 	andi	r2,r2,1
    ae94:	10000226 	beq	r2,zero,aea0 <__swbuf_r+0xa0>
    ae98:	00800284 	movi	r2,10
    ae9c:	88801926 	beq	r17,r2,af04 <__swbuf_r+0x104>
    aea0:	8805883a 	mov	r2,r17
    aea4:	dfc00417 	ldw	ra,16(sp)
    aea8:	dcc00317 	ldw	r19,12(sp)
    aeac:	dc800217 	ldw	r18,8(sp)
    aeb0:	dc400117 	ldw	r17,4(sp)
    aeb4:	dc000017 	ldw	r16,0(sp)
    aeb8:	dec00504 	addi	sp,sp,20
    aebc:	f800283a 	ret
    aec0:	81401917 	ldw	r5,100(r16)
    aec4:	00b7ffc4 	movi	r2,-8193
    aec8:	21080014 	ori	r4,r4,8192
    aecc:	2884703a 	and	r2,r5,r2
    aed0:	80801915 	stw	r2,100(r16)
    aed4:	80800017 	ldw	r2,0(r16)
    aed8:	8100030d 	sth	r4,12(r16)
    aedc:	81000517 	ldw	r4,20(r16)
    aee0:	10c7c83a 	sub	r3,r2,r3
    aee4:	193fe016 	blt	r3,r4,ae68 <__alt_data_end+0xf800ae68>
    aee8:	800b883a 	mov	r5,r16
    aeec:	9009883a 	mov	r4,r18
    aef0:	00061b40 	call	61b4 <_fflush_r>
    aef4:	1000071e 	bne	r2,zero,af14 <__swbuf_r+0x114>
    aef8:	80800017 	ldw	r2,0(r16)
    aefc:	00c00044 	movi	r3,1
    af00:	003fda06 	br	ae6c <__alt_data_end+0xf800ae6c>
    af04:	800b883a 	mov	r5,r16
    af08:	9009883a 	mov	r4,r18
    af0c:	00061b40 	call	61b4 <_fflush_r>
    af10:	103fe326 	beq	r2,zero,aea0 <__alt_data_end+0xf800aea0>
    af14:	00bfffc4 	movi	r2,-1
    af18:	003fe206 	br	aea4 <__alt_data_end+0xf800aea4>
    af1c:	800b883a 	mov	r5,r16
    af20:	9009883a 	mov	r4,r18
    af24:	00045940 	call	4594 <__swsetup_r>
    af28:	103ffa1e 	bne	r2,zero,af14 <__alt_data_end+0xf800af14>
    af2c:	8100030b 	ldhu	r4,12(r16)
    af30:	80c00417 	ldw	r3,16(r16)
    af34:	003fc506 	br	ae4c <__alt_data_end+0xf800ae4c>
    af38:	00065a00 	call	65a0 <__sinit>
    af3c:	003fbc06 	br	ae30 <__alt_data_end+0xf800ae30>

0000af40 <__swbuf>:
    af40:	00800074 	movhi	r2,1
    af44:	10908304 	addi	r2,r2,16908
    af48:	280d883a 	mov	r6,r5
    af4c:	200b883a 	mov	r5,r4
    af50:	11000017 	ldw	r4,0(r2)
    af54:	000ae001 	jmpi	ae00 <__swbuf_r>

0000af58 <_wcrtomb_r>:
    af58:	defff604 	addi	sp,sp,-40
    af5c:	00800074 	movhi	r2,1
    af60:	dc800815 	stw	r18,32(sp)
    af64:	dc400715 	stw	r17,28(sp)
    af68:	dc000615 	stw	r16,24(sp)
    af6c:	10908704 	addi	r2,r2,16924
    af70:	dfc00915 	stw	ra,36(sp)
    af74:	2021883a 	mov	r16,r4
    af78:	3823883a 	mov	r17,r7
    af7c:	14800017 	ldw	r18,0(r2)
    af80:	28001426 	beq	r5,zero,afd4 <_wcrtomb_r+0x7c>
    af84:	d9400415 	stw	r5,16(sp)
    af88:	d9800515 	stw	r6,20(sp)
    af8c:	00070f00 	call	70f0 <__locale_charset>
    af90:	d9800517 	ldw	r6,20(sp)
    af94:	d9400417 	ldw	r5,16(sp)
    af98:	100f883a 	mov	r7,r2
    af9c:	dc400015 	stw	r17,0(sp)
    afa0:	8009883a 	mov	r4,r16
    afa4:	903ee83a 	callr	r18
    afa8:	00ffffc4 	movi	r3,-1
    afac:	10c0031e 	bne	r2,r3,afbc <_wcrtomb_r+0x64>
    afb0:	88000015 	stw	zero,0(r17)
    afb4:	00c02284 	movi	r3,138
    afb8:	80c00015 	stw	r3,0(r16)
    afbc:	dfc00917 	ldw	ra,36(sp)
    afc0:	dc800817 	ldw	r18,32(sp)
    afc4:	dc400717 	ldw	r17,28(sp)
    afc8:	dc000617 	ldw	r16,24(sp)
    afcc:	dec00a04 	addi	sp,sp,40
    afd0:	f800283a 	ret
    afd4:	00070f00 	call	70f0 <__locale_charset>
    afd8:	100f883a 	mov	r7,r2
    afdc:	dc400015 	stw	r17,0(sp)
    afe0:	000d883a 	mov	r6,zero
    afe4:	d9400104 	addi	r5,sp,4
    afe8:	8009883a 	mov	r4,r16
    afec:	903ee83a 	callr	r18
    aff0:	003fed06 	br	afa8 <__alt_data_end+0xf800afa8>

0000aff4 <wcrtomb>:
    aff4:	defff604 	addi	sp,sp,-40
    aff8:	00800074 	movhi	r2,1
    affc:	dc800615 	stw	r18,24(sp)
    b000:	dc400515 	stw	r17,20(sp)
    b004:	10908304 	addi	r2,r2,16908
    b008:	dfc00915 	stw	ra,36(sp)
    b00c:	dd000815 	stw	r20,32(sp)
    b010:	dcc00715 	stw	r19,28(sp)
    b014:	dc000415 	stw	r16,16(sp)
    b018:	3025883a 	mov	r18,r6
    b01c:	14400017 	ldw	r17,0(r2)
    b020:	20001926 	beq	r4,zero,b088 <wcrtomb+0x94>
    b024:	00800074 	movhi	r2,1
    b028:	10908704 	addi	r2,r2,16924
    b02c:	15000017 	ldw	r20,0(r2)
    b030:	2021883a 	mov	r16,r4
    b034:	2827883a 	mov	r19,r5
    b038:	00070f00 	call	70f0 <__locale_charset>
    b03c:	100f883a 	mov	r7,r2
    b040:	dc800015 	stw	r18,0(sp)
    b044:	980d883a 	mov	r6,r19
    b048:	800b883a 	mov	r5,r16
    b04c:	8809883a 	mov	r4,r17
    b050:	a03ee83a 	callr	r20
    b054:	00ffffc4 	movi	r3,-1
    b058:	10c0031e 	bne	r2,r3,b068 <wcrtomb+0x74>
    b05c:	90000015 	stw	zero,0(r18)
    b060:	00c02284 	movi	r3,138
    b064:	88c00015 	stw	r3,0(r17)
    b068:	dfc00917 	ldw	ra,36(sp)
    b06c:	dd000817 	ldw	r20,32(sp)
    b070:	dcc00717 	ldw	r19,28(sp)
    b074:	dc800617 	ldw	r18,24(sp)
    b078:	dc400517 	ldw	r17,20(sp)
    b07c:	dc000417 	ldw	r16,16(sp)
    b080:	dec00a04 	addi	sp,sp,40
    b084:	f800283a 	ret
    b088:	00800074 	movhi	r2,1
    b08c:	10908704 	addi	r2,r2,16924
    b090:	14000017 	ldw	r16,0(r2)
    b094:	00070f00 	call	70f0 <__locale_charset>
    b098:	100f883a 	mov	r7,r2
    b09c:	dc800015 	stw	r18,0(sp)
    b0a0:	000d883a 	mov	r6,zero
    b0a4:	d9400104 	addi	r5,sp,4
    b0a8:	8809883a 	mov	r4,r17
    b0ac:	803ee83a 	callr	r16
    b0b0:	003fe806 	br	b054 <__alt_data_end+0xf800b054>

0000b0b4 <__ascii_wctomb>:
    b0b4:	28000526 	beq	r5,zero,b0cc <__ascii_wctomb+0x18>
    b0b8:	00803fc4 	movi	r2,255
    b0bc:	11800536 	bltu	r2,r6,b0d4 <__ascii_wctomb+0x20>
    b0c0:	29800005 	stb	r6,0(r5)
    b0c4:	00800044 	movi	r2,1
    b0c8:	f800283a 	ret
    b0cc:	0005883a 	mov	r2,zero
    b0d0:	f800283a 	ret
    b0d4:	00802284 	movi	r2,138
    b0d8:	20800015 	stw	r2,0(r4)
    b0dc:	00bfffc4 	movi	r2,-1
    b0e0:	f800283a 	ret

0000b0e4 <_wctomb_r>:
    b0e4:	00800074 	movhi	r2,1
    b0e8:	defff904 	addi	sp,sp,-28
    b0ec:	10908704 	addi	r2,r2,16924
    b0f0:	dfc00615 	stw	ra,24(sp)
    b0f4:	dc400515 	stw	r17,20(sp)
    b0f8:	dc000415 	stw	r16,16(sp)
    b0fc:	3823883a 	mov	r17,r7
    b100:	14000017 	ldw	r16,0(r2)
    b104:	d9000115 	stw	r4,4(sp)
    b108:	d9400215 	stw	r5,8(sp)
    b10c:	d9800315 	stw	r6,12(sp)
    b110:	00070f00 	call	70f0 <__locale_charset>
    b114:	d9800317 	ldw	r6,12(sp)
    b118:	d9400217 	ldw	r5,8(sp)
    b11c:	d9000117 	ldw	r4,4(sp)
    b120:	100f883a 	mov	r7,r2
    b124:	dc400015 	stw	r17,0(sp)
    b128:	803ee83a 	callr	r16
    b12c:	dfc00617 	ldw	ra,24(sp)
    b130:	dc400517 	ldw	r17,20(sp)
    b134:	dc000417 	ldw	r16,16(sp)
    b138:	dec00704 	addi	sp,sp,28
    b13c:	f800283a 	ret

0000b140 <__udivdi3>:
    b140:	defff404 	addi	sp,sp,-48
    b144:	dcc00515 	stw	r19,20(sp)
    b148:	dc000215 	stw	r16,8(sp)
    b14c:	dfc00b15 	stw	ra,44(sp)
    b150:	df000a15 	stw	fp,40(sp)
    b154:	ddc00915 	stw	r23,36(sp)
    b158:	dd800815 	stw	r22,32(sp)
    b15c:	dd400715 	stw	r21,28(sp)
    b160:	dd000615 	stw	r20,24(sp)
    b164:	dc800415 	stw	r18,16(sp)
    b168:	dc400315 	stw	r17,12(sp)
    b16c:	2027883a 	mov	r19,r4
    b170:	2821883a 	mov	r16,r5
    b174:	3800461e 	bne	r7,zero,b290 <__udivdi3+0x150>
    b178:	3023883a 	mov	r17,r6
    b17c:	2025883a 	mov	r18,r4
    b180:	2980572e 	bgeu	r5,r6,b2e0 <__udivdi3+0x1a0>
    b184:	00bfffd4 	movui	r2,65535
    b188:	282d883a 	mov	r22,r5
    b18c:	1180b236 	bltu	r2,r6,b458 <__udivdi3+0x318>
    b190:	00803fc4 	movi	r2,255
    b194:	1185803a 	cmpltu	r2,r2,r6
    b198:	100490fa 	slli	r2,r2,3
    b19c:	3086d83a 	srl	r3,r6,r2
    b1a0:	01000074 	movhi	r4,1
    b1a4:	21089e04 	addi	r4,r4,8824
    b1a8:	20c7883a 	add	r3,r4,r3
    b1ac:	18c00003 	ldbu	r3,0(r3)
    b1b0:	1885883a 	add	r2,r3,r2
    b1b4:	00c00804 	movi	r3,32
    b1b8:	1887c83a 	sub	r3,r3,r2
    b1bc:	18000526 	beq	r3,zero,b1d4 <__udivdi3+0x94>
    b1c0:	80e0983a 	sll	r16,r16,r3
    b1c4:	9884d83a 	srl	r2,r19,r2
    b1c8:	30e2983a 	sll	r17,r6,r3
    b1cc:	98e4983a 	sll	r18,r19,r3
    b1d0:	142cb03a 	or	r22,r2,r16
    b1d4:	882ad43a 	srli	r21,r17,16
    b1d8:	b009883a 	mov	r4,r22
    b1dc:	8d3fffcc 	andi	r20,r17,65535
    b1e0:	a80b883a 	mov	r5,r21
    b1e4:	000be5c0 	call	be5c <__umodsi3>
    b1e8:	b009883a 	mov	r4,r22
    b1ec:	a80b883a 	mov	r5,r21
    b1f0:	1027883a 	mov	r19,r2
    b1f4:	000bdf80 	call	bdf8 <__udivsi3>
    b1f8:	100b883a 	mov	r5,r2
    b1fc:	a009883a 	mov	r4,r20
    b200:	102d883a 	mov	r22,r2
    b204:	00017b40 	call	17b4 <__mulsi3>
    b208:	9826943a 	slli	r19,r19,16
    b20c:	9006d43a 	srli	r3,r18,16
    b210:	1cc6b03a 	or	r3,r3,r19
    b214:	1880052e 	bgeu	r3,r2,b22c <__udivdi3+0xec>
    b218:	1c47883a 	add	r3,r3,r17
    b21c:	b13fffc4 	addi	r4,r22,-1
    b220:	1c400136 	bltu	r3,r17,b228 <__udivdi3+0xe8>
    b224:	18814236 	bltu	r3,r2,b730 <__udivdi3+0x5f0>
    b228:	202d883a 	mov	r22,r4
    b22c:	18a1c83a 	sub	r16,r3,r2
    b230:	8009883a 	mov	r4,r16
    b234:	a80b883a 	mov	r5,r21
    b238:	000be5c0 	call	be5c <__umodsi3>
    b23c:	1027883a 	mov	r19,r2
    b240:	8009883a 	mov	r4,r16
    b244:	a80b883a 	mov	r5,r21
    b248:	9826943a 	slli	r19,r19,16
    b24c:	000bdf80 	call	bdf8 <__udivsi3>
    b250:	100b883a 	mov	r5,r2
    b254:	a009883a 	mov	r4,r20
    b258:	94bfffcc 	andi	r18,r18,65535
    b25c:	1021883a 	mov	r16,r2
    b260:	94e4b03a 	or	r18,r18,r19
    b264:	00017b40 	call	17b4 <__mulsi3>
    b268:	9080052e 	bgeu	r18,r2,b280 <__udivdi3+0x140>
    b26c:	8ca5883a 	add	r18,r17,r18
    b270:	80ffffc4 	addi	r3,r16,-1
    b274:	94410c36 	bltu	r18,r17,b6a8 <__udivdi3+0x568>
    b278:	90810b2e 	bgeu	r18,r2,b6a8 <__udivdi3+0x568>
    b27c:	843fff84 	addi	r16,r16,-2
    b280:	b004943a 	slli	r2,r22,16
    b284:	0007883a 	mov	r3,zero
    b288:	1404b03a 	or	r2,r2,r16
    b28c:	00005e06 	br	b408 <__udivdi3+0x2c8>
    b290:	29c05b36 	bltu	r5,r7,b400 <__udivdi3+0x2c0>
    b294:	00bfffd4 	movui	r2,65535
    b298:	11c0672e 	bgeu	r2,r7,b438 <__udivdi3+0x2f8>
    b29c:	00804034 	movhi	r2,256
    b2a0:	10bfffc4 	addi	r2,r2,-1
    b2a4:	11c10a36 	bltu	r2,r7,b6d0 <__udivdi3+0x590>
    b2a8:	00800404 	movi	r2,16
    b2ac:	3886d83a 	srl	r3,r7,r2
    b2b0:	01000074 	movhi	r4,1
    b2b4:	21089e04 	addi	r4,r4,8824
    b2b8:	20c7883a 	add	r3,r4,r3
    b2bc:	18c00003 	ldbu	r3,0(r3)
    b2c0:	05c00804 	movi	r23,32
    b2c4:	1885883a 	add	r2,r3,r2
    b2c8:	b8afc83a 	sub	r23,r23,r2
    b2cc:	b800671e 	bne	r23,zero,b46c <__udivdi3+0x32c>
    b2d0:	3c010536 	bltu	r7,r16,b6e8 <__udivdi3+0x5a8>
    b2d4:	9985403a 	cmpgeu	r2,r19,r6
    b2d8:	0007883a 	mov	r3,zero
    b2dc:	00004a06 	br	b408 <__udivdi3+0x2c8>
    b2e0:	3000041e 	bne	r6,zero,b2f4 <__udivdi3+0x1b4>
    b2e4:	000b883a 	mov	r5,zero
    b2e8:	01000044 	movi	r4,1
    b2ec:	000bdf80 	call	bdf8 <__udivsi3>
    b2f0:	1023883a 	mov	r17,r2
    b2f4:	00bfffd4 	movui	r2,65535
    b2f8:	1440532e 	bgeu	r2,r17,b448 <__udivdi3+0x308>
    b2fc:	00804034 	movhi	r2,256
    b300:	10bfffc4 	addi	r2,r2,-1
    b304:	1440f436 	bltu	r2,r17,b6d8 <__udivdi3+0x598>
    b308:	00800404 	movi	r2,16
    b30c:	8886d83a 	srl	r3,r17,r2
    b310:	01000074 	movhi	r4,1
    b314:	21089e04 	addi	r4,r4,8824
    b318:	20c7883a 	add	r3,r4,r3
    b31c:	18c00003 	ldbu	r3,0(r3)
    b320:	1885883a 	add	r2,r3,r2
    b324:	00c00804 	movi	r3,32
    b328:	1887c83a 	sub	r3,r3,r2
    b32c:	1800a51e 	bne	r3,zero,b5c4 <__udivdi3+0x484>
    b330:	882ad43a 	srli	r21,r17,16
    b334:	8461c83a 	sub	r16,r16,r17
    b338:	8d3fffcc 	andi	r20,r17,65535
    b33c:	00c00044 	movi	r3,1
    b340:	a80b883a 	mov	r5,r21
    b344:	8009883a 	mov	r4,r16
    b348:	d8c00115 	stw	r3,4(sp)
    b34c:	000be5c0 	call	be5c <__umodsi3>
    b350:	a80b883a 	mov	r5,r21
    b354:	8009883a 	mov	r4,r16
    b358:	1027883a 	mov	r19,r2
    b35c:	000bdf80 	call	bdf8 <__udivsi3>
    b360:	a00b883a 	mov	r5,r20
    b364:	1009883a 	mov	r4,r2
    b368:	102d883a 	mov	r22,r2
    b36c:	00017b40 	call	17b4 <__mulsi3>
    b370:	9826943a 	slli	r19,r19,16
    b374:	900ed43a 	srli	r7,r18,16
    b378:	d8c00117 	ldw	r3,4(sp)
    b37c:	3cceb03a 	or	r7,r7,r19
    b380:	3880052e 	bgeu	r7,r2,b398 <__udivdi3+0x258>
    b384:	3c4f883a 	add	r7,r7,r17
    b388:	b13fffc4 	addi	r4,r22,-1
    b38c:	3c400136 	bltu	r7,r17,b394 <__udivdi3+0x254>
    b390:	3880e436 	bltu	r7,r2,b724 <__udivdi3+0x5e4>
    b394:	202d883a 	mov	r22,r4
    b398:	38a1c83a 	sub	r16,r7,r2
    b39c:	8009883a 	mov	r4,r16
    b3a0:	a80b883a 	mov	r5,r21
    b3a4:	d8c00115 	stw	r3,4(sp)
    b3a8:	000be5c0 	call	be5c <__umodsi3>
    b3ac:	1027883a 	mov	r19,r2
    b3b0:	8009883a 	mov	r4,r16
    b3b4:	a80b883a 	mov	r5,r21
    b3b8:	9826943a 	slli	r19,r19,16
    b3bc:	000bdf80 	call	bdf8 <__udivsi3>
    b3c0:	a00b883a 	mov	r5,r20
    b3c4:	1009883a 	mov	r4,r2
    b3c8:	94bfffcc 	andi	r18,r18,65535
    b3cc:	1021883a 	mov	r16,r2
    b3d0:	94e4b03a 	or	r18,r18,r19
    b3d4:	00017b40 	call	17b4 <__mulsi3>
    b3d8:	d8c00117 	ldw	r3,4(sp)
    b3dc:	9080052e 	bgeu	r18,r2,b3f4 <__udivdi3+0x2b4>
    b3e0:	8ca5883a 	add	r18,r17,r18
    b3e4:	813fffc4 	addi	r4,r16,-1
    b3e8:	9440ad36 	bltu	r18,r17,b6a0 <__udivdi3+0x560>
    b3ec:	9080ac2e 	bgeu	r18,r2,b6a0 <__udivdi3+0x560>
    b3f0:	843fff84 	addi	r16,r16,-2
    b3f4:	b004943a 	slli	r2,r22,16
    b3f8:	1404b03a 	or	r2,r2,r16
    b3fc:	00000206 	br	b408 <__udivdi3+0x2c8>
    b400:	0007883a 	mov	r3,zero
    b404:	0005883a 	mov	r2,zero
    b408:	dfc00b17 	ldw	ra,44(sp)
    b40c:	df000a17 	ldw	fp,40(sp)
    b410:	ddc00917 	ldw	r23,36(sp)
    b414:	dd800817 	ldw	r22,32(sp)
    b418:	dd400717 	ldw	r21,28(sp)
    b41c:	dd000617 	ldw	r20,24(sp)
    b420:	dcc00517 	ldw	r19,20(sp)
    b424:	dc800417 	ldw	r18,16(sp)
    b428:	dc400317 	ldw	r17,12(sp)
    b42c:	dc000217 	ldw	r16,8(sp)
    b430:	dec00c04 	addi	sp,sp,48
    b434:	f800283a 	ret
    b438:	00803fc4 	movi	r2,255
    b43c:	11c5803a 	cmpltu	r2,r2,r7
    b440:	100490fa 	slli	r2,r2,3
    b444:	003f9906 	br	b2ac <__alt_data_end+0xf800b2ac>
    b448:	00803fc4 	movi	r2,255
    b44c:	1445803a 	cmpltu	r2,r2,r17
    b450:	100490fa 	slli	r2,r2,3
    b454:	003fad06 	br	b30c <__alt_data_end+0xf800b30c>
    b458:	00804034 	movhi	r2,256
    b45c:	10bfffc4 	addi	r2,r2,-1
    b460:	11809f36 	bltu	r2,r6,b6e0 <__udivdi3+0x5a0>
    b464:	00800404 	movi	r2,16
    b468:	003f4c06 	br	b19c <__alt_data_end+0xf800b19c>
    b46c:	3dce983a 	sll	r7,r7,r23
    b470:	30b8d83a 	srl	fp,r6,r2
    b474:	80a2d83a 	srl	r17,r16,r2
    b478:	35cc983a 	sll	r6,r6,r23
    b47c:	3f38b03a 	or	fp,r7,fp
    b480:	e024d43a 	srli	r18,fp,16
    b484:	9884d83a 	srl	r2,r19,r2
    b488:	85e0983a 	sll	r16,r16,r23
    b48c:	8809883a 	mov	r4,r17
    b490:	900b883a 	mov	r5,r18
    b494:	d9800015 	stw	r6,0(sp)
    b498:	1420b03a 	or	r16,r2,r16
    b49c:	000be5c0 	call	be5c <__umodsi3>
    b4a0:	900b883a 	mov	r5,r18
    b4a4:	8809883a 	mov	r4,r17
    b4a8:	1029883a 	mov	r20,r2
    b4ac:	e5bfffcc 	andi	r22,fp,65535
    b4b0:	000bdf80 	call	bdf8 <__udivsi3>
    b4b4:	100b883a 	mov	r5,r2
    b4b8:	b009883a 	mov	r4,r22
    b4bc:	102b883a 	mov	r21,r2
    b4c0:	00017b40 	call	17b4 <__mulsi3>
    b4c4:	a028943a 	slli	r20,r20,16
    b4c8:	8006d43a 	srli	r3,r16,16
    b4cc:	1d06b03a 	or	r3,r3,r20
    b4d0:	1880042e 	bgeu	r3,r2,b4e4 <__udivdi3+0x3a4>
    b4d4:	1f07883a 	add	r3,r3,fp
    b4d8:	a93fffc4 	addi	r4,r21,-1
    b4dc:	1f00892e 	bgeu	r3,fp,b704 <__udivdi3+0x5c4>
    b4e0:	202b883a 	mov	r21,r4
    b4e4:	18a3c83a 	sub	r17,r3,r2
    b4e8:	8809883a 	mov	r4,r17
    b4ec:	900b883a 	mov	r5,r18
    b4f0:	000be5c0 	call	be5c <__umodsi3>
    b4f4:	1029883a 	mov	r20,r2
    b4f8:	8809883a 	mov	r4,r17
    b4fc:	900b883a 	mov	r5,r18
    b500:	a028943a 	slli	r20,r20,16
    b504:	000bdf80 	call	bdf8 <__udivsi3>
    b508:	100b883a 	mov	r5,r2
    b50c:	b009883a 	mov	r4,r22
    b510:	843fffcc 	andi	r16,r16,65535
    b514:	1023883a 	mov	r17,r2
    b518:	8520b03a 	or	r16,r16,r20
    b51c:	00017b40 	call	17b4 <__mulsi3>
    b520:	8080042e 	bgeu	r16,r2,b534 <__udivdi3+0x3f4>
    b524:	8721883a 	add	r16,r16,fp
    b528:	88ffffc4 	addi	r3,r17,-1
    b52c:	8700712e 	bgeu	r16,fp,b6f4 <__udivdi3+0x5b4>
    b530:	1823883a 	mov	r17,r3
    b534:	a80e943a 	slli	r7,r21,16
    b538:	d8c00017 	ldw	r3,0(sp)
    b53c:	80a1c83a 	sub	r16,r16,r2
    b540:	3c64b03a 	or	r18,r7,r17
    b544:	1d3fffcc 	andi	r20,r3,65535
    b548:	9022d43a 	srli	r17,r18,16
    b54c:	95bfffcc 	andi	r22,r18,65535
    b550:	a00b883a 	mov	r5,r20
    b554:	b009883a 	mov	r4,r22
    b558:	182ad43a 	srli	r21,r3,16
    b55c:	00017b40 	call	17b4 <__mulsi3>
    b560:	a00b883a 	mov	r5,r20
    b564:	8809883a 	mov	r4,r17
    b568:	1039883a 	mov	fp,r2
    b56c:	00017b40 	call	17b4 <__mulsi3>
    b570:	8809883a 	mov	r4,r17
    b574:	a80b883a 	mov	r5,r21
    b578:	1029883a 	mov	r20,r2
    b57c:	00017b40 	call	17b4 <__mulsi3>
    b580:	a80b883a 	mov	r5,r21
    b584:	b009883a 	mov	r4,r22
    b588:	1023883a 	mov	r17,r2
    b58c:	00017b40 	call	17b4 <__mulsi3>
    b590:	e006d43a 	srli	r3,fp,16
    b594:	1505883a 	add	r2,r2,r20
    b598:	1887883a 	add	r3,r3,r2
    b59c:	1d00022e 	bgeu	r3,r20,b5a8 <__udivdi3+0x468>
    b5a0:	00800074 	movhi	r2,1
    b5a4:	88a3883a 	add	r17,r17,r2
    b5a8:	1804d43a 	srli	r2,r3,16
    b5ac:	1463883a 	add	r17,r2,r17
    b5b0:	84404436 	bltu	r16,r17,b6c4 <__udivdi3+0x584>
    b5b4:	84403e26 	beq	r16,r17,b6b0 <__udivdi3+0x570>
    b5b8:	9005883a 	mov	r2,r18
    b5bc:	0007883a 	mov	r3,zero
    b5c0:	003f9106 	br	b408 <__alt_data_end+0xf800b408>
    b5c4:	88e2983a 	sll	r17,r17,r3
    b5c8:	80aed83a 	srl	r23,r16,r2
    b5cc:	80e0983a 	sll	r16,r16,r3
    b5d0:	882ad43a 	srli	r21,r17,16
    b5d4:	9884d83a 	srl	r2,r19,r2
    b5d8:	b809883a 	mov	r4,r23
    b5dc:	a80b883a 	mov	r5,r21
    b5e0:	98e4983a 	sll	r18,r19,r3
    b5e4:	142cb03a 	or	r22,r2,r16
    b5e8:	000be5c0 	call	be5c <__umodsi3>
    b5ec:	b809883a 	mov	r4,r23
    b5f0:	a80b883a 	mov	r5,r21
    b5f4:	1027883a 	mov	r19,r2
    b5f8:	8d3fffcc 	andi	r20,r17,65535
    b5fc:	000bdf80 	call	bdf8 <__udivsi3>
    b600:	a009883a 	mov	r4,r20
    b604:	100b883a 	mov	r5,r2
    b608:	102f883a 	mov	r23,r2
    b60c:	00017b40 	call	17b4 <__mulsi3>
    b610:	9826943a 	slli	r19,r19,16
    b614:	b008d43a 	srli	r4,r22,16
    b618:	24c8b03a 	or	r4,r4,r19
    b61c:	2080062e 	bgeu	r4,r2,b638 <__udivdi3+0x4f8>
    b620:	2449883a 	add	r4,r4,r17
    b624:	b8ffffc4 	addi	r3,r23,-1
    b628:	24403c36 	bltu	r4,r17,b71c <__udivdi3+0x5dc>
    b62c:	20803b2e 	bgeu	r4,r2,b71c <__udivdi3+0x5dc>
    b630:	bdffff84 	addi	r23,r23,-2
    b634:	2449883a 	add	r4,r4,r17
    b638:	20a1c83a 	sub	r16,r4,r2
    b63c:	a80b883a 	mov	r5,r21
    b640:	8009883a 	mov	r4,r16
    b644:	000be5c0 	call	be5c <__umodsi3>
    b648:	a80b883a 	mov	r5,r21
    b64c:	8009883a 	mov	r4,r16
    b650:	1027883a 	mov	r19,r2
    b654:	000bdf80 	call	bdf8 <__udivsi3>
    b658:	a009883a 	mov	r4,r20
    b65c:	100b883a 	mov	r5,r2
    b660:	9826943a 	slli	r19,r19,16
    b664:	1039883a 	mov	fp,r2
    b668:	00017b40 	call	17b4 <__mulsi3>
    b66c:	b13fffcc 	andi	r4,r22,65535
    b670:	24c8b03a 	or	r4,r4,r19
    b674:	2080062e 	bgeu	r4,r2,b690 <__udivdi3+0x550>
    b678:	2449883a 	add	r4,r4,r17
    b67c:	e0ffffc4 	addi	r3,fp,-1
    b680:	24402436 	bltu	r4,r17,b714 <__udivdi3+0x5d4>
    b684:	2080232e 	bgeu	r4,r2,b714 <__udivdi3+0x5d4>
    b688:	e73fff84 	addi	fp,fp,-2
    b68c:	2449883a 	add	r4,r4,r17
    b690:	b82e943a 	slli	r23,r23,16
    b694:	20a1c83a 	sub	r16,r4,r2
    b698:	bf06b03a 	or	r3,r23,fp
    b69c:	003f2806 	br	b340 <__alt_data_end+0xf800b340>
    b6a0:	2021883a 	mov	r16,r4
    b6a4:	003f5306 	br	b3f4 <__alt_data_end+0xf800b3f4>
    b6a8:	1821883a 	mov	r16,r3
    b6ac:	003ef406 	br	b280 <__alt_data_end+0xf800b280>
    b6b0:	1806943a 	slli	r3,r3,16
    b6b4:	9de6983a 	sll	r19,r19,r23
    b6b8:	e73fffcc 	andi	fp,fp,65535
    b6bc:	1f07883a 	add	r3,r3,fp
    b6c0:	98ffbd2e 	bgeu	r19,r3,b5b8 <__alt_data_end+0xf800b5b8>
    b6c4:	90bfffc4 	addi	r2,r18,-1
    b6c8:	0007883a 	mov	r3,zero
    b6cc:	003f4e06 	br	b408 <__alt_data_end+0xf800b408>
    b6d0:	00800604 	movi	r2,24
    b6d4:	003ef506 	br	b2ac <__alt_data_end+0xf800b2ac>
    b6d8:	00800604 	movi	r2,24
    b6dc:	003f0b06 	br	b30c <__alt_data_end+0xf800b30c>
    b6e0:	00800604 	movi	r2,24
    b6e4:	003ead06 	br	b19c <__alt_data_end+0xf800b19c>
    b6e8:	0007883a 	mov	r3,zero
    b6ec:	00800044 	movi	r2,1
    b6f0:	003f4506 	br	b408 <__alt_data_end+0xf800b408>
    b6f4:	80bf8e2e 	bgeu	r16,r2,b530 <__alt_data_end+0xf800b530>
    b6f8:	8c7fff84 	addi	r17,r17,-2
    b6fc:	8721883a 	add	r16,r16,fp
    b700:	003f8c06 	br	b534 <__alt_data_end+0xf800b534>
    b704:	18bf762e 	bgeu	r3,r2,b4e0 <__alt_data_end+0xf800b4e0>
    b708:	ad7fff84 	addi	r21,r21,-2
    b70c:	1f07883a 	add	r3,r3,fp
    b710:	003f7406 	br	b4e4 <__alt_data_end+0xf800b4e4>
    b714:	1839883a 	mov	fp,r3
    b718:	003fdd06 	br	b690 <__alt_data_end+0xf800b690>
    b71c:	182f883a 	mov	r23,r3
    b720:	003fc506 	br	b638 <__alt_data_end+0xf800b638>
    b724:	b5bfff84 	addi	r22,r22,-2
    b728:	3c4f883a 	add	r7,r7,r17
    b72c:	003f1a06 	br	b398 <__alt_data_end+0xf800b398>
    b730:	b5bfff84 	addi	r22,r22,-2
    b734:	1c47883a 	add	r3,r3,r17
    b738:	003ebc06 	br	b22c <__alt_data_end+0xf800b22c>

0000b73c <__umoddi3>:
    b73c:	defff304 	addi	sp,sp,-52
    b740:	df000b15 	stw	fp,44(sp)
    b744:	dc400415 	stw	r17,16(sp)
    b748:	dc000315 	stw	r16,12(sp)
    b74c:	dfc00c15 	stw	ra,48(sp)
    b750:	ddc00a15 	stw	r23,40(sp)
    b754:	dd800915 	stw	r22,36(sp)
    b758:	dd400815 	stw	r21,32(sp)
    b75c:	dd000715 	stw	r20,28(sp)
    b760:	dcc00615 	stw	r19,24(sp)
    b764:	dc800515 	stw	r18,20(sp)
    b768:	2021883a 	mov	r16,r4
    b76c:	2823883a 	mov	r17,r5
    b770:	2839883a 	mov	fp,r5
    b774:	3800401e 	bne	r7,zero,b878 <__umoddi3+0x13c>
    b778:	3027883a 	mov	r19,r6
    b77c:	2029883a 	mov	r20,r4
    b780:	2980552e 	bgeu	r5,r6,b8d8 <__umoddi3+0x19c>
    b784:	00bfffd4 	movui	r2,65535
    b788:	1180a236 	bltu	r2,r6,ba14 <__umoddi3+0x2d8>
    b78c:	01003fc4 	movi	r4,255
    b790:	2189803a 	cmpltu	r4,r4,r6
    b794:	200890fa 	slli	r4,r4,3
    b798:	3104d83a 	srl	r2,r6,r4
    b79c:	00c00074 	movhi	r3,1
    b7a0:	18c89e04 	addi	r3,r3,8824
    b7a4:	1885883a 	add	r2,r3,r2
    b7a8:	10c00003 	ldbu	r3,0(r2)
    b7ac:	00800804 	movi	r2,32
    b7b0:	1909883a 	add	r4,r3,r4
    b7b4:	1125c83a 	sub	r18,r2,r4
    b7b8:	90000526 	beq	r18,zero,b7d0 <__umoddi3+0x94>
    b7bc:	8ca2983a 	sll	r17,r17,r18
    b7c0:	8108d83a 	srl	r4,r16,r4
    b7c4:	34a6983a 	sll	r19,r6,r18
    b7c8:	84a8983a 	sll	r20,r16,r18
    b7cc:	2478b03a 	or	fp,r4,r17
    b7d0:	982cd43a 	srli	r22,r19,16
    b7d4:	e009883a 	mov	r4,fp
    b7d8:	9dffffcc 	andi	r23,r19,65535
    b7dc:	b00b883a 	mov	r5,r22
    b7e0:	000be5c0 	call	be5c <__umodsi3>
    b7e4:	b00b883a 	mov	r5,r22
    b7e8:	e009883a 	mov	r4,fp
    b7ec:	102b883a 	mov	r21,r2
    b7f0:	000bdf80 	call	bdf8 <__udivsi3>
    b7f4:	100b883a 	mov	r5,r2
    b7f8:	b809883a 	mov	r4,r23
    b7fc:	00017b40 	call	17b4 <__mulsi3>
    b800:	a82a943a 	slli	r21,r21,16
    b804:	a006d43a 	srli	r3,r20,16
    b808:	1d46b03a 	or	r3,r3,r21
    b80c:	1880032e 	bgeu	r3,r2,b81c <__umoddi3+0xe0>
    b810:	1cc7883a 	add	r3,r3,r19
    b814:	1cc00136 	bltu	r3,r19,b81c <__umoddi3+0xe0>
    b818:	18813136 	bltu	r3,r2,bce0 <__umoddi3+0x5a4>
    b81c:	18a1c83a 	sub	r16,r3,r2
    b820:	b00b883a 	mov	r5,r22
    b824:	8009883a 	mov	r4,r16
    b828:	000be5c0 	call	be5c <__umodsi3>
    b82c:	b00b883a 	mov	r5,r22
    b830:	8009883a 	mov	r4,r16
    b834:	1023883a 	mov	r17,r2
    b838:	000bdf80 	call	bdf8 <__udivsi3>
    b83c:	100b883a 	mov	r5,r2
    b840:	b809883a 	mov	r4,r23
    b844:	8822943a 	slli	r17,r17,16
    b848:	00017b40 	call	17b4 <__mulsi3>
    b84c:	a0ffffcc 	andi	r3,r20,65535
    b850:	1c46b03a 	or	r3,r3,r17
    b854:	1880042e 	bgeu	r3,r2,b868 <__umoddi3+0x12c>
    b858:	1cc7883a 	add	r3,r3,r19
    b85c:	1cc00236 	bltu	r3,r19,b868 <__umoddi3+0x12c>
    b860:	1880012e 	bgeu	r3,r2,b868 <__umoddi3+0x12c>
    b864:	1cc7883a 	add	r3,r3,r19
    b868:	1885c83a 	sub	r2,r3,r2
    b86c:	1484d83a 	srl	r2,r2,r18
    b870:	0007883a 	mov	r3,zero
    b874:	00005306 	br	b9c4 <__umoddi3+0x288>
    b878:	29c05036 	bltu	r5,r7,b9bc <__umoddi3+0x280>
    b87c:	00bfffd4 	movui	r2,65535
    b880:	11c05c2e 	bgeu	r2,r7,b9f4 <__umoddi3+0x2b8>
    b884:	00804034 	movhi	r2,256
    b888:	10bfffc4 	addi	r2,r2,-1
    b88c:	11c10636 	bltu	r2,r7,bca8 <__umoddi3+0x56c>
    b890:	01000404 	movi	r4,16
    b894:	3904d83a 	srl	r2,r7,r4
    b898:	00c00074 	movhi	r3,1
    b89c:	18c89e04 	addi	r3,r3,8824
    b8a0:	1885883a 	add	r2,r3,r2
    b8a4:	14c00003 	ldbu	r19,0(r2)
    b8a8:	00c00804 	movi	r3,32
    b8ac:	9927883a 	add	r19,r19,r4
    b8b0:	1ce9c83a 	sub	r20,r3,r19
    b8b4:	a0005c1e 	bne	r20,zero,ba28 <__umoddi3+0x2ec>
    b8b8:	3c400136 	bltu	r7,r17,b8c0 <__umoddi3+0x184>
    b8bc:	81810a36 	bltu	r16,r6,bce8 <__umoddi3+0x5ac>
    b8c0:	8185c83a 	sub	r2,r16,r6
    b8c4:	89e3c83a 	sub	r17,r17,r7
    b8c8:	8089803a 	cmpltu	r4,r16,r2
    b8cc:	8939c83a 	sub	fp,r17,r4
    b8d0:	e007883a 	mov	r3,fp
    b8d4:	00003b06 	br	b9c4 <__umoddi3+0x288>
    b8d8:	3000041e 	bne	r6,zero,b8ec <__umoddi3+0x1b0>
    b8dc:	000b883a 	mov	r5,zero
    b8e0:	01000044 	movi	r4,1
    b8e4:	000bdf80 	call	bdf8 <__udivsi3>
    b8e8:	1027883a 	mov	r19,r2
    b8ec:	00bfffd4 	movui	r2,65535
    b8f0:	14c0442e 	bgeu	r2,r19,ba04 <__umoddi3+0x2c8>
    b8f4:	00804034 	movhi	r2,256
    b8f8:	10bfffc4 	addi	r2,r2,-1
    b8fc:	14c0ec36 	bltu	r2,r19,bcb0 <__umoddi3+0x574>
    b900:	00800404 	movi	r2,16
    b904:	9886d83a 	srl	r3,r19,r2
    b908:	01000074 	movhi	r4,1
    b90c:	21089e04 	addi	r4,r4,8824
    b910:	20c7883a 	add	r3,r4,r3
    b914:	18c00003 	ldbu	r3,0(r3)
    b918:	1887883a 	add	r3,r3,r2
    b91c:	00800804 	movi	r2,32
    b920:	10e5c83a 	sub	r18,r2,r3
    b924:	9000ab1e 	bne	r18,zero,bbd4 <__umoddi3+0x498>
    b928:	982cd43a 	srli	r22,r19,16
    b92c:	8ce3c83a 	sub	r17,r17,r19
    b930:	9dffffcc 	andi	r23,r19,65535
    b934:	b00b883a 	mov	r5,r22
    b938:	8809883a 	mov	r4,r17
    b93c:	000be5c0 	call	be5c <__umodsi3>
    b940:	b00b883a 	mov	r5,r22
    b944:	8809883a 	mov	r4,r17
    b948:	102b883a 	mov	r21,r2
    b94c:	000bdf80 	call	bdf8 <__udivsi3>
    b950:	b80b883a 	mov	r5,r23
    b954:	1009883a 	mov	r4,r2
    b958:	00017b40 	call	17b4 <__mulsi3>
    b95c:	a82a943a 	slli	r21,r21,16
    b960:	a006d43a 	srli	r3,r20,16
    b964:	1d46b03a 	or	r3,r3,r21
    b968:	1880042e 	bgeu	r3,r2,b97c <__umoddi3+0x240>
    b96c:	1cc7883a 	add	r3,r3,r19
    b970:	1cc00236 	bltu	r3,r19,b97c <__umoddi3+0x240>
    b974:	1880012e 	bgeu	r3,r2,b97c <__umoddi3+0x240>
    b978:	1cc7883a 	add	r3,r3,r19
    b97c:	18a1c83a 	sub	r16,r3,r2
    b980:	b00b883a 	mov	r5,r22
    b984:	8009883a 	mov	r4,r16
    b988:	000be5c0 	call	be5c <__umodsi3>
    b98c:	1023883a 	mov	r17,r2
    b990:	b00b883a 	mov	r5,r22
    b994:	8009883a 	mov	r4,r16
    b998:	000bdf80 	call	bdf8 <__udivsi3>
    b99c:	8822943a 	slli	r17,r17,16
    b9a0:	b80b883a 	mov	r5,r23
    b9a4:	1009883a 	mov	r4,r2
    b9a8:	00017b40 	call	17b4 <__mulsi3>
    b9ac:	a53fffcc 	andi	r20,r20,65535
    b9b0:	a446b03a 	or	r3,r20,r17
    b9b4:	18bfac2e 	bgeu	r3,r2,b868 <__alt_data_end+0xf800b868>
    b9b8:	003fa706 	br	b858 <__alt_data_end+0xf800b858>
    b9bc:	2005883a 	mov	r2,r4
    b9c0:	2807883a 	mov	r3,r5
    b9c4:	dfc00c17 	ldw	ra,48(sp)
    b9c8:	df000b17 	ldw	fp,44(sp)
    b9cc:	ddc00a17 	ldw	r23,40(sp)
    b9d0:	dd800917 	ldw	r22,36(sp)
    b9d4:	dd400817 	ldw	r21,32(sp)
    b9d8:	dd000717 	ldw	r20,28(sp)
    b9dc:	dcc00617 	ldw	r19,24(sp)
    b9e0:	dc800517 	ldw	r18,20(sp)
    b9e4:	dc400417 	ldw	r17,16(sp)
    b9e8:	dc000317 	ldw	r16,12(sp)
    b9ec:	dec00d04 	addi	sp,sp,52
    b9f0:	f800283a 	ret
    b9f4:	04c03fc4 	movi	r19,255
    b9f8:	99c9803a 	cmpltu	r4,r19,r7
    b9fc:	200890fa 	slli	r4,r4,3
    ba00:	003fa406 	br	b894 <__alt_data_end+0xf800b894>
    ba04:	00803fc4 	movi	r2,255
    ba08:	14c5803a 	cmpltu	r2,r2,r19
    ba0c:	100490fa 	slli	r2,r2,3
    ba10:	003fbc06 	br	b904 <__alt_data_end+0xf800b904>
    ba14:	00804034 	movhi	r2,256
    ba18:	10bfffc4 	addi	r2,r2,-1
    ba1c:	1180a636 	bltu	r2,r6,bcb8 <__umoddi3+0x57c>
    ba20:	01000404 	movi	r4,16
    ba24:	003f5c06 	br	b798 <__alt_data_end+0xf800b798>
    ba28:	3d0e983a 	sll	r7,r7,r20
    ba2c:	34ead83a 	srl	r21,r6,r19
    ba30:	8cc6d83a 	srl	r3,r17,r19
    ba34:	8d10983a 	sll	r8,r17,r20
    ba38:	3d6ab03a 	or	r21,r7,r21
    ba3c:	a82cd43a 	srli	r22,r21,16
    ba40:	84e2d83a 	srl	r17,r16,r19
    ba44:	1809883a 	mov	r4,r3
    ba48:	b00b883a 	mov	r5,r22
    ba4c:	8a22b03a 	or	r17,r17,r8
    ba50:	3524983a 	sll	r18,r6,r20
    ba54:	dc400015 	stw	r17,0(sp)
    ba58:	d8c00115 	stw	r3,4(sp)
    ba5c:	000be5c0 	call	be5c <__umodsi3>
    ba60:	d8c00117 	ldw	r3,4(sp)
    ba64:	b00b883a 	mov	r5,r22
    ba68:	1039883a 	mov	fp,r2
    ba6c:	1809883a 	mov	r4,r3
    ba70:	000bdf80 	call	bdf8 <__udivsi3>
    ba74:	adffffcc 	andi	r23,r21,65535
    ba78:	100b883a 	mov	r5,r2
    ba7c:	b809883a 	mov	r4,r23
    ba80:	1023883a 	mov	r17,r2
    ba84:	00017b40 	call	17b4 <__mulsi3>
    ba88:	d9400017 	ldw	r5,0(sp)
    ba8c:	e008943a 	slli	r4,fp,16
    ba90:	8520983a 	sll	r16,r16,r20
    ba94:	2806d43a 	srli	r3,r5,16
    ba98:	1906b03a 	or	r3,r3,r4
    ba9c:	1880042e 	bgeu	r3,r2,bab0 <__umoddi3+0x374>
    baa0:	1d47883a 	add	r3,r3,r21
    baa4:	893fffc4 	addi	r4,r17,-1
    baa8:	1d40892e 	bgeu	r3,r21,bcd0 <__umoddi3+0x594>
    baac:	2023883a 	mov	r17,r4
    bab0:	18b9c83a 	sub	fp,r3,r2
    bab4:	b00b883a 	mov	r5,r22
    bab8:	e009883a 	mov	r4,fp
    babc:	000be5c0 	call	be5c <__umodsi3>
    bac0:	b00b883a 	mov	r5,r22
    bac4:	e009883a 	mov	r4,fp
    bac8:	d8800215 	stw	r2,8(sp)
    bacc:	000bdf80 	call	bdf8 <__udivsi3>
    bad0:	100b883a 	mov	r5,r2
    bad4:	b809883a 	mov	r4,r23
    bad8:	102d883a 	mov	r22,r2
    badc:	00017b40 	call	17b4 <__mulsi3>
    bae0:	d9800217 	ldw	r6,8(sp)
    bae4:	d8c00017 	ldw	r3,0(sp)
    bae8:	300c943a 	slli	r6,r6,16
    baec:	1a3fffcc 	andi	r8,r3,65535
    baf0:	4190b03a 	or	r8,r8,r6
    baf4:	4080042e 	bgeu	r8,r2,bb08 <__umoddi3+0x3cc>
    baf8:	4551883a 	add	r8,r8,r21
    bafc:	b0ffffc4 	addi	r3,r22,-1
    bb00:	45406f2e 	bgeu	r8,r21,bcc0 <__umoddi3+0x584>
    bb04:	182d883a 	mov	r22,r3
    bb08:	880e943a 	slli	r7,r17,16
    bb0c:	9006d43a 	srli	r3,r18,16
    bb10:	91bfffcc 	andi	r6,r18,65535
    bb14:	3dacb03a 	or	r22,r7,r22
    bb18:	b02ed43a 	srli	r23,r22,16
    bb1c:	b5bfffcc 	andi	r22,r22,65535
    bb20:	300b883a 	mov	r5,r6
    bb24:	b009883a 	mov	r4,r22
    bb28:	40a3c83a 	sub	r17,r8,r2
    bb2c:	d8c00115 	stw	r3,4(sp)
    bb30:	d9800215 	stw	r6,8(sp)
    bb34:	00017b40 	call	17b4 <__mulsi3>
    bb38:	d9800217 	ldw	r6,8(sp)
    bb3c:	b809883a 	mov	r4,r23
    bb40:	1039883a 	mov	fp,r2
    bb44:	300b883a 	mov	r5,r6
    bb48:	00017b40 	call	17b4 <__mulsi3>
    bb4c:	d8c00117 	ldw	r3,4(sp)
    bb50:	b809883a 	mov	r4,r23
    bb54:	d8800215 	stw	r2,8(sp)
    bb58:	180b883a 	mov	r5,r3
    bb5c:	00017b40 	call	17b4 <__mulsi3>
    bb60:	d8c00117 	ldw	r3,4(sp)
    bb64:	b009883a 	mov	r4,r22
    bb68:	102f883a 	mov	r23,r2
    bb6c:	180b883a 	mov	r5,r3
    bb70:	00017b40 	call	17b4 <__mulsi3>
    bb74:	d9800217 	ldw	r6,8(sp)
    bb78:	e006d43a 	srli	r3,fp,16
    bb7c:	1185883a 	add	r2,r2,r6
    bb80:	1885883a 	add	r2,r3,r2
    bb84:	1180022e 	bgeu	r2,r6,bb90 <__umoddi3+0x454>
    bb88:	00c00074 	movhi	r3,1
    bb8c:	b8ef883a 	add	r23,r23,r3
    bb90:	1006d43a 	srli	r3,r2,16
    bb94:	1004943a 	slli	r2,r2,16
    bb98:	e73fffcc 	andi	fp,fp,65535
    bb9c:	1dc7883a 	add	r3,r3,r23
    bba0:	1739883a 	add	fp,r2,fp
    bba4:	88c03a36 	bltu	r17,r3,bc90 <__umoddi3+0x554>
    bba8:	88c05126 	beq	r17,r3,bcf0 <__umoddi3+0x5b4>
    bbac:	88c9c83a 	sub	r4,r17,r3
    bbb0:	e00f883a 	mov	r7,fp
    bbb4:	81cfc83a 	sub	r7,r16,r7
    bbb8:	81c7803a 	cmpltu	r3,r16,r7
    bbbc:	20c7c83a 	sub	r3,r4,r3
    bbc0:	1cc4983a 	sll	r2,r3,r19
    bbc4:	3d0ed83a 	srl	r7,r7,r20
    bbc8:	1d06d83a 	srl	r3,r3,r20
    bbcc:	11c4b03a 	or	r2,r2,r7
    bbd0:	003f7c06 	br	b9c4 <__alt_data_end+0xf800b9c4>
    bbd4:	9ca6983a 	sll	r19,r19,r18
    bbd8:	88f8d83a 	srl	fp,r17,r3
    bbdc:	80c4d83a 	srl	r2,r16,r3
    bbe0:	982cd43a 	srli	r22,r19,16
    bbe4:	8ca2983a 	sll	r17,r17,r18
    bbe8:	e009883a 	mov	r4,fp
    bbec:	b00b883a 	mov	r5,r22
    bbf0:	146ab03a 	or	r21,r2,r17
    bbf4:	000be5c0 	call	be5c <__umodsi3>
    bbf8:	b00b883a 	mov	r5,r22
    bbfc:	e009883a 	mov	r4,fp
    bc00:	1029883a 	mov	r20,r2
    bc04:	9dffffcc 	andi	r23,r19,65535
    bc08:	000bdf80 	call	bdf8 <__udivsi3>
    bc0c:	b809883a 	mov	r4,r23
    bc10:	100b883a 	mov	r5,r2
    bc14:	00017b40 	call	17b4 <__mulsi3>
    bc18:	a008943a 	slli	r4,r20,16
    bc1c:	a806d43a 	srli	r3,r21,16
    bc20:	84a8983a 	sll	r20,r16,r18
    bc24:	1906b03a 	or	r3,r3,r4
    bc28:	1880042e 	bgeu	r3,r2,bc3c <__umoddi3+0x500>
    bc2c:	1cc7883a 	add	r3,r3,r19
    bc30:	1cc00236 	bltu	r3,r19,bc3c <__umoddi3+0x500>
    bc34:	1880012e 	bgeu	r3,r2,bc3c <__umoddi3+0x500>
    bc38:	1cc7883a 	add	r3,r3,r19
    bc3c:	18a3c83a 	sub	r17,r3,r2
    bc40:	b00b883a 	mov	r5,r22
    bc44:	8809883a 	mov	r4,r17
    bc48:	000be5c0 	call	be5c <__umodsi3>
    bc4c:	b00b883a 	mov	r5,r22
    bc50:	8809883a 	mov	r4,r17
    bc54:	1021883a 	mov	r16,r2
    bc58:	000bdf80 	call	bdf8 <__udivsi3>
    bc5c:	100b883a 	mov	r5,r2
    bc60:	b809883a 	mov	r4,r23
    bc64:	8020943a 	slli	r16,r16,16
    bc68:	00017b40 	call	17b4 <__mulsi3>
    bc6c:	a8ffffcc 	andi	r3,r21,65535
    bc70:	1c06b03a 	or	r3,r3,r16
    bc74:	1880042e 	bgeu	r3,r2,bc88 <__umoddi3+0x54c>
    bc78:	1cc7883a 	add	r3,r3,r19
    bc7c:	1cc00236 	bltu	r3,r19,bc88 <__umoddi3+0x54c>
    bc80:	1880012e 	bgeu	r3,r2,bc88 <__umoddi3+0x54c>
    bc84:	1cc7883a 	add	r3,r3,r19
    bc88:	18a3c83a 	sub	r17,r3,r2
    bc8c:	003f2906 	br	b934 <__alt_data_end+0xf800b934>
    bc90:	e48fc83a 	sub	r7,fp,r18
    bc94:	1d49c83a 	sub	r4,r3,r21
    bc98:	e1f9803a 	cmpltu	fp,fp,r7
    bc9c:	2739c83a 	sub	fp,r4,fp
    bca0:	8f09c83a 	sub	r4,r17,fp
    bca4:	003fc306 	br	bbb4 <__alt_data_end+0xf800bbb4>
    bca8:	01000604 	movi	r4,24
    bcac:	003ef906 	br	b894 <__alt_data_end+0xf800b894>
    bcb0:	00800604 	movi	r2,24
    bcb4:	003f1306 	br	b904 <__alt_data_end+0xf800b904>
    bcb8:	01000604 	movi	r4,24
    bcbc:	003eb606 	br	b798 <__alt_data_end+0xf800b798>
    bcc0:	40bf902e 	bgeu	r8,r2,bb04 <__alt_data_end+0xf800bb04>
    bcc4:	b5bfff84 	addi	r22,r22,-2
    bcc8:	4551883a 	add	r8,r8,r21
    bccc:	003f8e06 	br	bb08 <__alt_data_end+0xf800bb08>
    bcd0:	18bf762e 	bgeu	r3,r2,baac <__alt_data_end+0xf800baac>
    bcd4:	8c7fff84 	addi	r17,r17,-2
    bcd8:	1d47883a 	add	r3,r3,r21
    bcdc:	003f7406 	br	bab0 <__alt_data_end+0xf800bab0>
    bce0:	1cc7883a 	add	r3,r3,r19
    bce4:	003ecd06 	br	b81c <__alt_data_end+0xf800b81c>
    bce8:	8005883a 	mov	r2,r16
    bcec:	003ef806 	br	b8d0 <__alt_data_end+0xf800b8d0>
    bcf0:	873fe736 	bltu	r16,fp,bc90 <__alt_data_end+0xf800bc90>
    bcf4:	e00f883a 	mov	r7,fp
    bcf8:	0009883a 	mov	r4,zero
    bcfc:	003fad06 	br	bbb4 <__alt_data_end+0xf800bbb4>

0000bd00 <__divsi3>:
    bd00:	20001b16 	blt	r4,zero,bd70 <__divsi3+0x70>
    bd04:	000f883a 	mov	r7,zero
    bd08:	28001616 	blt	r5,zero,bd64 <__divsi3+0x64>
    bd0c:	200d883a 	mov	r6,r4
    bd10:	29001a2e 	bgeu	r5,r4,bd7c <__divsi3+0x7c>
    bd14:	00800804 	movi	r2,32
    bd18:	00c00044 	movi	r3,1
    bd1c:	00000106 	br	bd24 <__divsi3+0x24>
    bd20:	10000d26 	beq	r2,zero,bd58 <__divsi3+0x58>
    bd24:	294b883a 	add	r5,r5,r5
    bd28:	10bfffc4 	addi	r2,r2,-1
    bd2c:	18c7883a 	add	r3,r3,r3
    bd30:	293ffb36 	bltu	r5,r4,bd20 <__alt_data_end+0xf800bd20>
    bd34:	0005883a 	mov	r2,zero
    bd38:	18000726 	beq	r3,zero,bd58 <__divsi3+0x58>
    bd3c:	0005883a 	mov	r2,zero
    bd40:	31400236 	bltu	r6,r5,bd4c <__divsi3+0x4c>
    bd44:	314dc83a 	sub	r6,r6,r5
    bd48:	10c4b03a 	or	r2,r2,r3
    bd4c:	1806d07a 	srli	r3,r3,1
    bd50:	280ad07a 	srli	r5,r5,1
    bd54:	183ffa1e 	bne	r3,zero,bd40 <__alt_data_end+0xf800bd40>
    bd58:	38000126 	beq	r7,zero,bd60 <__divsi3+0x60>
    bd5c:	0085c83a 	sub	r2,zero,r2
    bd60:	f800283a 	ret
    bd64:	014bc83a 	sub	r5,zero,r5
    bd68:	39c0005c 	xori	r7,r7,1
    bd6c:	003fe706 	br	bd0c <__alt_data_end+0xf800bd0c>
    bd70:	0109c83a 	sub	r4,zero,r4
    bd74:	01c00044 	movi	r7,1
    bd78:	003fe306 	br	bd08 <__alt_data_end+0xf800bd08>
    bd7c:	00c00044 	movi	r3,1
    bd80:	003fee06 	br	bd3c <__alt_data_end+0xf800bd3c>

0000bd84 <__modsi3>:
    bd84:	20001716 	blt	r4,zero,bde4 <__modsi3+0x60>
    bd88:	000f883a 	mov	r7,zero
    bd8c:	2005883a 	mov	r2,r4
    bd90:	28001216 	blt	r5,zero,bddc <__modsi3+0x58>
    bd94:	2900162e 	bgeu	r5,r4,bdf0 <__modsi3+0x6c>
    bd98:	01800804 	movi	r6,32
    bd9c:	00c00044 	movi	r3,1
    bda0:	00000106 	br	bda8 <__modsi3+0x24>
    bda4:	30000a26 	beq	r6,zero,bdd0 <__modsi3+0x4c>
    bda8:	294b883a 	add	r5,r5,r5
    bdac:	31bfffc4 	addi	r6,r6,-1
    bdb0:	18c7883a 	add	r3,r3,r3
    bdb4:	293ffb36 	bltu	r5,r4,bda4 <__alt_data_end+0xf800bda4>
    bdb8:	18000526 	beq	r3,zero,bdd0 <__modsi3+0x4c>
    bdbc:	1806d07a 	srli	r3,r3,1
    bdc0:	11400136 	bltu	r2,r5,bdc8 <__modsi3+0x44>
    bdc4:	1145c83a 	sub	r2,r2,r5
    bdc8:	280ad07a 	srli	r5,r5,1
    bdcc:	183ffb1e 	bne	r3,zero,bdbc <__alt_data_end+0xf800bdbc>
    bdd0:	38000126 	beq	r7,zero,bdd8 <__modsi3+0x54>
    bdd4:	0085c83a 	sub	r2,zero,r2
    bdd8:	f800283a 	ret
    bddc:	014bc83a 	sub	r5,zero,r5
    bde0:	003fec06 	br	bd94 <__alt_data_end+0xf800bd94>
    bde4:	0109c83a 	sub	r4,zero,r4
    bde8:	01c00044 	movi	r7,1
    bdec:	003fe706 	br	bd8c <__alt_data_end+0xf800bd8c>
    bdf0:	00c00044 	movi	r3,1
    bdf4:	003ff106 	br	bdbc <__alt_data_end+0xf800bdbc>

0000bdf8 <__udivsi3>:
    bdf8:	200d883a 	mov	r6,r4
    bdfc:	2900152e 	bgeu	r5,r4,be54 <__udivsi3+0x5c>
    be00:	28001416 	blt	r5,zero,be54 <__udivsi3+0x5c>
    be04:	00800804 	movi	r2,32
    be08:	00c00044 	movi	r3,1
    be0c:	00000206 	br	be18 <__udivsi3+0x20>
    be10:	10000e26 	beq	r2,zero,be4c <__udivsi3+0x54>
    be14:	28000516 	blt	r5,zero,be2c <__udivsi3+0x34>
    be18:	294b883a 	add	r5,r5,r5
    be1c:	10bfffc4 	addi	r2,r2,-1
    be20:	18c7883a 	add	r3,r3,r3
    be24:	293ffa36 	bltu	r5,r4,be10 <__alt_data_end+0xf800be10>
    be28:	18000826 	beq	r3,zero,be4c <__udivsi3+0x54>
    be2c:	0005883a 	mov	r2,zero
    be30:	31400236 	bltu	r6,r5,be3c <__udivsi3+0x44>
    be34:	314dc83a 	sub	r6,r6,r5
    be38:	10c4b03a 	or	r2,r2,r3
    be3c:	1806d07a 	srli	r3,r3,1
    be40:	280ad07a 	srli	r5,r5,1
    be44:	183ffa1e 	bne	r3,zero,be30 <__alt_data_end+0xf800be30>
    be48:	f800283a 	ret
    be4c:	0005883a 	mov	r2,zero
    be50:	f800283a 	ret
    be54:	00c00044 	movi	r3,1
    be58:	003ff406 	br	be2c <__alt_data_end+0xf800be2c>

0000be5c <__umodsi3>:
    be5c:	2005883a 	mov	r2,r4
    be60:	2900122e 	bgeu	r5,r4,beac <__umodsi3+0x50>
    be64:	28001116 	blt	r5,zero,beac <__umodsi3+0x50>
    be68:	01800804 	movi	r6,32
    be6c:	00c00044 	movi	r3,1
    be70:	00000206 	br	be7c <__umodsi3+0x20>
    be74:	30000c26 	beq	r6,zero,bea8 <__umodsi3+0x4c>
    be78:	28000516 	blt	r5,zero,be90 <__umodsi3+0x34>
    be7c:	294b883a 	add	r5,r5,r5
    be80:	31bfffc4 	addi	r6,r6,-1
    be84:	18c7883a 	add	r3,r3,r3
    be88:	293ffa36 	bltu	r5,r4,be74 <__alt_data_end+0xf800be74>
    be8c:	18000626 	beq	r3,zero,bea8 <__umodsi3+0x4c>
    be90:	1806d07a 	srli	r3,r3,1
    be94:	11400136 	bltu	r2,r5,be9c <__umodsi3+0x40>
    be98:	1145c83a 	sub	r2,r2,r5
    be9c:	280ad07a 	srli	r5,r5,1
    bea0:	183ffb1e 	bne	r3,zero,be90 <__alt_data_end+0xf800be90>
    bea4:	f800283a 	ret
    bea8:	f800283a 	ret
    beac:	00c00044 	movi	r3,1
    beb0:	003ff706 	br	be90 <__alt_data_end+0xf800be90>

0000beb4 <__adddf3>:
    beb4:	02c00434 	movhi	r11,16
    beb8:	5affffc4 	addi	r11,r11,-1
    bebc:	2806d7fa 	srli	r3,r5,31
    bec0:	2ad4703a 	and	r10,r5,r11
    bec4:	3ad2703a 	and	r9,r7,r11
    bec8:	3804d53a 	srli	r2,r7,20
    becc:	3018d77a 	srli	r12,r6,29
    bed0:	280ad53a 	srli	r5,r5,20
    bed4:	501490fa 	slli	r10,r10,3
    bed8:	2010d77a 	srli	r8,r4,29
    bedc:	481290fa 	slli	r9,r9,3
    bee0:	380ed7fa 	srli	r7,r7,31
    bee4:	defffb04 	addi	sp,sp,-20
    bee8:	dc800215 	stw	r18,8(sp)
    beec:	dc400115 	stw	r17,4(sp)
    bef0:	dc000015 	stw	r16,0(sp)
    bef4:	dfc00415 	stw	ra,16(sp)
    bef8:	dcc00315 	stw	r19,12(sp)
    befc:	1c803fcc 	andi	r18,r3,255
    bf00:	2c01ffcc 	andi	r16,r5,2047
    bf04:	5210b03a 	or	r8,r10,r8
    bf08:	202290fa 	slli	r17,r4,3
    bf0c:	1081ffcc 	andi	r2,r2,2047
    bf10:	4b12b03a 	or	r9,r9,r12
    bf14:	300c90fa 	slli	r6,r6,3
    bf18:	91c07526 	beq	r18,r7,c0f0 <__adddf3+0x23c>
    bf1c:	8087c83a 	sub	r3,r16,r2
    bf20:	00c0ab0e 	bge	zero,r3,c1d0 <__adddf3+0x31c>
    bf24:	10002a1e 	bne	r2,zero,bfd0 <__adddf3+0x11c>
    bf28:	4984b03a 	or	r2,r9,r6
    bf2c:	1000961e 	bne	r2,zero,c188 <__adddf3+0x2d4>
    bf30:	888001cc 	andi	r2,r17,7
    bf34:	10000726 	beq	r2,zero,bf54 <__adddf3+0xa0>
    bf38:	888003cc 	andi	r2,r17,15
    bf3c:	00c00104 	movi	r3,4
    bf40:	10c00426 	beq	r2,r3,bf54 <__adddf3+0xa0>
    bf44:	88c7883a 	add	r3,r17,r3
    bf48:	1c63803a 	cmpltu	r17,r3,r17
    bf4c:	4451883a 	add	r8,r8,r17
    bf50:	1823883a 	mov	r17,r3
    bf54:	4080202c 	andhi	r2,r8,128
    bf58:	10005926 	beq	r2,zero,c0c0 <__adddf3+0x20c>
    bf5c:	84000044 	addi	r16,r16,1
    bf60:	0081ffc4 	movi	r2,2047
    bf64:	8080ba26 	beq	r16,r2,c250 <__adddf3+0x39c>
    bf68:	00bfe034 	movhi	r2,65408
    bf6c:	10bfffc4 	addi	r2,r2,-1
    bf70:	4090703a 	and	r8,r8,r2
    bf74:	4004977a 	slli	r2,r8,29
    bf78:	4010927a 	slli	r8,r8,9
    bf7c:	8822d0fa 	srli	r17,r17,3
    bf80:	8401ffcc 	andi	r16,r16,2047
    bf84:	4010d33a 	srli	r8,r8,12
    bf88:	9007883a 	mov	r3,r18
    bf8c:	1444b03a 	or	r2,r2,r17
    bf90:	8401ffcc 	andi	r16,r16,2047
    bf94:	8020953a 	slli	r16,r16,20
    bf98:	18c03fcc 	andi	r3,r3,255
    bf9c:	01000434 	movhi	r4,16
    bfa0:	213fffc4 	addi	r4,r4,-1
    bfa4:	180697fa 	slli	r3,r3,31
    bfa8:	4110703a 	and	r8,r8,r4
    bfac:	4410b03a 	or	r8,r8,r16
    bfb0:	40c6b03a 	or	r3,r8,r3
    bfb4:	dfc00417 	ldw	ra,16(sp)
    bfb8:	dcc00317 	ldw	r19,12(sp)
    bfbc:	dc800217 	ldw	r18,8(sp)
    bfc0:	dc400117 	ldw	r17,4(sp)
    bfc4:	dc000017 	ldw	r16,0(sp)
    bfc8:	dec00504 	addi	sp,sp,20
    bfcc:	f800283a 	ret
    bfd0:	0081ffc4 	movi	r2,2047
    bfd4:	80bfd626 	beq	r16,r2,bf30 <__alt_data_end+0xf800bf30>
    bfd8:	4a402034 	orhi	r9,r9,128
    bfdc:	00800e04 	movi	r2,56
    bfe0:	10c09f16 	blt	r2,r3,c260 <__adddf3+0x3ac>
    bfe4:	008007c4 	movi	r2,31
    bfe8:	10c0c216 	blt	r2,r3,c2f4 <__adddf3+0x440>
    bfec:	00800804 	movi	r2,32
    bff0:	10c5c83a 	sub	r2,r2,r3
    bff4:	488a983a 	sll	r5,r9,r2
    bff8:	30c8d83a 	srl	r4,r6,r3
    bffc:	3084983a 	sll	r2,r6,r2
    c000:	48c6d83a 	srl	r3,r9,r3
    c004:	290cb03a 	or	r6,r5,r4
    c008:	1004c03a 	cmpne	r2,r2,zero
    c00c:	308cb03a 	or	r6,r6,r2
    c010:	898dc83a 	sub	r6,r17,r6
    c014:	89a3803a 	cmpltu	r17,r17,r6
    c018:	40d1c83a 	sub	r8,r8,r3
    c01c:	4451c83a 	sub	r8,r8,r17
    c020:	3023883a 	mov	r17,r6
    c024:	4080202c 	andhi	r2,r8,128
    c028:	10002326 	beq	r2,zero,c0b8 <__adddf3+0x204>
    c02c:	04c02034 	movhi	r19,128
    c030:	9cffffc4 	addi	r19,r19,-1
    c034:	44e6703a 	and	r19,r8,r19
    c038:	98007626 	beq	r19,zero,c214 <__adddf3+0x360>
    c03c:	9809883a 	mov	r4,r19
    c040:	000e6f40 	call	e6f4 <__clzsi2>
    c044:	10fffe04 	addi	r3,r2,-8
    c048:	010007c4 	movi	r4,31
    c04c:	20c07716 	blt	r4,r3,c22c <__adddf3+0x378>
    c050:	00800804 	movi	r2,32
    c054:	10c5c83a 	sub	r2,r2,r3
    c058:	8884d83a 	srl	r2,r17,r2
    c05c:	98d0983a 	sll	r8,r19,r3
    c060:	88e2983a 	sll	r17,r17,r3
    c064:	1204b03a 	or	r2,r2,r8
    c068:	1c007416 	blt	r3,r16,c23c <__adddf3+0x388>
    c06c:	1c21c83a 	sub	r16,r3,r16
    c070:	82000044 	addi	r8,r16,1
    c074:	00c007c4 	movi	r3,31
    c078:	1a009116 	blt	r3,r8,c2c0 <__adddf3+0x40c>
    c07c:	00c00804 	movi	r3,32
    c080:	1a07c83a 	sub	r3,r3,r8
    c084:	8a08d83a 	srl	r4,r17,r8
    c088:	88e2983a 	sll	r17,r17,r3
    c08c:	10c6983a 	sll	r3,r2,r3
    c090:	1210d83a 	srl	r8,r2,r8
    c094:	8804c03a 	cmpne	r2,r17,zero
    c098:	1906b03a 	or	r3,r3,r4
    c09c:	18a2b03a 	or	r17,r3,r2
    c0a0:	0021883a 	mov	r16,zero
    c0a4:	003fa206 	br	bf30 <__alt_data_end+0xf800bf30>
    c0a8:	1890b03a 	or	r8,r3,r2
    c0ac:	40017d26 	beq	r8,zero,c6a4 <__adddf3+0x7f0>
    c0b0:	1011883a 	mov	r8,r2
    c0b4:	1823883a 	mov	r17,r3
    c0b8:	888001cc 	andi	r2,r17,7
    c0bc:	103f9e1e 	bne	r2,zero,bf38 <__alt_data_end+0xf800bf38>
    c0c0:	4004977a 	slli	r2,r8,29
    c0c4:	8822d0fa 	srli	r17,r17,3
    c0c8:	4010d0fa 	srli	r8,r8,3
    c0cc:	9007883a 	mov	r3,r18
    c0d0:	1444b03a 	or	r2,r2,r17
    c0d4:	0101ffc4 	movi	r4,2047
    c0d8:	81002426 	beq	r16,r4,c16c <__adddf3+0x2b8>
    c0dc:	8120703a 	and	r16,r16,r4
    c0e0:	01000434 	movhi	r4,16
    c0e4:	213fffc4 	addi	r4,r4,-1
    c0e8:	4110703a 	and	r8,r8,r4
    c0ec:	003fa806 	br	bf90 <__alt_data_end+0xf800bf90>
    c0f0:	8089c83a 	sub	r4,r16,r2
    c0f4:	01005e0e 	bge	zero,r4,c270 <__adddf3+0x3bc>
    c0f8:	10002b26 	beq	r2,zero,c1a8 <__adddf3+0x2f4>
    c0fc:	0081ffc4 	movi	r2,2047
    c100:	80bf8b26 	beq	r16,r2,bf30 <__alt_data_end+0xf800bf30>
    c104:	4a402034 	orhi	r9,r9,128
    c108:	00800e04 	movi	r2,56
    c10c:	1100a40e 	bge	r2,r4,c3a0 <__adddf3+0x4ec>
    c110:	498cb03a 	or	r6,r9,r6
    c114:	300ac03a 	cmpne	r5,r6,zero
    c118:	0013883a 	mov	r9,zero
    c11c:	2c4b883a 	add	r5,r5,r17
    c120:	2c63803a 	cmpltu	r17,r5,r17
    c124:	4a11883a 	add	r8,r9,r8
    c128:	8a11883a 	add	r8,r17,r8
    c12c:	2823883a 	mov	r17,r5
    c130:	4080202c 	andhi	r2,r8,128
    c134:	103fe026 	beq	r2,zero,c0b8 <__alt_data_end+0xf800c0b8>
    c138:	84000044 	addi	r16,r16,1
    c13c:	0081ffc4 	movi	r2,2047
    c140:	8080d226 	beq	r16,r2,c48c <__adddf3+0x5d8>
    c144:	00bfe034 	movhi	r2,65408
    c148:	10bfffc4 	addi	r2,r2,-1
    c14c:	4090703a 	and	r8,r8,r2
    c150:	880ad07a 	srli	r5,r17,1
    c154:	400897fa 	slli	r4,r8,31
    c158:	88c0004c 	andi	r3,r17,1
    c15c:	28e2b03a 	or	r17,r5,r3
    c160:	4010d07a 	srli	r8,r8,1
    c164:	2462b03a 	or	r17,r4,r17
    c168:	003f7106 	br	bf30 <__alt_data_end+0xf800bf30>
    c16c:	4088b03a 	or	r4,r8,r2
    c170:	20014526 	beq	r4,zero,c688 <__adddf3+0x7d4>
    c174:	01000434 	movhi	r4,16
    c178:	42000234 	orhi	r8,r8,8
    c17c:	213fffc4 	addi	r4,r4,-1
    c180:	4110703a 	and	r8,r8,r4
    c184:	003f8206 	br	bf90 <__alt_data_end+0xf800bf90>
    c188:	18ffffc4 	addi	r3,r3,-1
    c18c:	1800491e 	bne	r3,zero,c2b4 <__adddf3+0x400>
    c190:	898bc83a 	sub	r5,r17,r6
    c194:	8963803a 	cmpltu	r17,r17,r5
    c198:	4251c83a 	sub	r8,r8,r9
    c19c:	4451c83a 	sub	r8,r8,r17
    c1a0:	2823883a 	mov	r17,r5
    c1a4:	003f9f06 	br	c024 <__alt_data_end+0xf800c024>
    c1a8:	4984b03a 	or	r2,r9,r6
    c1ac:	103f6026 	beq	r2,zero,bf30 <__alt_data_end+0xf800bf30>
    c1b0:	213fffc4 	addi	r4,r4,-1
    c1b4:	2000931e 	bne	r4,zero,c404 <__adddf3+0x550>
    c1b8:	898d883a 	add	r6,r17,r6
    c1bc:	3463803a 	cmpltu	r17,r6,r17
    c1c0:	4251883a 	add	r8,r8,r9
    c1c4:	8a11883a 	add	r8,r17,r8
    c1c8:	3023883a 	mov	r17,r6
    c1cc:	003fd806 	br	c130 <__alt_data_end+0xf800c130>
    c1d0:	1800541e 	bne	r3,zero,c324 <__adddf3+0x470>
    c1d4:	80800044 	addi	r2,r16,1
    c1d8:	1081ffcc 	andi	r2,r2,2047
    c1dc:	00c00044 	movi	r3,1
    c1e0:	1880a00e 	bge	r3,r2,c464 <__adddf3+0x5b0>
    c1e4:	8989c83a 	sub	r4,r17,r6
    c1e8:	8905803a 	cmpltu	r2,r17,r4
    c1ec:	4267c83a 	sub	r19,r8,r9
    c1f0:	98a7c83a 	sub	r19,r19,r2
    c1f4:	9880202c 	andhi	r2,r19,128
    c1f8:	10006326 	beq	r2,zero,c388 <__adddf3+0x4d4>
    c1fc:	3463c83a 	sub	r17,r6,r17
    c200:	4a07c83a 	sub	r3,r9,r8
    c204:	344d803a 	cmpltu	r6,r6,r17
    c208:	19a7c83a 	sub	r19,r3,r6
    c20c:	3825883a 	mov	r18,r7
    c210:	983f8a1e 	bne	r19,zero,c03c <__alt_data_end+0xf800c03c>
    c214:	8809883a 	mov	r4,r17
    c218:	000e6f40 	call	e6f4 <__clzsi2>
    c21c:	10800804 	addi	r2,r2,32
    c220:	10fffe04 	addi	r3,r2,-8
    c224:	010007c4 	movi	r4,31
    c228:	20ff890e 	bge	r4,r3,c050 <__alt_data_end+0xf800c050>
    c22c:	10bff604 	addi	r2,r2,-40
    c230:	8884983a 	sll	r2,r17,r2
    c234:	0023883a 	mov	r17,zero
    c238:	1c3f8c0e 	bge	r3,r16,c06c <__alt_data_end+0xf800c06c>
    c23c:	023fe034 	movhi	r8,65408
    c240:	423fffc4 	addi	r8,r8,-1
    c244:	80e1c83a 	sub	r16,r16,r3
    c248:	1210703a 	and	r8,r2,r8
    c24c:	003f3806 	br	bf30 <__alt_data_end+0xf800bf30>
    c250:	9007883a 	mov	r3,r18
    c254:	0011883a 	mov	r8,zero
    c258:	0005883a 	mov	r2,zero
    c25c:	003f4c06 	br	bf90 <__alt_data_end+0xf800bf90>
    c260:	498cb03a 	or	r6,r9,r6
    c264:	300cc03a 	cmpne	r6,r6,zero
    c268:	0007883a 	mov	r3,zero
    c26c:	003f6806 	br	c010 <__alt_data_end+0xf800c010>
    c270:	20009c1e 	bne	r4,zero,c4e4 <__adddf3+0x630>
    c274:	80800044 	addi	r2,r16,1
    c278:	1141ffcc 	andi	r5,r2,2047
    c27c:	01000044 	movi	r4,1
    c280:	2140670e 	bge	r4,r5,c420 <__adddf3+0x56c>
    c284:	0101ffc4 	movi	r4,2047
    c288:	11007f26 	beq	r2,r4,c488 <__adddf3+0x5d4>
    c28c:	898d883a 	add	r6,r17,r6
    c290:	4247883a 	add	r3,r8,r9
    c294:	3451803a 	cmpltu	r8,r6,r17
    c298:	40d1883a 	add	r8,r8,r3
    c29c:	402297fa 	slli	r17,r8,31
    c2a0:	300cd07a 	srli	r6,r6,1
    c2a4:	4010d07a 	srli	r8,r8,1
    c2a8:	1021883a 	mov	r16,r2
    c2ac:	89a2b03a 	or	r17,r17,r6
    c2b0:	003f1f06 	br	bf30 <__alt_data_end+0xf800bf30>
    c2b4:	0081ffc4 	movi	r2,2047
    c2b8:	80bf481e 	bne	r16,r2,bfdc <__alt_data_end+0xf800bfdc>
    c2bc:	003f1c06 	br	bf30 <__alt_data_end+0xf800bf30>
    c2c0:	843ff844 	addi	r16,r16,-31
    c2c4:	01000804 	movi	r4,32
    c2c8:	1406d83a 	srl	r3,r2,r16
    c2cc:	41005026 	beq	r8,r4,c410 <__adddf3+0x55c>
    c2d0:	01001004 	movi	r4,64
    c2d4:	2211c83a 	sub	r8,r4,r8
    c2d8:	1204983a 	sll	r2,r2,r8
    c2dc:	88a2b03a 	or	r17,r17,r2
    c2e0:	8822c03a 	cmpne	r17,r17,zero
    c2e4:	1c62b03a 	or	r17,r3,r17
    c2e8:	0011883a 	mov	r8,zero
    c2ec:	0021883a 	mov	r16,zero
    c2f0:	003f7106 	br	c0b8 <__alt_data_end+0xf800c0b8>
    c2f4:	193ff804 	addi	r4,r3,-32
    c2f8:	00800804 	movi	r2,32
    c2fc:	4908d83a 	srl	r4,r9,r4
    c300:	18804526 	beq	r3,r2,c418 <__adddf3+0x564>
    c304:	00801004 	movi	r2,64
    c308:	10c5c83a 	sub	r2,r2,r3
    c30c:	4886983a 	sll	r3,r9,r2
    c310:	198cb03a 	or	r6,r3,r6
    c314:	300cc03a 	cmpne	r6,r6,zero
    c318:	218cb03a 	or	r6,r4,r6
    c31c:	0007883a 	mov	r3,zero
    c320:	003f3b06 	br	c010 <__alt_data_end+0xf800c010>
    c324:	80002a26 	beq	r16,zero,c3d0 <__adddf3+0x51c>
    c328:	0101ffc4 	movi	r4,2047
    c32c:	11006826 	beq	r2,r4,c4d0 <__adddf3+0x61c>
    c330:	00c7c83a 	sub	r3,zero,r3
    c334:	42002034 	orhi	r8,r8,128
    c338:	01000e04 	movi	r4,56
    c33c:	20c07c16 	blt	r4,r3,c530 <__adddf3+0x67c>
    c340:	010007c4 	movi	r4,31
    c344:	20c0da16 	blt	r4,r3,c6b0 <__adddf3+0x7fc>
    c348:	01000804 	movi	r4,32
    c34c:	20c9c83a 	sub	r4,r4,r3
    c350:	4114983a 	sll	r10,r8,r4
    c354:	88cad83a 	srl	r5,r17,r3
    c358:	8908983a 	sll	r4,r17,r4
    c35c:	40c6d83a 	srl	r3,r8,r3
    c360:	5162b03a 	or	r17,r10,r5
    c364:	2008c03a 	cmpne	r4,r4,zero
    c368:	8922b03a 	or	r17,r17,r4
    c36c:	3463c83a 	sub	r17,r6,r17
    c370:	48c7c83a 	sub	r3,r9,r3
    c374:	344d803a 	cmpltu	r6,r6,r17
    c378:	1991c83a 	sub	r8,r3,r6
    c37c:	1021883a 	mov	r16,r2
    c380:	3825883a 	mov	r18,r7
    c384:	003f2706 	br	c024 <__alt_data_end+0xf800c024>
    c388:	24d0b03a 	or	r8,r4,r19
    c38c:	40001b1e 	bne	r8,zero,c3fc <__adddf3+0x548>
    c390:	0005883a 	mov	r2,zero
    c394:	0007883a 	mov	r3,zero
    c398:	0021883a 	mov	r16,zero
    c39c:	003f4d06 	br	c0d4 <__alt_data_end+0xf800c0d4>
    c3a0:	008007c4 	movi	r2,31
    c3a4:	11003c16 	blt	r2,r4,c498 <__adddf3+0x5e4>
    c3a8:	00800804 	movi	r2,32
    c3ac:	1105c83a 	sub	r2,r2,r4
    c3b0:	488e983a 	sll	r7,r9,r2
    c3b4:	310ad83a 	srl	r5,r6,r4
    c3b8:	3084983a 	sll	r2,r6,r2
    c3bc:	4912d83a 	srl	r9,r9,r4
    c3c0:	394ab03a 	or	r5,r7,r5
    c3c4:	1004c03a 	cmpne	r2,r2,zero
    c3c8:	288ab03a 	or	r5,r5,r2
    c3cc:	003f5306 	br	c11c <__alt_data_end+0xf800c11c>
    c3d0:	4448b03a 	or	r4,r8,r17
    c3d4:	20003e26 	beq	r4,zero,c4d0 <__adddf3+0x61c>
    c3d8:	00c6303a 	nor	r3,zero,r3
    c3dc:	18003a1e 	bne	r3,zero,c4c8 <__adddf3+0x614>
    c3e0:	3463c83a 	sub	r17,r6,r17
    c3e4:	4a07c83a 	sub	r3,r9,r8
    c3e8:	344d803a 	cmpltu	r6,r6,r17
    c3ec:	1991c83a 	sub	r8,r3,r6
    c3f0:	1021883a 	mov	r16,r2
    c3f4:	3825883a 	mov	r18,r7
    c3f8:	003f0a06 	br	c024 <__alt_data_end+0xf800c024>
    c3fc:	2023883a 	mov	r17,r4
    c400:	003f0d06 	br	c038 <__alt_data_end+0xf800c038>
    c404:	0081ffc4 	movi	r2,2047
    c408:	80bf3f1e 	bne	r16,r2,c108 <__alt_data_end+0xf800c108>
    c40c:	003ec806 	br	bf30 <__alt_data_end+0xf800bf30>
    c410:	0005883a 	mov	r2,zero
    c414:	003fb106 	br	c2dc <__alt_data_end+0xf800c2dc>
    c418:	0007883a 	mov	r3,zero
    c41c:	003fbc06 	br	c310 <__alt_data_end+0xf800c310>
    c420:	4444b03a 	or	r2,r8,r17
    c424:	8000871e 	bne	r16,zero,c644 <__adddf3+0x790>
    c428:	1000ba26 	beq	r2,zero,c714 <__adddf3+0x860>
    c42c:	4984b03a 	or	r2,r9,r6
    c430:	103ebf26 	beq	r2,zero,bf30 <__alt_data_end+0xf800bf30>
    c434:	8985883a 	add	r2,r17,r6
    c438:	4247883a 	add	r3,r8,r9
    c43c:	1451803a 	cmpltu	r8,r2,r17
    c440:	40d1883a 	add	r8,r8,r3
    c444:	40c0202c 	andhi	r3,r8,128
    c448:	1023883a 	mov	r17,r2
    c44c:	183f1a26 	beq	r3,zero,c0b8 <__alt_data_end+0xf800c0b8>
    c450:	00bfe034 	movhi	r2,65408
    c454:	10bfffc4 	addi	r2,r2,-1
    c458:	2021883a 	mov	r16,r4
    c45c:	4090703a 	and	r8,r8,r2
    c460:	003eb306 	br	bf30 <__alt_data_end+0xf800bf30>
    c464:	4444b03a 	or	r2,r8,r17
    c468:	8000291e 	bne	r16,zero,c510 <__adddf3+0x65c>
    c46c:	10004b1e 	bne	r2,zero,c59c <__adddf3+0x6e8>
    c470:	4990b03a 	or	r8,r9,r6
    c474:	40008b26 	beq	r8,zero,c6a4 <__adddf3+0x7f0>
    c478:	4811883a 	mov	r8,r9
    c47c:	3023883a 	mov	r17,r6
    c480:	3825883a 	mov	r18,r7
    c484:	003eaa06 	br	bf30 <__alt_data_end+0xf800bf30>
    c488:	1021883a 	mov	r16,r2
    c48c:	0011883a 	mov	r8,zero
    c490:	0005883a 	mov	r2,zero
    c494:	003f0f06 	br	c0d4 <__alt_data_end+0xf800c0d4>
    c498:	217ff804 	addi	r5,r4,-32
    c49c:	00800804 	movi	r2,32
    c4a0:	494ad83a 	srl	r5,r9,r5
    c4a4:	20807d26 	beq	r4,r2,c69c <__adddf3+0x7e8>
    c4a8:	00801004 	movi	r2,64
    c4ac:	1109c83a 	sub	r4,r2,r4
    c4b0:	4912983a 	sll	r9,r9,r4
    c4b4:	498cb03a 	or	r6,r9,r6
    c4b8:	300cc03a 	cmpne	r6,r6,zero
    c4bc:	298ab03a 	or	r5,r5,r6
    c4c0:	0013883a 	mov	r9,zero
    c4c4:	003f1506 	br	c11c <__alt_data_end+0xf800c11c>
    c4c8:	0101ffc4 	movi	r4,2047
    c4cc:	113f9a1e 	bne	r2,r4,c338 <__alt_data_end+0xf800c338>
    c4d0:	4811883a 	mov	r8,r9
    c4d4:	3023883a 	mov	r17,r6
    c4d8:	1021883a 	mov	r16,r2
    c4dc:	3825883a 	mov	r18,r7
    c4e0:	003e9306 	br	bf30 <__alt_data_end+0xf800bf30>
    c4e4:	8000161e 	bne	r16,zero,c540 <__adddf3+0x68c>
    c4e8:	444ab03a 	or	r5,r8,r17
    c4ec:	28005126 	beq	r5,zero,c634 <__adddf3+0x780>
    c4f0:	0108303a 	nor	r4,zero,r4
    c4f4:	20004d1e 	bne	r4,zero,c62c <__adddf3+0x778>
    c4f8:	89a3883a 	add	r17,r17,r6
    c4fc:	4253883a 	add	r9,r8,r9
    c500:	898d803a 	cmpltu	r6,r17,r6
    c504:	3251883a 	add	r8,r6,r9
    c508:	1021883a 	mov	r16,r2
    c50c:	003f0806 	br	c130 <__alt_data_end+0xf800c130>
    c510:	1000301e 	bne	r2,zero,c5d4 <__adddf3+0x720>
    c514:	4984b03a 	or	r2,r9,r6
    c518:	10007126 	beq	r2,zero,c6e0 <__adddf3+0x82c>
    c51c:	4811883a 	mov	r8,r9
    c520:	3023883a 	mov	r17,r6
    c524:	3825883a 	mov	r18,r7
    c528:	0401ffc4 	movi	r16,2047
    c52c:	003e8006 	br	bf30 <__alt_data_end+0xf800bf30>
    c530:	4462b03a 	or	r17,r8,r17
    c534:	8822c03a 	cmpne	r17,r17,zero
    c538:	0007883a 	mov	r3,zero
    c53c:	003f8b06 	br	c36c <__alt_data_end+0xf800c36c>
    c540:	0141ffc4 	movi	r5,2047
    c544:	11403b26 	beq	r2,r5,c634 <__adddf3+0x780>
    c548:	0109c83a 	sub	r4,zero,r4
    c54c:	42002034 	orhi	r8,r8,128
    c550:	01400e04 	movi	r5,56
    c554:	29006716 	blt	r5,r4,c6f4 <__adddf3+0x840>
    c558:	014007c4 	movi	r5,31
    c55c:	29007016 	blt	r5,r4,c720 <__adddf3+0x86c>
    c560:	01400804 	movi	r5,32
    c564:	290bc83a 	sub	r5,r5,r4
    c568:	4154983a 	sll	r10,r8,r5
    c56c:	890ed83a 	srl	r7,r17,r4
    c570:	894a983a 	sll	r5,r17,r5
    c574:	4108d83a 	srl	r4,r8,r4
    c578:	51e2b03a 	or	r17,r10,r7
    c57c:	280ac03a 	cmpne	r5,r5,zero
    c580:	8962b03a 	or	r17,r17,r5
    c584:	89a3883a 	add	r17,r17,r6
    c588:	2253883a 	add	r9,r4,r9
    c58c:	898d803a 	cmpltu	r6,r17,r6
    c590:	3251883a 	add	r8,r6,r9
    c594:	1021883a 	mov	r16,r2
    c598:	003ee506 	br	c130 <__alt_data_end+0xf800c130>
    c59c:	4984b03a 	or	r2,r9,r6
    c5a0:	103e6326 	beq	r2,zero,bf30 <__alt_data_end+0xf800bf30>
    c5a4:	8987c83a 	sub	r3,r17,r6
    c5a8:	88c9803a 	cmpltu	r4,r17,r3
    c5ac:	4245c83a 	sub	r2,r8,r9
    c5b0:	1105c83a 	sub	r2,r2,r4
    c5b4:	1100202c 	andhi	r4,r2,128
    c5b8:	203ebb26 	beq	r4,zero,c0a8 <__alt_data_end+0xf800c0a8>
    c5bc:	3463c83a 	sub	r17,r6,r17
    c5c0:	4a07c83a 	sub	r3,r9,r8
    c5c4:	344d803a 	cmpltu	r6,r6,r17
    c5c8:	1991c83a 	sub	r8,r3,r6
    c5cc:	3825883a 	mov	r18,r7
    c5d0:	003e5706 	br	bf30 <__alt_data_end+0xf800bf30>
    c5d4:	4984b03a 	or	r2,r9,r6
    c5d8:	10002e26 	beq	r2,zero,c694 <__adddf3+0x7e0>
    c5dc:	4004d0fa 	srli	r2,r8,3
    c5e0:	8822d0fa 	srli	r17,r17,3
    c5e4:	4010977a 	slli	r8,r8,29
    c5e8:	10c0022c 	andhi	r3,r2,8
    c5ec:	4462b03a 	or	r17,r8,r17
    c5f0:	18000826 	beq	r3,zero,c614 <__adddf3+0x760>
    c5f4:	4808d0fa 	srli	r4,r9,3
    c5f8:	20c0022c 	andhi	r3,r4,8
    c5fc:	1800051e 	bne	r3,zero,c614 <__adddf3+0x760>
    c600:	300cd0fa 	srli	r6,r6,3
    c604:	4806977a 	slli	r3,r9,29
    c608:	2005883a 	mov	r2,r4
    c60c:	3825883a 	mov	r18,r7
    c610:	19a2b03a 	or	r17,r3,r6
    c614:	8810d77a 	srli	r8,r17,29
    c618:	100490fa 	slli	r2,r2,3
    c61c:	882290fa 	slli	r17,r17,3
    c620:	0401ffc4 	movi	r16,2047
    c624:	4090b03a 	or	r8,r8,r2
    c628:	003e4106 	br	bf30 <__alt_data_end+0xf800bf30>
    c62c:	0141ffc4 	movi	r5,2047
    c630:	117fc71e 	bne	r2,r5,c550 <__alt_data_end+0xf800c550>
    c634:	4811883a 	mov	r8,r9
    c638:	3023883a 	mov	r17,r6
    c63c:	1021883a 	mov	r16,r2
    c640:	003e3b06 	br	bf30 <__alt_data_end+0xf800bf30>
    c644:	10002f26 	beq	r2,zero,c704 <__adddf3+0x850>
    c648:	4984b03a 	or	r2,r9,r6
    c64c:	10001126 	beq	r2,zero,c694 <__adddf3+0x7e0>
    c650:	4004d0fa 	srli	r2,r8,3
    c654:	8822d0fa 	srli	r17,r17,3
    c658:	4010977a 	slli	r8,r8,29
    c65c:	10c0022c 	andhi	r3,r2,8
    c660:	4462b03a 	or	r17,r8,r17
    c664:	183feb26 	beq	r3,zero,c614 <__alt_data_end+0xf800c614>
    c668:	4808d0fa 	srli	r4,r9,3
    c66c:	20c0022c 	andhi	r3,r4,8
    c670:	183fe81e 	bne	r3,zero,c614 <__alt_data_end+0xf800c614>
    c674:	300cd0fa 	srli	r6,r6,3
    c678:	4806977a 	slli	r3,r9,29
    c67c:	2005883a 	mov	r2,r4
    c680:	19a2b03a 	or	r17,r3,r6
    c684:	003fe306 	br	c614 <__alt_data_end+0xf800c614>
    c688:	0011883a 	mov	r8,zero
    c68c:	0005883a 	mov	r2,zero
    c690:	003e3f06 	br	bf90 <__alt_data_end+0xf800bf90>
    c694:	0401ffc4 	movi	r16,2047
    c698:	003e2506 	br	bf30 <__alt_data_end+0xf800bf30>
    c69c:	0013883a 	mov	r9,zero
    c6a0:	003f8406 	br	c4b4 <__alt_data_end+0xf800c4b4>
    c6a4:	0005883a 	mov	r2,zero
    c6a8:	0007883a 	mov	r3,zero
    c6ac:	003e8906 	br	c0d4 <__alt_data_end+0xf800c0d4>
    c6b0:	197ff804 	addi	r5,r3,-32
    c6b4:	01000804 	movi	r4,32
    c6b8:	414ad83a 	srl	r5,r8,r5
    c6bc:	19002426 	beq	r3,r4,c750 <__adddf3+0x89c>
    c6c0:	01001004 	movi	r4,64
    c6c4:	20c7c83a 	sub	r3,r4,r3
    c6c8:	40c6983a 	sll	r3,r8,r3
    c6cc:	1c46b03a 	or	r3,r3,r17
    c6d0:	1806c03a 	cmpne	r3,r3,zero
    c6d4:	28e2b03a 	or	r17,r5,r3
    c6d8:	0007883a 	mov	r3,zero
    c6dc:	003f2306 	br	c36c <__alt_data_end+0xf800c36c>
    c6e0:	0007883a 	mov	r3,zero
    c6e4:	5811883a 	mov	r8,r11
    c6e8:	00bfffc4 	movi	r2,-1
    c6ec:	0401ffc4 	movi	r16,2047
    c6f0:	003e7806 	br	c0d4 <__alt_data_end+0xf800c0d4>
    c6f4:	4462b03a 	or	r17,r8,r17
    c6f8:	8822c03a 	cmpne	r17,r17,zero
    c6fc:	0009883a 	mov	r4,zero
    c700:	003fa006 	br	c584 <__alt_data_end+0xf800c584>
    c704:	4811883a 	mov	r8,r9
    c708:	3023883a 	mov	r17,r6
    c70c:	0401ffc4 	movi	r16,2047
    c710:	003e0706 	br	bf30 <__alt_data_end+0xf800bf30>
    c714:	4811883a 	mov	r8,r9
    c718:	3023883a 	mov	r17,r6
    c71c:	003e0406 	br	bf30 <__alt_data_end+0xf800bf30>
    c720:	21fff804 	addi	r7,r4,-32
    c724:	01400804 	movi	r5,32
    c728:	41ced83a 	srl	r7,r8,r7
    c72c:	21400a26 	beq	r4,r5,c758 <__adddf3+0x8a4>
    c730:	01401004 	movi	r5,64
    c734:	2909c83a 	sub	r4,r5,r4
    c738:	4108983a 	sll	r4,r8,r4
    c73c:	2448b03a 	or	r4,r4,r17
    c740:	2008c03a 	cmpne	r4,r4,zero
    c744:	3922b03a 	or	r17,r7,r4
    c748:	0009883a 	mov	r4,zero
    c74c:	003f8d06 	br	c584 <__alt_data_end+0xf800c584>
    c750:	0007883a 	mov	r3,zero
    c754:	003fdd06 	br	c6cc <__alt_data_end+0xf800c6cc>
    c758:	0009883a 	mov	r4,zero
    c75c:	003ff706 	br	c73c <__alt_data_end+0xf800c73c>

0000c760 <__divdf3>:
    c760:	defff004 	addi	sp,sp,-64
    c764:	dc800815 	stw	r18,32(sp)
    c768:	2824d53a 	srli	r18,r5,20
    c76c:	dd800c15 	stw	r22,48(sp)
    c770:	282cd7fa 	srli	r22,r5,31
    c774:	dc000615 	stw	r16,24(sp)
    c778:	04000434 	movhi	r16,16
    c77c:	843fffc4 	addi	r16,r16,-1
    c780:	dfc00f15 	stw	ra,60(sp)
    c784:	df000e15 	stw	fp,56(sp)
    c788:	ddc00d15 	stw	r23,52(sp)
    c78c:	dd400b15 	stw	r21,44(sp)
    c790:	dd000a15 	stw	r20,40(sp)
    c794:	dcc00915 	stw	r19,36(sp)
    c798:	dc400715 	stw	r17,28(sp)
    c79c:	9481ffcc 	andi	r18,r18,2047
    c7a0:	2c20703a 	and	r16,r5,r16
    c7a4:	b2003fcc 	andi	r8,r22,255
    c7a8:	90006126 	beq	r18,zero,c930 <__divdf3+0x1d0>
    c7ac:	0081ffc4 	movi	r2,2047
    c7b0:	202b883a 	mov	r21,r4
    c7b4:	90803726 	beq	r18,r2,c894 <__divdf3+0x134>
    c7b8:	80800434 	orhi	r2,r16,16
    c7bc:	100490fa 	slli	r2,r2,3
    c7c0:	2020d77a 	srli	r16,r4,29
    c7c4:	202a90fa 	slli	r21,r4,3
    c7c8:	94bf0044 	addi	r18,r18,-1023
    c7cc:	80a0b03a 	or	r16,r16,r2
    c7d0:	0013883a 	mov	r9,zero
    c7d4:	000b883a 	mov	r5,zero
    c7d8:	3806d53a 	srli	r3,r7,20
    c7dc:	382ed7fa 	srli	r23,r7,31
    c7e0:	04400434 	movhi	r17,16
    c7e4:	8c7fffc4 	addi	r17,r17,-1
    c7e8:	18c1ffcc 	andi	r3,r3,2047
    c7ec:	3029883a 	mov	r20,r6
    c7f0:	3c62703a 	and	r17,r7,r17
    c7f4:	bf003fcc 	andi	fp,r23,255
    c7f8:	18006e26 	beq	r3,zero,c9b4 <__divdf3+0x254>
    c7fc:	0081ffc4 	movi	r2,2047
    c800:	18806626 	beq	r3,r2,c99c <__divdf3+0x23c>
    c804:	88800434 	orhi	r2,r17,16
    c808:	100490fa 	slli	r2,r2,3
    c80c:	3022d77a 	srli	r17,r6,29
    c810:	302890fa 	slli	r20,r6,3
    c814:	18ff0044 	addi	r3,r3,-1023
    c818:	88a2b03a 	or	r17,r17,r2
    c81c:	000f883a 	mov	r7,zero
    c820:	b5e6f03a 	xor	r19,r22,r23
    c824:	3a4cb03a 	or	r6,r7,r9
    c828:	008003c4 	movi	r2,15
    c82c:	9809883a 	mov	r4,r19
    c830:	90c7c83a 	sub	r3,r18,r3
    c834:	9cc03fcc 	andi	r19,r19,255
    c838:	11809636 	bltu	r2,r6,ca94 <__divdf3+0x334>
    c83c:	300c90ba 	slli	r6,r6,2
    c840:	00800074 	movhi	r2,1
    c844:	10b21504 	addi	r2,r2,-14252
    c848:	308d883a 	add	r6,r6,r2
    c84c:	30800017 	ldw	r2,0(r6)
    c850:	1000683a 	jmp	r2
    c854:	0000ca94 	movui	zero,810
    c858:	0000c8cc 	andi	zero,zero,803
    c85c:	0000ca84 	movi	zero,810
    c860:	0000c8c0 	call	c8c <button_interrupt+0x620>
    c864:	0000ca84 	movi	zero,810
    c868:	0000ca58 	cmpnei	zero,zero,809
    c86c:	0000ca84 	movi	zero,810
    c870:	0000c8c0 	call	c8c <button_interrupt+0x620>
    c874:	0000c8cc 	andi	zero,zero,803
    c878:	0000c8cc 	andi	zero,zero,803
    c87c:	0000ca58 	cmpnei	zero,zero,809
    c880:	0000c8c0 	call	c8c <button_interrupt+0x620>
    c884:	0000c8b0 	cmpltui	zero,zero,802
    c888:	0000c8b0 	cmpltui	zero,zero,802
    c88c:	0000c8b0 	cmpltui	zero,zero,802
    c890:	0000ce1c 	xori	zero,zero,824
    c894:	2404b03a 	or	r2,r4,r16
    c898:	10006c1e 	bne	r2,zero,ca4c <__divdf3+0x2ec>
    c89c:	02400204 	movi	r9,8
    c8a0:	0021883a 	mov	r16,zero
    c8a4:	002b883a 	mov	r21,zero
    c8a8:	01400084 	movi	r5,2
    c8ac:	003fca06 	br	c7d8 <__alt_data_end+0xf800c7d8>
    c8b0:	8023883a 	mov	r17,r16
    c8b4:	a829883a 	mov	r20,r21
    c8b8:	4039883a 	mov	fp,r8
    c8bc:	280f883a 	mov	r7,r5
    c8c0:	00800084 	movi	r2,2
    c8c4:	3881601e 	bne	r7,r2,ce48 <__divdf3+0x6e8>
    c8c8:	e027883a 	mov	r19,fp
    c8cc:	9900004c 	andi	r4,r19,1
    c8d0:	0081ffc4 	movi	r2,2047
    c8d4:	0021883a 	mov	r16,zero
    c8d8:	002b883a 	mov	r21,zero
    c8dc:	1004953a 	slli	r2,r2,20
    c8e0:	20c03fcc 	andi	r3,r4,255
    c8e4:	01400434 	movhi	r5,16
    c8e8:	297fffc4 	addi	r5,r5,-1
    c8ec:	180697fa 	slli	r3,r3,31
    c8f0:	8160703a 	and	r16,r16,r5
    c8f4:	80a0b03a 	or	r16,r16,r2
    c8f8:	80c6b03a 	or	r3,r16,r3
    c8fc:	a805883a 	mov	r2,r21
    c900:	dfc00f17 	ldw	ra,60(sp)
    c904:	df000e17 	ldw	fp,56(sp)
    c908:	ddc00d17 	ldw	r23,52(sp)
    c90c:	dd800c17 	ldw	r22,48(sp)
    c910:	dd400b17 	ldw	r21,44(sp)
    c914:	dd000a17 	ldw	r20,40(sp)
    c918:	dcc00917 	ldw	r19,36(sp)
    c91c:	dc800817 	ldw	r18,32(sp)
    c920:	dc400717 	ldw	r17,28(sp)
    c924:	dc000617 	ldw	r16,24(sp)
    c928:	dec01004 	addi	sp,sp,64
    c92c:	f800283a 	ret
    c930:	2404b03a 	or	r2,r4,r16
    c934:	2023883a 	mov	r17,r4
    c938:	10003f26 	beq	r2,zero,ca38 <__divdf3+0x2d8>
    c93c:	80015e26 	beq	r16,zero,ceb8 <__divdf3+0x758>
    c940:	8009883a 	mov	r4,r16
    c944:	d9800215 	stw	r6,8(sp)
    c948:	d9c00515 	stw	r7,20(sp)
    c94c:	da000415 	stw	r8,16(sp)
    c950:	000e6f40 	call	e6f4 <__clzsi2>
    c954:	d9800217 	ldw	r6,8(sp)
    c958:	d9c00517 	ldw	r7,20(sp)
    c95c:	da000417 	ldw	r8,16(sp)
    c960:	113ffd44 	addi	r4,r2,-11
    c964:	00c00704 	movi	r3,28
    c968:	19014f16 	blt	r3,r4,cea8 <__divdf3+0x748>
    c96c:	00c00744 	movi	r3,29
    c970:	157ffe04 	addi	r21,r2,-8
    c974:	1907c83a 	sub	r3,r3,r4
    c978:	8560983a 	sll	r16,r16,r21
    c97c:	88c6d83a 	srl	r3,r17,r3
    c980:	8d6a983a 	sll	r21,r17,r21
    c984:	1c20b03a 	or	r16,r3,r16
    c988:	1080fcc4 	addi	r2,r2,1011
    c98c:	00a5c83a 	sub	r18,zero,r2
    c990:	0013883a 	mov	r9,zero
    c994:	000b883a 	mov	r5,zero
    c998:	003f8f06 	br	c7d8 <__alt_data_end+0xf800c7d8>
    c99c:	3444b03a 	or	r2,r6,r17
    c9a0:	1000231e 	bne	r2,zero,ca30 <__divdf3+0x2d0>
    c9a4:	0023883a 	mov	r17,zero
    c9a8:	0029883a 	mov	r20,zero
    c9ac:	01c00084 	movi	r7,2
    c9b0:	003f9b06 	br	c820 <__alt_data_end+0xf800c820>
    c9b4:	3444b03a 	or	r2,r6,r17
    c9b8:	10001926 	beq	r2,zero,ca20 <__divdf3+0x2c0>
    c9bc:	88014b26 	beq	r17,zero,ceec <__divdf3+0x78c>
    c9c0:	8809883a 	mov	r4,r17
    c9c4:	d9400115 	stw	r5,4(sp)
    c9c8:	d9800215 	stw	r6,8(sp)
    c9cc:	da000415 	stw	r8,16(sp)
    c9d0:	da400315 	stw	r9,12(sp)
    c9d4:	000e6f40 	call	e6f4 <__clzsi2>
    c9d8:	d9400117 	ldw	r5,4(sp)
    c9dc:	d9800217 	ldw	r6,8(sp)
    c9e0:	da000417 	ldw	r8,16(sp)
    c9e4:	da400317 	ldw	r9,12(sp)
    c9e8:	113ffd44 	addi	r4,r2,-11
    c9ec:	00c00704 	movi	r3,28
    c9f0:	19013a16 	blt	r3,r4,cedc <__divdf3+0x77c>
    c9f4:	00c00744 	movi	r3,29
    c9f8:	153ffe04 	addi	r20,r2,-8
    c9fc:	1907c83a 	sub	r3,r3,r4
    ca00:	8d22983a 	sll	r17,r17,r20
    ca04:	30c6d83a 	srl	r3,r6,r3
    ca08:	3528983a 	sll	r20,r6,r20
    ca0c:	1c62b03a 	or	r17,r3,r17
    ca10:	1080fcc4 	addi	r2,r2,1011
    ca14:	0087c83a 	sub	r3,zero,r2
    ca18:	000f883a 	mov	r7,zero
    ca1c:	003f8006 	br	c820 <__alt_data_end+0xf800c820>
    ca20:	0023883a 	mov	r17,zero
    ca24:	0029883a 	mov	r20,zero
    ca28:	01c00044 	movi	r7,1
    ca2c:	003f7c06 	br	c820 <__alt_data_end+0xf800c820>
    ca30:	01c000c4 	movi	r7,3
    ca34:	003f7a06 	br	c820 <__alt_data_end+0xf800c820>
    ca38:	02400104 	movi	r9,4
    ca3c:	0021883a 	mov	r16,zero
    ca40:	002b883a 	mov	r21,zero
    ca44:	01400044 	movi	r5,1
    ca48:	003f6306 	br	c7d8 <__alt_data_end+0xf800c7d8>
    ca4c:	02400304 	movi	r9,12
    ca50:	014000c4 	movi	r5,3
    ca54:	003f6006 	br	c7d8 <__alt_data_end+0xf800c7d8>
    ca58:	04000434 	movhi	r16,16
    ca5c:	0009883a 	mov	r4,zero
    ca60:	843fffc4 	addi	r16,r16,-1
    ca64:	057fffc4 	movi	r21,-1
    ca68:	0081ffc4 	movi	r2,2047
    ca6c:	003f9b06 	br	c8dc <__alt_data_end+0xf800c8dc>
    ca70:	00c00044 	movi	r3,1
    ca74:	1887c83a 	sub	r3,r3,r2
    ca78:	01000e04 	movi	r4,56
    ca7c:	20c1530e 	bge	r4,r3,cfcc <__divdf3+0x86c>
    ca80:	9900004c 	andi	r4,r19,1
    ca84:	0005883a 	mov	r2,zero
    ca88:	0021883a 	mov	r16,zero
    ca8c:	002b883a 	mov	r21,zero
    ca90:	003f9206 	br	c8dc <__alt_data_end+0xf800c8dc>
    ca94:	8c012e36 	bltu	r17,r16,cf50 <__divdf3+0x7f0>
    ca98:	84412c26 	beq	r16,r17,cf4c <__divdf3+0x7ec>
    ca9c:	a82f883a 	mov	r23,r21
    caa0:	18ffffc4 	addi	r3,r3,-1
    caa4:	002b883a 	mov	r21,zero
    caa8:	a004d63a 	srli	r2,r20,24
    caac:	8822923a 	slli	r17,r17,8
    cab0:	a028923a 	slli	r20,r20,8
    cab4:	8009883a 	mov	r4,r16
    cab8:	88acb03a 	or	r22,r17,r2
    cabc:	dd000015 	stw	r20,0(sp)
    cac0:	b028d43a 	srli	r20,r22,16
    cac4:	d8c00215 	stw	r3,8(sp)
    cac8:	b4bfffcc 	andi	r18,r22,65535
    cacc:	a00b883a 	mov	r5,r20
    cad0:	000bdf80 	call	bdf8 <__udivsi3>
    cad4:	100b883a 	mov	r5,r2
    cad8:	9009883a 	mov	r4,r18
    cadc:	1023883a 	mov	r17,r2
    cae0:	00017b40 	call	17b4 <__mulsi3>
    cae4:	8009883a 	mov	r4,r16
    cae8:	a00b883a 	mov	r5,r20
    caec:	1039883a 	mov	fp,r2
    caf0:	000be5c0 	call	be5c <__umodsi3>
    caf4:	1004943a 	slli	r2,r2,16
    caf8:	b808d43a 	srli	r4,r23,16
    cafc:	d8c00217 	ldw	r3,8(sp)
    cb00:	2084b03a 	or	r2,r4,r2
    cb04:	1700062e 	bgeu	r2,fp,cb20 <__divdf3+0x3c0>
    cb08:	1585883a 	add	r2,r2,r22
    cb0c:	893fffc4 	addi	r4,r17,-1
    cb10:	15811d36 	bltu	r2,r22,cf88 <__divdf3+0x828>
    cb14:	17011c2e 	bgeu	r2,fp,cf88 <__divdf3+0x828>
    cb18:	8c7fff84 	addi	r17,r17,-2
    cb1c:	1585883a 	add	r2,r2,r22
    cb20:	1739c83a 	sub	fp,r2,fp
    cb24:	a00b883a 	mov	r5,r20
    cb28:	e009883a 	mov	r4,fp
    cb2c:	d8c00215 	stw	r3,8(sp)
    cb30:	000bdf80 	call	bdf8 <__udivsi3>
    cb34:	100b883a 	mov	r5,r2
    cb38:	9009883a 	mov	r4,r18
    cb3c:	1021883a 	mov	r16,r2
    cb40:	00017b40 	call	17b4 <__mulsi3>
    cb44:	a00b883a 	mov	r5,r20
    cb48:	e009883a 	mov	r4,fp
    cb4c:	d8800415 	stw	r2,16(sp)
    cb50:	000be5c0 	call	be5c <__umodsi3>
    cb54:	1004943a 	slli	r2,r2,16
    cb58:	da000417 	ldw	r8,16(sp)
    cb5c:	bdffffcc 	andi	r23,r23,65535
    cb60:	b884b03a 	or	r2,r23,r2
    cb64:	d8c00217 	ldw	r3,8(sp)
    cb68:	1200062e 	bgeu	r2,r8,cb84 <__divdf3+0x424>
    cb6c:	1585883a 	add	r2,r2,r22
    cb70:	813fffc4 	addi	r4,r16,-1
    cb74:	15810236 	bltu	r2,r22,cf80 <__divdf3+0x820>
    cb78:	1201012e 	bgeu	r2,r8,cf80 <__divdf3+0x820>
    cb7c:	843fff84 	addi	r16,r16,-2
    cb80:	1585883a 	add	r2,r2,r22
    cb84:	8822943a 	slli	r17,r17,16
    cb88:	d9800017 	ldw	r6,0(sp)
    cb8c:	1211c83a 	sub	r8,r2,r8
    cb90:	8c22b03a 	or	r17,r17,r16
    cb94:	373fffcc 	andi	fp,r6,65535
    cb98:	8abfffcc 	andi	r10,r17,65535
    cb9c:	8820d43a 	srli	r16,r17,16
    cba0:	5009883a 	mov	r4,r10
    cba4:	e00b883a 	mov	r5,fp
    cba8:	302ed43a 	srli	r23,r6,16
    cbac:	d8c00215 	stw	r3,8(sp)
    cbb0:	da000415 	stw	r8,16(sp)
    cbb4:	da800115 	stw	r10,4(sp)
    cbb8:	00017b40 	call	17b4 <__mulsi3>
    cbbc:	800b883a 	mov	r5,r16
    cbc0:	e009883a 	mov	r4,fp
    cbc4:	d8800515 	stw	r2,20(sp)
    cbc8:	00017b40 	call	17b4 <__mulsi3>
    cbcc:	8009883a 	mov	r4,r16
    cbd0:	b80b883a 	mov	r5,r23
    cbd4:	d8800315 	stw	r2,12(sp)
    cbd8:	00017b40 	call	17b4 <__mulsi3>
    cbdc:	da800117 	ldw	r10,4(sp)
    cbe0:	b80b883a 	mov	r5,r23
    cbe4:	1021883a 	mov	r16,r2
    cbe8:	5009883a 	mov	r4,r10
    cbec:	00017b40 	call	17b4 <__mulsi3>
    cbf0:	d9c00517 	ldw	r7,20(sp)
    cbf4:	da400317 	ldw	r9,12(sp)
    cbf8:	d8c00217 	ldw	r3,8(sp)
    cbfc:	3808d43a 	srli	r4,r7,16
    cc00:	1245883a 	add	r2,r2,r9
    cc04:	da000417 	ldw	r8,16(sp)
    cc08:	2085883a 	add	r2,r4,r2
    cc0c:	1240022e 	bgeu	r2,r9,cc18 <__divdf3+0x4b8>
    cc10:	01000074 	movhi	r4,1
    cc14:	8121883a 	add	r16,r16,r4
    cc18:	1008d43a 	srli	r4,r2,16
    cc1c:	1004943a 	slli	r2,r2,16
    cc20:	39ffffcc 	andi	r7,r7,65535
    cc24:	2409883a 	add	r4,r4,r16
    cc28:	11c5883a 	add	r2,r2,r7
    cc2c:	4100bb36 	bltu	r8,r4,cf1c <__divdf3+0x7bc>
    cc30:	4100d726 	beq	r8,r4,cf90 <__divdf3+0x830>
    cc34:	4109c83a 	sub	r4,r8,r4
    cc38:	a8a1c83a 	sub	r16,r21,r2
    cc3c:	ac2b803a 	cmpltu	r21,r21,r16
    cc40:	256bc83a 	sub	r21,r4,r21
    cc44:	b540d926 	beq	r22,r21,cfac <__divdf3+0x84c>
    cc48:	a00b883a 	mov	r5,r20
    cc4c:	a809883a 	mov	r4,r21
    cc50:	d8c00215 	stw	r3,8(sp)
    cc54:	000bdf80 	call	bdf8 <__udivsi3>
    cc58:	100b883a 	mov	r5,r2
    cc5c:	9009883a 	mov	r4,r18
    cc60:	d8800515 	stw	r2,20(sp)
    cc64:	00017b40 	call	17b4 <__mulsi3>
    cc68:	a809883a 	mov	r4,r21
    cc6c:	a00b883a 	mov	r5,r20
    cc70:	d8800415 	stw	r2,16(sp)
    cc74:	000be5c0 	call	be5c <__umodsi3>
    cc78:	1004943a 	slli	r2,r2,16
    cc7c:	8008d43a 	srli	r4,r16,16
    cc80:	da000417 	ldw	r8,16(sp)
    cc84:	d8c00217 	ldw	r3,8(sp)
    cc88:	2084b03a 	or	r2,r4,r2
    cc8c:	d9c00517 	ldw	r7,20(sp)
    cc90:	1200062e 	bgeu	r2,r8,ccac <__divdf3+0x54c>
    cc94:	1585883a 	add	r2,r2,r22
    cc98:	393fffc4 	addi	r4,r7,-1
    cc9c:	1580c536 	bltu	r2,r22,cfb4 <__divdf3+0x854>
    cca0:	1200c42e 	bgeu	r2,r8,cfb4 <__divdf3+0x854>
    cca4:	39ffff84 	addi	r7,r7,-2
    cca8:	1585883a 	add	r2,r2,r22
    ccac:	122bc83a 	sub	r21,r2,r8
    ccb0:	a00b883a 	mov	r5,r20
    ccb4:	a809883a 	mov	r4,r21
    ccb8:	d8c00215 	stw	r3,8(sp)
    ccbc:	d9c00515 	stw	r7,20(sp)
    ccc0:	000bdf80 	call	bdf8 <__udivsi3>
    ccc4:	9009883a 	mov	r4,r18
    ccc8:	100b883a 	mov	r5,r2
    cccc:	d8800415 	stw	r2,16(sp)
    ccd0:	00017b40 	call	17b4 <__mulsi3>
    ccd4:	a809883a 	mov	r4,r21
    ccd8:	a00b883a 	mov	r5,r20
    ccdc:	1025883a 	mov	r18,r2
    cce0:	000be5c0 	call	be5c <__umodsi3>
    cce4:	1004943a 	slli	r2,r2,16
    cce8:	813fffcc 	andi	r4,r16,65535
    ccec:	d8c00217 	ldw	r3,8(sp)
    ccf0:	20a0b03a 	or	r16,r4,r2
    ccf4:	d9c00517 	ldw	r7,20(sp)
    ccf8:	da000417 	ldw	r8,16(sp)
    ccfc:	8480062e 	bgeu	r16,r18,cd18 <__divdf3+0x5b8>
    cd00:	85a1883a 	add	r16,r16,r22
    cd04:	40bfffc4 	addi	r2,r8,-1
    cd08:	8580ac36 	bltu	r16,r22,cfbc <__divdf3+0x85c>
    cd0c:	8480ab2e 	bgeu	r16,r18,cfbc <__divdf3+0x85c>
    cd10:	423fff84 	addi	r8,r8,-2
    cd14:	85a1883a 	add	r16,r16,r22
    cd18:	3804943a 	slli	r2,r7,16
    cd1c:	84a1c83a 	sub	r16,r16,r18
    cd20:	e009883a 	mov	r4,fp
    cd24:	1228b03a 	or	r20,r2,r8
    cd28:	a1ffffcc 	andi	r7,r20,65535
    cd2c:	a024d43a 	srli	r18,r20,16
    cd30:	380b883a 	mov	r5,r7
    cd34:	d8c00215 	stw	r3,8(sp)
    cd38:	d9c00515 	stw	r7,20(sp)
    cd3c:	00017b40 	call	17b4 <__mulsi3>
    cd40:	900b883a 	mov	r5,r18
    cd44:	e009883a 	mov	r4,fp
    cd48:	102b883a 	mov	r21,r2
    cd4c:	00017b40 	call	17b4 <__mulsi3>
    cd50:	900b883a 	mov	r5,r18
    cd54:	b809883a 	mov	r4,r23
    cd58:	1039883a 	mov	fp,r2
    cd5c:	00017b40 	call	17b4 <__mulsi3>
    cd60:	d9c00517 	ldw	r7,20(sp)
    cd64:	b80b883a 	mov	r5,r23
    cd68:	1025883a 	mov	r18,r2
    cd6c:	3809883a 	mov	r4,r7
    cd70:	00017b40 	call	17b4 <__mulsi3>
    cd74:	a808d43a 	srli	r4,r21,16
    cd78:	1705883a 	add	r2,r2,fp
    cd7c:	d8c00217 	ldw	r3,8(sp)
    cd80:	2085883a 	add	r2,r4,r2
    cd84:	1700022e 	bgeu	r2,fp,cd90 <__divdf3+0x630>
    cd88:	01000074 	movhi	r4,1
    cd8c:	9125883a 	add	r18,r18,r4
    cd90:	1008d43a 	srli	r4,r2,16
    cd94:	1004943a 	slli	r2,r2,16
    cd98:	ad7fffcc 	andi	r21,r21,65535
    cd9c:	2489883a 	add	r4,r4,r18
    cda0:	1545883a 	add	r2,r2,r21
    cda4:	81003836 	bltu	r16,r4,ce88 <__divdf3+0x728>
    cda8:	81003626 	beq	r16,r4,ce84 <__divdf3+0x724>
    cdac:	a5000054 	ori	r20,r20,1
    cdb0:	1880ffc4 	addi	r2,r3,1023
    cdb4:	00bf2e0e 	bge	zero,r2,ca70 <__alt_data_end+0xf800ca70>
    cdb8:	a10001cc 	andi	r4,r20,7
    cdbc:	20000726 	beq	r4,zero,cddc <__divdf3+0x67c>
    cdc0:	a10003cc 	andi	r4,r20,15
    cdc4:	01400104 	movi	r5,4
    cdc8:	21400426 	beq	r4,r5,cddc <__divdf3+0x67c>
    cdcc:	a149883a 	add	r4,r20,r5
    cdd0:	2529803a 	cmpltu	r20,r4,r20
    cdd4:	8d23883a 	add	r17,r17,r20
    cdd8:	2029883a 	mov	r20,r4
    cddc:	8900402c 	andhi	r4,r17,256
    cde0:	20000426 	beq	r4,zero,cdf4 <__divdf3+0x694>
    cde4:	18810004 	addi	r2,r3,1024
    cde8:	00ffc034 	movhi	r3,65280
    cdec:	18ffffc4 	addi	r3,r3,-1
    cdf0:	88e2703a 	and	r17,r17,r3
    cdf4:	00c1ff84 	movi	r3,2046
    cdf8:	18beb416 	blt	r3,r2,c8cc <__alt_data_end+0xf800c8cc>
    cdfc:	a028d0fa 	srli	r20,r20,3
    ce00:	882a977a 	slli	r21,r17,29
    ce04:	8820927a 	slli	r16,r17,9
    ce08:	1081ffcc 	andi	r2,r2,2047
    ce0c:	ad2ab03a 	or	r21,r21,r20
    ce10:	8020d33a 	srli	r16,r16,12
    ce14:	9900004c 	andi	r4,r19,1
    ce18:	003eb006 	br	c8dc <__alt_data_end+0xf800c8dc>
    ce1c:	8080022c 	andhi	r2,r16,8
    ce20:	10001226 	beq	r2,zero,ce6c <__divdf3+0x70c>
    ce24:	8880022c 	andhi	r2,r17,8
    ce28:	1000101e 	bne	r2,zero,ce6c <__divdf3+0x70c>
    ce2c:	00800434 	movhi	r2,16
    ce30:	8c000234 	orhi	r16,r17,8
    ce34:	10bfffc4 	addi	r2,r2,-1
    ce38:	b809883a 	mov	r4,r23
    ce3c:	80a0703a 	and	r16,r16,r2
    ce40:	a02b883a 	mov	r21,r20
    ce44:	003f0806 	br	ca68 <__alt_data_end+0xf800ca68>
    ce48:	008000c4 	movi	r2,3
    ce4c:	3880b126 	beq	r7,r2,d114 <__divdf3+0x9b4>
    ce50:	00800044 	movi	r2,1
    ce54:	38805b1e 	bne	r7,r2,cfc4 <__divdf3+0x864>
    ce58:	e009883a 	mov	r4,fp
    ce5c:	0005883a 	mov	r2,zero
    ce60:	0021883a 	mov	r16,zero
    ce64:	002b883a 	mov	r21,zero
    ce68:	003e9c06 	br	c8dc <__alt_data_end+0xf800c8dc>
    ce6c:	00800434 	movhi	r2,16
    ce70:	84000234 	orhi	r16,r16,8
    ce74:	10bfffc4 	addi	r2,r2,-1
    ce78:	b009883a 	mov	r4,r22
    ce7c:	80a0703a 	and	r16,r16,r2
    ce80:	003ef906 	br	ca68 <__alt_data_end+0xf800ca68>
    ce84:	103fca26 	beq	r2,zero,cdb0 <__alt_data_end+0xf800cdb0>
    ce88:	b421883a 	add	r16,r22,r16
    ce8c:	a17fffc4 	addi	r5,r20,-1
    ce90:	8580422e 	bgeu	r16,r22,cf9c <__divdf3+0x83c>
    ce94:	2829883a 	mov	r20,r5
    ce98:	813fc41e 	bne	r16,r4,cdac <__alt_data_end+0xf800cdac>
    ce9c:	d9800017 	ldw	r6,0(sp)
    cea0:	30bfc21e 	bne	r6,r2,cdac <__alt_data_end+0xf800cdac>
    cea4:	003fc206 	br	cdb0 <__alt_data_end+0xf800cdb0>
    cea8:	143ff604 	addi	r16,r2,-40
    ceac:	8c20983a 	sll	r16,r17,r16
    ceb0:	002b883a 	mov	r21,zero
    ceb4:	003eb406 	br	c988 <__alt_data_end+0xf800c988>
    ceb8:	d9800215 	stw	r6,8(sp)
    cebc:	d9c00515 	stw	r7,20(sp)
    cec0:	da000415 	stw	r8,16(sp)
    cec4:	000e6f40 	call	e6f4 <__clzsi2>
    cec8:	10800804 	addi	r2,r2,32
    cecc:	da000417 	ldw	r8,16(sp)
    ced0:	d9c00517 	ldw	r7,20(sp)
    ced4:	d9800217 	ldw	r6,8(sp)
    ced8:	003ea106 	br	c960 <__alt_data_end+0xf800c960>
    cedc:	147ff604 	addi	r17,r2,-40
    cee0:	3462983a 	sll	r17,r6,r17
    cee4:	0029883a 	mov	r20,zero
    cee8:	003ec906 	br	ca10 <__alt_data_end+0xf800ca10>
    ceec:	3009883a 	mov	r4,r6
    cef0:	d9400115 	stw	r5,4(sp)
    cef4:	d9800215 	stw	r6,8(sp)
    cef8:	da000415 	stw	r8,16(sp)
    cefc:	da400315 	stw	r9,12(sp)
    cf00:	000e6f40 	call	e6f4 <__clzsi2>
    cf04:	10800804 	addi	r2,r2,32
    cf08:	da400317 	ldw	r9,12(sp)
    cf0c:	da000417 	ldw	r8,16(sp)
    cf10:	d9800217 	ldw	r6,8(sp)
    cf14:	d9400117 	ldw	r5,4(sp)
    cf18:	003eb306 	br	c9e8 <__alt_data_end+0xf800c9e8>
    cf1c:	d9800017 	ldw	r6,0(sp)
    cf20:	a9ab883a 	add	r21,r21,r6
    cf24:	a98b803a 	cmpltu	r5,r21,r6
    cf28:	2d8b883a 	add	r5,r5,r22
    cf2c:	2a11883a 	add	r8,r5,r8
    cf30:	897fffc4 	addi	r5,r17,-1
    cf34:	b2000c2e 	bgeu	r22,r8,cf68 <__divdf3+0x808>
    cf38:	41003f36 	bltu	r8,r4,d038 <__divdf3+0x8d8>
    cf3c:	22006c26 	beq	r4,r8,d0f0 <__divdf3+0x990>
    cf40:	4109c83a 	sub	r4,r8,r4
    cf44:	2823883a 	mov	r17,r5
    cf48:	003f3b06 	br	cc38 <__alt_data_end+0xf800cc38>
    cf4c:	ad3ed336 	bltu	r21,r20,ca9c <__alt_data_end+0xf800ca9c>
    cf50:	a804d07a 	srli	r2,r21,1
    cf54:	802e97fa 	slli	r23,r16,31
    cf58:	a82a97fa 	slli	r21,r21,31
    cf5c:	8020d07a 	srli	r16,r16,1
    cf60:	b8aeb03a 	or	r23,r23,r2
    cf64:	003ed006 	br	caa8 <__alt_data_end+0xf800caa8>
    cf68:	b23ff51e 	bne	r22,r8,cf40 <__alt_data_end+0xf800cf40>
    cf6c:	d9800017 	ldw	r6,0(sp)
    cf70:	a9bff12e 	bgeu	r21,r6,cf38 <__alt_data_end+0xf800cf38>
    cf74:	b109c83a 	sub	r4,r22,r4
    cf78:	2823883a 	mov	r17,r5
    cf7c:	003f2e06 	br	cc38 <__alt_data_end+0xf800cc38>
    cf80:	2021883a 	mov	r16,r4
    cf84:	003eff06 	br	cb84 <__alt_data_end+0xf800cb84>
    cf88:	2023883a 	mov	r17,r4
    cf8c:	003ee406 	br	cb20 <__alt_data_end+0xf800cb20>
    cf90:	a8bfe236 	bltu	r21,r2,cf1c <__alt_data_end+0xf800cf1c>
    cf94:	0009883a 	mov	r4,zero
    cf98:	003f2706 	br	cc38 <__alt_data_end+0xf800cc38>
    cf9c:	81002d36 	bltu	r16,r4,d054 <__divdf3+0x8f4>
    cfa0:	24005626 	beq	r4,r16,d0fc <__divdf3+0x99c>
    cfa4:	2829883a 	mov	r20,r5
    cfa8:	003f8006 	br	cdac <__alt_data_end+0xf800cdac>
    cfac:	053fffc4 	movi	r20,-1
    cfb0:	003f7f06 	br	cdb0 <__alt_data_end+0xf800cdb0>
    cfb4:	200f883a 	mov	r7,r4
    cfb8:	003f3c06 	br	ccac <__alt_data_end+0xf800ccac>
    cfbc:	1011883a 	mov	r8,r2
    cfc0:	003f5506 	br	cd18 <__alt_data_end+0xf800cd18>
    cfc4:	e027883a 	mov	r19,fp
    cfc8:	003f7906 	br	cdb0 <__alt_data_end+0xf800cdb0>
    cfcc:	010007c4 	movi	r4,31
    cfd0:	20c02816 	blt	r4,r3,d074 <__divdf3+0x914>
    cfd4:	00800804 	movi	r2,32
    cfd8:	10c5c83a 	sub	r2,r2,r3
    cfdc:	888a983a 	sll	r5,r17,r2
    cfe0:	a0c8d83a 	srl	r4,r20,r3
    cfe4:	a084983a 	sll	r2,r20,r2
    cfe8:	88e2d83a 	srl	r17,r17,r3
    cfec:	2906b03a 	or	r3,r5,r4
    cff0:	1004c03a 	cmpne	r2,r2,zero
    cff4:	1886b03a 	or	r3,r3,r2
    cff8:	188001cc 	andi	r2,r3,7
    cffc:	10000726 	beq	r2,zero,d01c <__divdf3+0x8bc>
    d000:	188003cc 	andi	r2,r3,15
    d004:	01000104 	movi	r4,4
    d008:	11000426 	beq	r2,r4,d01c <__divdf3+0x8bc>
    d00c:	1805883a 	mov	r2,r3
    d010:	10c00104 	addi	r3,r2,4
    d014:	1885803a 	cmpltu	r2,r3,r2
    d018:	88a3883a 	add	r17,r17,r2
    d01c:	8880202c 	andhi	r2,r17,128
    d020:	10002926 	beq	r2,zero,d0c8 <__divdf3+0x968>
    d024:	9900004c 	andi	r4,r19,1
    d028:	00800044 	movi	r2,1
    d02c:	0021883a 	mov	r16,zero
    d030:	002b883a 	mov	r21,zero
    d034:	003e2906 	br	c8dc <__alt_data_end+0xf800c8dc>
    d038:	d9800017 	ldw	r6,0(sp)
    d03c:	8c7fff84 	addi	r17,r17,-2
    d040:	a9ab883a 	add	r21,r21,r6
    d044:	a98b803a 	cmpltu	r5,r21,r6
    d048:	2d8b883a 	add	r5,r5,r22
    d04c:	2a11883a 	add	r8,r5,r8
    d050:	003ef806 	br	cc34 <__alt_data_end+0xf800cc34>
    d054:	d9800017 	ldw	r6,0(sp)
    d058:	318f883a 	add	r7,r6,r6
    d05c:	398b803a 	cmpltu	r5,r7,r6
    d060:	2d8d883a 	add	r6,r5,r22
    d064:	81a1883a 	add	r16,r16,r6
    d068:	a17fff84 	addi	r5,r20,-2
    d06c:	d9c00015 	stw	r7,0(sp)
    d070:	003f8806 	br	ce94 <__alt_data_end+0xf800ce94>
    d074:	013ff844 	movi	r4,-31
    d078:	2085c83a 	sub	r2,r4,r2
    d07c:	8888d83a 	srl	r4,r17,r2
    d080:	00800804 	movi	r2,32
    d084:	18802126 	beq	r3,r2,d10c <__divdf3+0x9ac>
    d088:	04001004 	movi	r16,64
    d08c:	80c7c83a 	sub	r3,r16,r3
    d090:	88e0983a 	sll	r16,r17,r3
    d094:	8504b03a 	or	r2,r16,r20
    d098:	1004c03a 	cmpne	r2,r2,zero
    d09c:	2084b03a 	or	r2,r4,r2
    d0a0:	144001cc 	andi	r17,r2,7
    d0a4:	88000d1e 	bne	r17,zero,d0dc <__divdf3+0x97c>
    d0a8:	0021883a 	mov	r16,zero
    d0ac:	102ad0fa 	srli	r21,r2,3
    d0b0:	9900004c 	andi	r4,r19,1
    d0b4:	0005883a 	mov	r2,zero
    d0b8:	ac6ab03a 	or	r21,r21,r17
    d0bc:	003e0706 	br	c8dc <__alt_data_end+0xf800c8dc>
    d0c0:	1007883a 	mov	r3,r2
    d0c4:	0023883a 	mov	r17,zero
    d0c8:	8820927a 	slli	r16,r17,9
    d0cc:	1805883a 	mov	r2,r3
    d0d0:	8822977a 	slli	r17,r17,29
    d0d4:	8020d33a 	srli	r16,r16,12
    d0d8:	003ff406 	br	d0ac <__alt_data_end+0xf800d0ac>
    d0dc:	10c003cc 	andi	r3,r2,15
    d0e0:	01000104 	movi	r4,4
    d0e4:	193ff626 	beq	r3,r4,d0c0 <__alt_data_end+0xf800d0c0>
    d0e8:	0023883a 	mov	r17,zero
    d0ec:	003fc806 	br	d010 <__alt_data_end+0xf800d010>
    d0f0:	a8bfd136 	bltu	r21,r2,d038 <__alt_data_end+0xf800d038>
    d0f4:	2823883a 	mov	r17,r5
    d0f8:	003fa606 	br	cf94 <__alt_data_end+0xf800cf94>
    d0fc:	d9800017 	ldw	r6,0(sp)
    d100:	30bfd436 	bltu	r6,r2,d054 <__alt_data_end+0xf800d054>
    d104:	2829883a 	mov	r20,r5
    d108:	003f6406 	br	ce9c <__alt_data_end+0xf800ce9c>
    d10c:	0021883a 	mov	r16,zero
    d110:	003fe006 	br	d094 <__alt_data_end+0xf800d094>
    d114:	00800434 	movhi	r2,16
    d118:	8c000234 	orhi	r16,r17,8
    d11c:	10bfffc4 	addi	r2,r2,-1
    d120:	e009883a 	mov	r4,fp
    d124:	80a0703a 	and	r16,r16,r2
    d128:	a02b883a 	mov	r21,r20
    d12c:	003e4e06 	br	ca68 <__alt_data_end+0xf800ca68>

0000d130 <__eqdf2>:
    d130:	2804d53a 	srli	r2,r5,20
    d134:	3806d53a 	srli	r3,r7,20
    d138:	02000434 	movhi	r8,16
    d13c:	423fffc4 	addi	r8,r8,-1
    d140:	1081ffcc 	andi	r2,r2,2047
    d144:	0281ffc4 	movi	r10,2047
    d148:	2a12703a 	and	r9,r5,r8
    d14c:	18c1ffcc 	andi	r3,r3,2047
    d150:	3a10703a 	and	r8,r7,r8
    d154:	280ad7fa 	srli	r5,r5,31
    d158:	380ed7fa 	srli	r7,r7,31
    d15c:	12801026 	beq	r2,r10,d1a0 <__eqdf2+0x70>
    d160:	0281ffc4 	movi	r10,2047
    d164:	1a800a26 	beq	r3,r10,d190 <__eqdf2+0x60>
    d168:	10c00226 	beq	r2,r3,d174 <__eqdf2+0x44>
    d16c:	00800044 	movi	r2,1
    d170:	f800283a 	ret
    d174:	4a3ffd1e 	bne	r9,r8,d16c <__alt_data_end+0xf800d16c>
    d178:	21bffc1e 	bne	r4,r6,d16c <__alt_data_end+0xf800d16c>
    d17c:	29c00c26 	beq	r5,r7,d1b0 <__eqdf2+0x80>
    d180:	103ffa1e 	bne	r2,zero,d16c <__alt_data_end+0xf800d16c>
    d184:	2244b03a 	or	r2,r4,r9
    d188:	1004c03a 	cmpne	r2,r2,zero
    d18c:	f800283a 	ret
    d190:	3214b03a 	or	r10,r6,r8
    d194:	503ff426 	beq	r10,zero,d168 <__alt_data_end+0xf800d168>
    d198:	00800044 	movi	r2,1
    d19c:	f800283a 	ret
    d1a0:	2254b03a 	or	r10,r4,r9
    d1a4:	503fee26 	beq	r10,zero,d160 <__alt_data_end+0xf800d160>
    d1a8:	00800044 	movi	r2,1
    d1ac:	f800283a 	ret
    d1b0:	0005883a 	mov	r2,zero
    d1b4:	f800283a 	ret

0000d1b8 <__gedf2>:
    d1b8:	2804d53a 	srli	r2,r5,20
    d1bc:	3806d53a 	srli	r3,r7,20
    d1c0:	02000434 	movhi	r8,16
    d1c4:	423fffc4 	addi	r8,r8,-1
    d1c8:	1081ffcc 	andi	r2,r2,2047
    d1cc:	0241ffc4 	movi	r9,2047
    d1d0:	2a14703a 	and	r10,r5,r8
    d1d4:	18c1ffcc 	andi	r3,r3,2047
    d1d8:	3a10703a 	and	r8,r7,r8
    d1dc:	280ad7fa 	srli	r5,r5,31
    d1e0:	380ed7fa 	srli	r7,r7,31
    d1e4:	12401d26 	beq	r2,r9,d25c <__gedf2+0xa4>
    d1e8:	0241ffc4 	movi	r9,2047
    d1ec:	1a401226 	beq	r3,r9,d238 <__gedf2+0x80>
    d1f0:	1000081e 	bne	r2,zero,d214 <__gedf2+0x5c>
    d1f4:	2296b03a 	or	r11,r4,r10
    d1f8:	5813003a 	cmpeq	r9,r11,zero
    d1fc:	1800091e 	bne	r3,zero,d224 <__gedf2+0x6c>
    d200:	3218b03a 	or	r12,r6,r8
    d204:	6000071e 	bne	r12,zero,d224 <__gedf2+0x6c>
    d208:	0005883a 	mov	r2,zero
    d20c:	5800101e 	bne	r11,zero,d250 <__gedf2+0x98>
    d210:	f800283a 	ret
    d214:	18000c1e 	bne	r3,zero,d248 <__gedf2+0x90>
    d218:	3212b03a 	or	r9,r6,r8
    d21c:	48000c26 	beq	r9,zero,d250 <__gedf2+0x98>
    d220:	0013883a 	mov	r9,zero
    d224:	39c03fcc 	andi	r7,r7,255
    d228:	48000826 	beq	r9,zero,d24c <__gedf2+0x94>
    d22c:	38000926 	beq	r7,zero,d254 <__gedf2+0x9c>
    d230:	00800044 	movi	r2,1
    d234:	f800283a 	ret
    d238:	3212b03a 	or	r9,r6,r8
    d23c:	483fec26 	beq	r9,zero,d1f0 <__alt_data_end+0xf800d1f0>
    d240:	00bfff84 	movi	r2,-2
    d244:	f800283a 	ret
    d248:	39c03fcc 	andi	r7,r7,255
    d24c:	29c00626 	beq	r5,r7,d268 <__gedf2+0xb0>
    d250:	283ff726 	beq	r5,zero,d230 <__alt_data_end+0xf800d230>
    d254:	00bfffc4 	movi	r2,-1
    d258:	f800283a 	ret
    d25c:	2292b03a 	or	r9,r4,r10
    d260:	483fe126 	beq	r9,zero,d1e8 <__alt_data_end+0xf800d1e8>
    d264:	003ff606 	br	d240 <__alt_data_end+0xf800d240>
    d268:	18bff916 	blt	r3,r2,d250 <__alt_data_end+0xf800d250>
    d26c:	10c00316 	blt	r2,r3,d27c <__gedf2+0xc4>
    d270:	42bff736 	bltu	r8,r10,d250 <__alt_data_end+0xf800d250>
    d274:	52000326 	beq	r10,r8,d284 <__gedf2+0xcc>
    d278:	5200042e 	bgeu	r10,r8,d28c <__gedf2+0xd4>
    d27c:	283fec1e 	bne	r5,zero,d230 <__alt_data_end+0xf800d230>
    d280:	003ff406 	br	d254 <__alt_data_end+0xf800d254>
    d284:	313ff236 	bltu	r6,r4,d250 <__alt_data_end+0xf800d250>
    d288:	21bffc36 	bltu	r4,r6,d27c <__alt_data_end+0xf800d27c>
    d28c:	0005883a 	mov	r2,zero
    d290:	f800283a 	ret

0000d294 <__ledf2>:
    d294:	2804d53a 	srli	r2,r5,20
    d298:	3810d53a 	srli	r8,r7,20
    d29c:	00c00434 	movhi	r3,16
    d2a0:	18ffffc4 	addi	r3,r3,-1
    d2a4:	1081ffcc 	andi	r2,r2,2047
    d2a8:	0241ffc4 	movi	r9,2047
    d2ac:	28d4703a 	and	r10,r5,r3
    d2b0:	4201ffcc 	andi	r8,r8,2047
    d2b4:	38c6703a 	and	r3,r7,r3
    d2b8:	280ad7fa 	srli	r5,r5,31
    d2bc:	380ed7fa 	srli	r7,r7,31
    d2c0:	12401f26 	beq	r2,r9,d340 <__ledf2+0xac>
    d2c4:	0241ffc4 	movi	r9,2047
    d2c8:	42401426 	beq	r8,r9,d31c <__ledf2+0x88>
    d2cc:	1000091e 	bne	r2,zero,d2f4 <__ledf2+0x60>
    d2d0:	2296b03a 	or	r11,r4,r10
    d2d4:	5813003a 	cmpeq	r9,r11,zero
    d2d8:	29403fcc 	andi	r5,r5,255
    d2dc:	40000a1e 	bne	r8,zero,d308 <__ledf2+0x74>
    d2e0:	30d8b03a 	or	r12,r6,r3
    d2e4:	6000081e 	bne	r12,zero,d308 <__ledf2+0x74>
    d2e8:	0005883a 	mov	r2,zero
    d2ec:	5800111e 	bne	r11,zero,d334 <__ledf2+0xa0>
    d2f0:	f800283a 	ret
    d2f4:	29403fcc 	andi	r5,r5,255
    d2f8:	40000c1e 	bne	r8,zero,d32c <__ledf2+0x98>
    d2fc:	30d2b03a 	or	r9,r6,r3
    d300:	48000c26 	beq	r9,zero,d334 <__ledf2+0xa0>
    d304:	0013883a 	mov	r9,zero
    d308:	39c03fcc 	andi	r7,r7,255
    d30c:	48000826 	beq	r9,zero,d330 <__ledf2+0x9c>
    d310:	38001126 	beq	r7,zero,d358 <__ledf2+0xc4>
    d314:	00800044 	movi	r2,1
    d318:	f800283a 	ret
    d31c:	30d2b03a 	or	r9,r6,r3
    d320:	483fea26 	beq	r9,zero,d2cc <__alt_data_end+0xf800d2cc>
    d324:	00800084 	movi	r2,2
    d328:	f800283a 	ret
    d32c:	39c03fcc 	andi	r7,r7,255
    d330:	39400726 	beq	r7,r5,d350 <__ledf2+0xbc>
    d334:	2800081e 	bne	r5,zero,d358 <__ledf2+0xc4>
    d338:	00800044 	movi	r2,1
    d33c:	f800283a 	ret
    d340:	2292b03a 	or	r9,r4,r10
    d344:	483fdf26 	beq	r9,zero,d2c4 <__alt_data_end+0xf800d2c4>
    d348:	00800084 	movi	r2,2
    d34c:	f800283a 	ret
    d350:	4080030e 	bge	r8,r2,d360 <__ledf2+0xcc>
    d354:	383fef26 	beq	r7,zero,d314 <__alt_data_end+0xf800d314>
    d358:	00bfffc4 	movi	r2,-1
    d35c:	f800283a 	ret
    d360:	123feb16 	blt	r2,r8,d310 <__alt_data_end+0xf800d310>
    d364:	1abff336 	bltu	r3,r10,d334 <__alt_data_end+0xf800d334>
    d368:	50c00326 	beq	r10,r3,d378 <__ledf2+0xe4>
    d36c:	50c0042e 	bgeu	r10,r3,d380 <__ledf2+0xec>
    d370:	283fe81e 	bne	r5,zero,d314 <__alt_data_end+0xf800d314>
    d374:	003ff806 	br	d358 <__alt_data_end+0xf800d358>
    d378:	313fee36 	bltu	r6,r4,d334 <__alt_data_end+0xf800d334>
    d37c:	21bffc36 	bltu	r4,r6,d370 <__alt_data_end+0xf800d370>
    d380:	0005883a 	mov	r2,zero
    d384:	f800283a 	ret

0000d388 <__muldf3>:
    d388:	deffee04 	addi	sp,sp,-72
    d38c:	dd000c15 	stw	r20,48(sp)
    d390:	2828d53a 	srli	r20,r5,20
    d394:	ddc00f15 	stw	r23,60(sp)
    d398:	282ed7fa 	srli	r23,r5,31
    d39c:	dc000815 	stw	r16,32(sp)
    d3a0:	04000434 	movhi	r16,16
    d3a4:	dcc00b15 	stw	r19,44(sp)
    d3a8:	843fffc4 	addi	r16,r16,-1
    d3ac:	dfc01115 	stw	ra,68(sp)
    d3b0:	df001015 	stw	fp,64(sp)
    d3b4:	dd800e15 	stw	r22,56(sp)
    d3b8:	dd400d15 	stw	r21,52(sp)
    d3bc:	dc800a15 	stw	r18,40(sp)
    d3c0:	dc400915 	stw	r17,36(sp)
    d3c4:	a501ffcc 	andi	r20,r20,2047
    d3c8:	2c20703a 	and	r16,r5,r16
    d3cc:	b827883a 	mov	r19,r23
    d3d0:	ba403fcc 	andi	r9,r23,255
    d3d4:	a0006026 	beq	r20,zero,d558 <__muldf3+0x1d0>
    d3d8:	0081ffc4 	movi	r2,2047
    d3dc:	202d883a 	mov	r22,r4
    d3e0:	a0803626 	beq	r20,r2,d4bc <__muldf3+0x134>
    d3e4:	84000434 	orhi	r16,r16,16
    d3e8:	200ad77a 	srli	r5,r4,29
    d3ec:	800490fa 	slli	r2,r16,3
    d3f0:	202c90fa 	slli	r22,r4,3
    d3f4:	a53f0044 	addi	r20,r20,-1023
    d3f8:	28a0b03a 	or	r16,r5,r2
    d3fc:	002b883a 	mov	r21,zero
    d400:	000b883a 	mov	r5,zero
    d404:	3804d53a 	srli	r2,r7,20
    d408:	3838d7fa 	srli	fp,r7,31
    d40c:	04400434 	movhi	r17,16
    d410:	8c7fffc4 	addi	r17,r17,-1
    d414:	1081ffcc 	andi	r2,r2,2047
    d418:	3025883a 	mov	r18,r6
    d41c:	3c62703a 	and	r17,r7,r17
    d420:	e2803fcc 	andi	r10,fp,255
    d424:	10006d26 	beq	r2,zero,d5dc <__muldf3+0x254>
    d428:	00c1ffc4 	movi	r3,2047
    d42c:	10c06526 	beq	r2,r3,d5c4 <__muldf3+0x23c>
    d430:	8c400434 	orhi	r17,r17,16
    d434:	300ed77a 	srli	r7,r6,29
    d438:	880690fa 	slli	r3,r17,3
    d43c:	302490fa 	slli	r18,r6,3
    d440:	10bf0044 	addi	r2,r2,-1023
    d444:	38e2b03a 	or	r17,r7,r3
    d448:	000f883a 	mov	r7,zero
    d44c:	a087883a 	add	r3,r20,r2
    d450:	010003c4 	movi	r4,15
    d454:	3d44b03a 	or	r2,r7,r21
    d458:	e5ccf03a 	xor	r6,fp,r23
    d45c:	1a000044 	addi	r8,r3,1
    d460:	20809b36 	bltu	r4,r2,d6d0 <__muldf3+0x348>
    d464:	100490ba 	slli	r2,r2,2
    d468:	01000074 	movhi	r4,1
    d46c:	21351f04 	addi	r4,r4,-11140
    d470:	1105883a 	add	r2,r2,r4
    d474:	10800017 	ldw	r2,0(r2)
    d478:	1000683a 	jmp	r2
    d47c:	0000d6d0 	cmplti	zero,zero,859
    d480:	0000d4dc 	xori	zero,zero,851
    d484:	0000d4dc 	xori	zero,zero,851
    d488:	0000d4d8 	cmpnei	zero,zero,851
    d48c:	0000d6ac 	andhi	zero,zero,858
    d490:	0000d6ac 	andhi	zero,zero,858
    d494:	0000d694 	movui	zero,858
    d498:	0000d4d8 	cmpnei	zero,zero,851
    d49c:	0000d6ac 	andhi	zero,zero,858
    d4a0:	0000d694 	movui	zero,858
    d4a4:	0000d6ac 	andhi	zero,zero,858
    d4a8:	0000d4d8 	cmpnei	zero,zero,851
    d4ac:	0000d6bc 	xorhi	zero,zero,858
    d4b0:	0000d6bc 	xorhi	zero,zero,858
    d4b4:	0000d6bc 	xorhi	zero,zero,858
    d4b8:	0000da1c 	xori	zero,zero,872
    d4bc:	2404b03a 	or	r2,r4,r16
    d4c0:	1000711e 	bne	r2,zero,d688 <__muldf3+0x300>
    d4c4:	05400204 	movi	r21,8
    d4c8:	0021883a 	mov	r16,zero
    d4cc:	002d883a 	mov	r22,zero
    d4d0:	01400084 	movi	r5,2
    d4d4:	003fcb06 	br	d404 <__alt_data_end+0xf800d404>
    d4d8:	500d883a 	mov	r6,r10
    d4dc:	00800084 	movi	r2,2
    d4e0:	38805926 	beq	r7,r2,d648 <__muldf3+0x2c0>
    d4e4:	008000c4 	movi	r2,3
    d4e8:	3881bb26 	beq	r7,r2,dbd8 <__muldf3+0x850>
    d4ec:	00800044 	movi	r2,1
    d4f0:	3881961e 	bne	r7,r2,db4c <__muldf3+0x7c4>
    d4f4:	3027883a 	mov	r19,r6
    d4f8:	0005883a 	mov	r2,zero
    d4fc:	0021883a 	mov	r16,zero
    d500:	002d883a 	mov	r22,zero
    d504:	1004953a 	slli	r2,r2,20
    d508:	98c03fcc 	andi	r3,r19,255
    d50c:	04400434 	movhi	r17,16
    d510:	8c7fffc4 	addi	r17,r17,-1
    d514:	180697fa 	slli	r3,r3,31
    d518:	8460703a 	and	r16,r16,r17
    d51c:	80a0b03a 	or	r16,r16,r2
    d520:	80c6b03a 	or	r3,r16,r3
    d524:	b005883a 	mov	r2,r22
    d528:	dfc01117 	ldw	ra,68(sp)
    d52c:	df001017 	ldw	fp,64(sp)
    d530:	ddc00f17 	ldw	r23,60(sp)
    d534:	dd800e17 	ldw	r22,56(sp)
    d538:	dd400d17 	ldw	r21,52(sp)
    d53c:	dd000c17 	ldw	r20,48(sp)
    d540:	dcc00b17 	ldw	r19,44(sp)
    d544:	dc800a17 	ldw	r18,40(sp)
    d548:	dc400917 	ldw	r17,36(sp)
    d54c:	dc000817 	ldw	r16,32(sp)
    d550:	dec01204 	addi	sp,sp,72
    d554:	f800283a 	ret
    d558:	2404b03a 	or	r2,r4,r16
    d55c:	202b883a 	mov	r21,r4
    d560:	10004426 	beq	r2,zero,d674 <__muldf3+0x2ec>
    d564:	80015126 	beq	r16,zero,daac <__muldf3+0x724>
    d568:	8009883a 	mov	r4,r16
    d56c:	d9800715 	stw	r6,28(sp)
    d570:	d9c00215 	stw	r7,8(sp)
    d574:	da400415 	stw	r9,16(sp)
    d578:	000e6f40 	call	e6f4 <__clzsi2>
    d57c:	d9800717 	ldw	r6,28(sp)
    d580:	d9c00217 	ldw	r7,8(sp)
    d584:	da400417 	ldw	r9,16(sp)
    d588:	113ffd44 	addi	r4,r2,-11
    d58c:	00c00704 	movi	r3,28
    d590:	19014216 	blt	r3,r4,da9c <__muldf3+0x714>
    d594:	00c00744 	movi	r3,29
    d598:	15bffe04 	addi	r22,r2,-8
    d59c:	1907c83a 	sub	r3,r3,r4
    d5a0:	85a0983a 	sll	r16,r16,r22
    d5a4:	a8c6d83a 	srl	r3,r21,r3
    d5a8:	adac983a 	sll	r22,r21,r22
    d5ac:	1c20b03a 	or	r16,r3,r16
    d5b0:	1080fcc4 	addi	r2,r2,1011
    d5b4:	00a9c83a 	sub	r20,zero,r2
    d5b8:	002b883a 	mov	r21,zero
    d5bc:	000b883a 	mov	r5,zero
    d5c0:	003f9006 	br	d404 <__alt_data_end+0xf800d404>
    d5c4:	3446b03a 	or	r3,r6,r17
    d5c8:	1800281e 	bne	r3,zero,d66c <__muldf3+0x2e4>
    d5cc:	0023883a 	mov	r17,zero
    d5d0:	0025883a 	mov	r18,zero
    d5d4:	01c00084 	movi	r7,2
    d5d8:	003f9c06 	br	d44c <__alt_data_end+0xf800d44c>
    d5dc:	3446b03a 	or	r3,r6,r17
    d5e0:	18001e26 	beq	r3,zero,d65c <__muldf3+0x2d4>
    d5e4:	88012126 	beq	r17,zero,da6c <__muldf3+0x6e4>
    d5e8:	8809883a 	mov	r4,r17
    d5ec:	d9400215 	stw	r5,8(sp)
    d5f0:	d9800715 	stw	r6,28(sp)
    d5f4:	da400415 	stw	r9,16(sp)
    d5f8:	da800315 	stw	r10,12(sp)
    d5fc:	000e6f40 	call	e6f4 <__clzsi2>
    d600:	d9400217 	ldw	r5,8(sp)
    d604:	d9800717 	ldw	r6,28(sp)
    d608:	da400417 	ldw	r9,16(sp)
    d60c:	da800317 	ldw	r10,12(sp)
    d610:	113ffd44 	addi	r4,r2,-11
    d614:	00c00704 	movi	r3,28
    d618:	19011016 	blt	r3,r4,da5c <__muldf3+0x6d4>
    d61c:	00c00744 	movi	r3,29
    d620:	14bffe04 	addi	r18,r2,-8
    d624:	1907c83a 	sub	r3,r3,r4
    d628:	8ca2983a 	sll	r17,r17,r18
    d62c:	30c6d83a 	srl	r3,r6,r3
    d630:	34a4983a 	sll	r18,r6,r18
    d634:	1c62b03a 	or	r17,r3,r17
    d638:	1080fcc4 	addi	r2,r2,1011
    d63c:	0085c83a 	sub	r2,zero,r2
    d640:	000f883a 	mov	r7,zero
    d644:	003f8106 	br	d44c <__alt_data_end+0xf800d44c>
    d648:	3027883a 	mov	r19,r6
    d64c:	0081ffc4 	movi	r2,2047
    d650:	0021883a 	mov	r16,zero
    d654:	002d883a 	mov	r22,zero
    d658:	003faa06 	br	d504 <__alt_data_end+0xf800d504>
    d65c:	0023883a 	mov	r17,zero
    d660:	0025883a 	mov	r18,zero
    d664:	01c00044 	movi	r7,1
    d668:	003f7806 	br	d44c <__alt_data_end+0xf800d44c>
    d66c:	01c000c4 	movi	r7,3
    d670:	003f7606 	br	d44c <__alt_data_end+0xf800d44c>
    d674:	05400104 	movi	r21,4
    d678:	0021883a 	mov	r16,zero
    d67c:	002d883a 	mov	r22,zero
    d680:	01400044 	movi	r5,1
    d684:	003f5f06 	br	d404 <__alt_data_end+0xf800d404>
    d688:	05400304 	movi	r21,12
    d68c:	014000c4 	movi	r5,3
    d690:	003f5c06 	br	d404 <__alt_data_end+0xf800d404>
    d694:	04000434 	movhi	r16,16
    d698:	0027883a 	mov	r19,zero
    d69c:	843fffc4 	addi	r16,r16,-1
    d6a0:	05bfffc4 	movi	r22,-1
    d6a4:	0081ffc4 	movi	r2,2047
    d6a8:	003f9606 	br	d504 <__alt_data_end+0xf800d504>
    d6ac:	8023883a 	mov	r17,r16
    d6b0:	b025883a 	mov	r18,r22
    d6b4:	280f883a 	mov	r7,r5
    d6b8:	003f8806 	br	d4dc <__alt_data_end+0xf800d4dc>
    d6bc:	8023883a 	mov	r17,r16
    d6c0:	b025883a 	mov	r18,r22
    d6c4:	480d883a 	mov	r6,r9
    d6c8:	280f883a 	mov	r7,r5
    d6cc:	003f8306 	br	d4dc <__alt_data_end+0xf800d4dc>
    d6d0:	b026d43a 	srli	r19,r22,16
    d6d4:	902ed43a 	srli	r23,r18,16
    d6d8:	b5bfffcc 	andi	r22,r22,65535
    d6dc:	94bfffcc 	andi	r18,r18,65535
    d6e0:	b00b883a 	mov	r5,r22
    d6e4:	9009883a 	mov	r4,r18
    d6e8:	d8c00515 	stw	r3,20(sp)
    d6ec:	d9800715 	stw	r6,28(sp)
    d6f0:	da000615 	stw	r8,24(sp)
    d6f4:	00017b40 	call	17b4 <__mulsi3>
    d6f8:	980b883a 	mov	r5,r19
    d6fc:	9009883a 	mov	r4,r18
    d700:	1029883a 	mov	r20,r2
    d704:	00017b40 	call	17b4 <__mulsi3>
    d708:	b80b883a 	mov	r5,r23
    d70c:	9809883a 	mov	r4,r19
    d710:	102b883a 	mov	r21,r2
    d714:	00017b40 	call	17b4 <__mulsi3>
    d718:	b809883a 	mov	r4,r23
    d71c:	b00b883a 	mov	r5,r22
    d720:	1039883a 	mov	fp,r2
    d724:	00017b40 	call	17b4 <__mulsi3>
    d728:	a008d43a 	srli	r4,r20,16
    d72c:	1545883a 	add	r2,r2,r21
    d730:	d8c00517 	ldw	r3,20(sp)
    d734:	2085883a 	add	r2,r4,r2
    d738:	d9800717 	ldw	r6,28(sp)
    d73c:	da000617 	ldw	r8,24(sp)
    d740:	1540022e 	bgeu	r2,r21,d74c <__muldf3+0x3c4>
    d744:	01000074 	movhi	r4,1
    d748:	e139883a 	add	fp,fp,r4
    d74c:	100e943a 	slli	r7,r2,16
    d750:	1004d43a 	srli	r2,r2,16
    d754:	882ad43a 	srli	r21,r17,16
    d758:	a53fffcc 	andi	r20,r20,65535
    d75c:	8c7fffcc 	andi	r17,r17,65535
    d760:	3d29883a 	add	r20,r7,r20
    d764:	b00b883a 	mov	r5,r22
    d768:	8809883a 	mov	r4,r17
    d76c:	d8c00515 	stw	r3,20(sp)
    d770:	d9800715 	stw	r6,28(sp)
    d774:	da000615 	stw	r8,24(sp)
    d778:	dd000115 	stw	r20,4(sp)
    d77c:	d8800015 	stw	r2,0(sp)
    d780:	00017b40 	call	17b4 <__mulsi3>
    d784:	980b883a 	mov	r5,r19
    d788:	8809883a 	mov	r4,r17
    d78c:	d8800215 	stw	r2,8(sp)
    d790:	00017b40 	call	17b4 <__mulsi3>
    d794:	9809883a 	mov	r4,r19
    d798:	a80b883a 	mov	r5,r21
    d79c:	1029883a 	mov	r20,r2
    d7a0:	00017b40 	call	17b4 <__mulsi3>
    d7a4:	b00b883a 	mov	r5,r22
    d7a8:	a809883a 	mov	r4,r21
    d7ac:	d8800415 	stw	r2,16(sp)
    d7b0:	00017b40 	call	17b4 <__mulsi3>
    d7b4:	d9c00217 	ldw	r7,8(sp)
    d7b8:	1505883a 	add	r2,r2,r20
    d7bc:	d8c00517 	ldw	r3,20(sp)
    d7c0:	3826d43a 	srli	r19,r7,16
    d7c4:	d9800717 	ldw	r6,28(sp)
    d7c8:	da000617 	ldw	r8,24(sp)
    d7cc:	9885883a 	add	r2,r19,r2
    d7d0:	da400417 	ldw	r9,16(sp)
    d7d4:	1500022e 	bgeu	r2,r20,d7e0 <__muldf3+0x458>
    d7d8:	01000074 	movhi	r4,1
    d7dc:	4913883a 	add	r9,r9,r4
    d7e0:	1028d43a 	srli	r20,r2,16
    d7e4:	1004943a 	slli	r2,r2,16
    d7e8:	802cd43a 	srli	r22,r16,16
    d7ec:	843fffcc 	andi	r16,r16,65535
    d7f0:	3cffffcc 	andi	r19,r7,65535
    d7f4:	9009883a 	mov	r4,r18
    d7f8:	800b883a 	mov	r5,r16
    d7fc:	a269883a 	add	r20,r20,r9
    d800:	d8c00515 	stw	r3,20(sp)
    d804:	d9800715 	stw	r6,28(sp)
    d808:	da000615 	stw	r8,24(sp)
    d80c:	14e7883a 	add	r19,r2,r19
    d810:	00017b40 	call	17b4 <__mulsi3>
    d814:	9009883a 	mov	r4,r18
    d818:	b00b883a 	mov	r5,r22
    d81c:	d8800315 	stw	r2,12(sp)
    d820:	00017b40 	call	17b4 <__mulsi3>
    d824:	b809883a 	mov	r4,r23
    d828:	b00b883a 	mov	r5,r22
    d82c:	d8800215 	stw	r2,8(sp)
    d830:	00017b40 	call	17b4 <__mulsi3>
    d834:	b80b883a 	mov	r5,r23
    d838:	8009883a 	mov	r4,r16
    d83c:	d8800415 	stw	r2,16(sp)
    d840:	00017b40 	call	17b4 <__mulsi3>
    d844:	da800317 	ldw	r10,12(sp)
    d848:	d9c00217 	ldw	r7,8(sp)
    d84c:	d9000017 	ldw	r4,0(sp)
    d850:	502ed43a 	srli	r23,r10,16
    d854:	11c5883a 	add	r2,r2,r7
    d858:	24e5883a 	add	r18,r4,r19
    d85c:	b885883a 	add	r2,r23,r2
    d860:	d8c00517 	ldw	r3,20(sp)
    d864:	d9800717 	ldw	r6,28(sp)
    d868:	da000617 	ldw	r8,24(sp)
    d86c:	da400417 	ldw	r9,16(sp)
    d870:	11c0022e 	bgeu	r2,r7,d87c <__muldf3+0x4f4>
    d874:	01000074 	movhi	r4,1
    d878:	4913883a 	add	r9,r9,r4
    d87c:	100ed43a 	srli	r7,r2,16
    d880:	1004943a 	slli	r2,r2,16
    d884:	55ffffcc 	andi	r23,r10,65535
    d888:	3a53883a 	add	r9,r7,r9
    d88c:	8809883a 	mov	r4,r17
    d890:	800b883a 	mov	r5,r16
    d894:	d8c00515 	stw	r3,20(sp)
    d898:	d9800715 	stw	r6,28(sp)
    d89c:	da000615 	stw	r8,24(sp)
    d8a0:	da400415 	stw	r9,16(sp)
    d8a4:	15ef883a 	add	r23,r2,r23
    d8a8:	00017b40 	call	17b4 <__mulsi3>
    d8ac:	8809883a 	mov	r4,r17
    d8b0:	b00b883a 	mov	r5,r22
    d8b4:	d8800215 	stw	r2,8(sp)
    d8b8:	00017b40 	call	17b4 <__mulsi3>
    d8bc:	b00b883a 	mov	r5,r22
    d8c0:	a809883a 	mov	r4,r21
    d8c4:	d8800315 	stw	r2,12(sp)
    d8c8:	00017b40 	call	17b4 <__mulsi3>
    d8cc:	8009883a 	mov	r4,r16
    d8d0:	a80b883a 	mov	r5,r21
    d8d4:	1023883a 	mov	r17,r2
    d8d8:	00017b40 	call	17b4 <__mulsi3>
    d8dc:	d9c00217 	ldw	r7,8(sp)
    d8e0:	da800317 	ldw	r10,12(sp)
    d8e4:	d8c00517 	ldw	r3,20(sp)
    d8e8:	3808d43a 	srli	r4,r7,16
    d8ec:	1285883a 	add	r2,r2,r10
    d8f0:	d9800717 	ldw	r6,28(sp)
    d8f4:	2085883a 	add	r2,r4,r2
    d8f8:	da000617 	ldw	r8,24(sp)
    d8fc:	da400417 	ldw	r9,16(sp)
    d900:	1280022e 	bgeu	r2,r10,d90c <__muldf3+0x584>
    d904:	01000074 	movhi	r4,1
    d908:	8923883a 	add	r17,r17,r4
    d90c:	1008943a 	slli	r4,r2,16
    d910:	39ffffcc 	andi	r7,r7,65535
    d914:	e4b9883a 	add	fp,fp,r18
    d918:	21cf883a 	add	r7,r4,r7
    d91c:	e4e7803a 	cmpltu	r19,fp,r19
    d920:	3d0f883a 	add	r7,r7,r20
    d924:	bf39883a 	add	fp,r23,fp
    d928:	99c9883a 	add	r4,r19,r7
    d92c:	e5ef803a 	cmpltu	r23,fp,r23
    d930:	490b883a 	add	r5,r9,r4
    d934:	1004d43a 	srli	r2,r2,16
    d938:	b965883a 	add	r18,r23,r5
    d93c:	24c9803a 	cmpltu	r4,r4,r19
    d940:	3d29803a 	cmpltu	r20,r7,r20
    d944:	a128b03a 	or	r20,r20,r4
    d948:	95ef803a 	cmpltu	r23,r18,r23
    d94c:	2a53803a 	cmpltu	r9,r5,r9
    d950:	a0a9883a 	add	r20,r20,r2
    d954:	4deeb03a 	or	r23,r9,r23
    d958:	a5ef883a 	add	r23,r20,r23
    d95c:	bc63883a 	add	r17,r23,r17
    d960:	e004927a 	slli	r2,fp,9
    d964:	d9000117 	ldw	r4,4(sp)
    d968:	882e927a 	slli	r23,r17,9
    d96c:	9022d5fa 	srli	r17,r18,23
    d970:	e038d5fa 	srli	fp,fp,23
    d974:	1104b03a 	or	r2,r2,r4
    d978:	9024927a 	slli	r18,r18,9
    d97c:	1004c03a 	cmpne	r2,r2,zero
    d980:	bc62b03a 	or	r17,r23,r17
    d984:	1738b03a 	or	fp,r2,fp
    d988:	8880402c 	andhi	r2,r17,256
    d98c:	e4a4b03a 	or	r18,fp,r18
    d990:	10000726 	beq	r2,zero,d9b0 <__muldf3+0x628>
    d994:	9006d07a 	srli	r3,r18,1
    d998:	880497fa 	slli	r2,r17,31
    d99c:	9480004c 	andi	r18,r18,1
    d9a0:	8822d07a 	srli	r17,r17,1
    d9a4:	1ca4b03a 	or	r18,r3,r18
    d9a8:	14a4b03a 	or	r18,r2,r18
    d9ac:	4007883a 	mov	r3,r8
    d9b0:	1880ffc4 	addi	r2,r3,1023
    d9b4:	0080460e 	bge	zero,r2,dad0 <__muldf3+0x748>
    d9b8:	910001cc 	andi	r4,r18,7
    d9bc:	20000726 	beq	r4,zero,d9dc <__muldf3+0x654>
    d9c0:	910003cc 	andi	r4,r18,15
    d9c4:	01400104 	movi	r5,4
    d9c8:	21400426 	beq	r4,r5,d9dc <__muldf3+0x654>
    d9cc:	9149883a 	add	r4,r18,r5
    d9d0:	24a5803a 	cmpltu	r18,r4,r18
    d9d4:	8ca3883a 	add	r17,r17,r18
    d9d8:	2025883a 	mov	r18,r4
    d9dc:	8900402c 	andhi	r4,r17,256
    d9e0:	20000426 	beq	r4,zero,d9f4 <__muldf3+0x66c>
    d9e4:	18810004 	addi	r2,r3,1024
    d9e8:	00ffc034 	movhi	r3,65280
    d9ec:	18ffffc4 	addi	r3,r3,-1
    d9f0:	88e2703a 	and	r17,r17,r3
    d9f4:	00c1ff84 	movi	r3,2046
    d9f8:	18bf1316 	blt	r3,r2,d648 <__alt_data_end+0xf800d648>
    d9fc:	882c977a 	slli	r22,r17,29
    da00:	9024d0fa 	srli	r18,r18,3
    da04:	8822927a 	slli	r17,r17,9
    da08:	1081ffcc 	andi	r2,r2,2047
    da0c:	b4acb03a 	or	r22,r22,r18
    da10:	8820d33a 	srli	r16,r17,12
    da14:	3027883a 	mov	r19,r6
    da18:	003eba06 	br	d504 <__alt_data_end+0xf800d504>
    da1c:	8080022c 	andhi	r2,r16,8
    da20:	10000926 	beq	r2,zero,da48 <__muldf3+0x6c0>
    da24:	8880022c 	andhi	r2,r17,8
    da28:	1000071e 	bne	r2,zero,da48 <__muldf3+0x6c0>
    da2c:	00800434 	movhi	r2,16
    da30:	8c000234 	orhi	r16,r17,8
    da34:	10bfffc4 	addi	r2,r2,-1
    da38:	e027883a 	mov	r19,fp
    da3c:	80a0703a 	and	r16,r16,r2
    da40:	902d883a 	mov	r22,r18
    da44:	003f1706 	br	d6a4 <__alt_data_end+0xf800d6a4>
    da48:	00800434 	movhi	r2,16
    da4c:	84000234 	orhi	r16,r16,8
    da50:	10bfffc4 	addi	r2,r2,-1
    da54:	80a0703a 	and	r16,r16,r2
    da58:	003f1206 	br	d6a4 <__alt_data_end+0xf800d6a4>
    da5c:	147ff604 	addi	r17,r2,-40
    da60:	3462983a 	sll	r17,r6,r17
    da64:	0025883a 	mov	r18,zero
    da68:	003ef306 	br	d638 <__alt_data_end+0xf800d638>
    da6c:	3009883a 	mov	r4,r6
    da70:	d9400215 	stw	r5,8(sp)
    da74:	d9800715 	stw	r6,28(sp)
    da78:	da400415 	stw	r9,16(sp)
    da7c:	da800315 	stw	r10,12(sp)
    da80:	000e6f40 	call	e6f4 <__clzsi2>
    da84:	10800804 	addi	r2,r2,32
    da88:	da800317 	ldw	r10,12(sp)
    da8c:	da400417 	ldw	r9,16(sp)
    da90:	d9800717 	ldw	r6,28(sp)
    da94:	d9400217 	ldw	r5,8(sp)
    da98:	003edd06 	br	d610 <__alt_data_end+0xf800d610>
    da9c:	143ff604 	addi	r16,r2,-40
    daa0:	ac20983a 	sll	r16,r21,r16
    daa4:	002d883a 	mov	r22,zero
    daa8:	003ec106 	br	d5b0 <__alt_data_end+0xf800d5b0>
    daac:	d9800715 	stw	r6,28(sp)
    dab0:	d9c00215 	stw	r7,8(sp)
    dab4:	da400415 	stw	r9,16(sp)
    dab8:	000e6f40 	call	e6f4 <__clzsi2>
    dabc:	10800804 	addi	r2,r2,32
    dac0:	da400417 	ldw	r9,16(sp)
    dac4:	d9c00217 	ldw	r7,8(sp)
    dac8:	d9800717 	ldw	r6,28(sp)
    dacc:	003eae06 	br	d588 <__alt_data_end+0xf800d588>
    dad0:	00c00044 	movi	r3,1
    dad4:	1887c83a 	sub	r3,r3,r2
    dad8:	01000e04 	movi	r4,56
    dadc:	20fe8516 	blt	r4,r3,d4f4 <__alt_data_end+0xf800d4f4>
    dae0:	010007c4 	movi	r4,31
    dae4:	20c01b16 	blt	r4,r3,db54 <__muldf3+0x7cc>
    dae8:	00800804 	movi	r2,32
    daec:	10c5c83a 	sub	r2,r2,r3
    daf0:	888a983a 	sll	r5,r17,r2
    daf4:	90c8d83a 	srl	r4,r18,r3
    daf8:	9084983a 	sll	r2,r18,r2
    dafc:	88e2d83a 	srl	r17,r17,r3
    db00:	2906b03a 	or	r3,r5,r4
    db04:	1004c03a 	cmpne	r2,r2,zero
    db08:	1886b03a 	or	r3,r3,r2
    db0c:	188001cc 	andi	r2,r3,7
    db10:	10000726 	beq	r2,zero,db30 <__muldf3+0x7a8>
    db14:	188003cc 	andi	r2,r3,15
    db18:	01000104 	movi	r4,4
    db1c:	11000426 	beq	r2,r4,db30 <__muldf3+0x7a8>
    db20:	1805883a 	mov	r2,r3
    db24:	10c00104 	addi	r3,r2,4
    db28:	1885803a 	cmpltu	r2,r3,r2
    db2c:	88a3883a 	add	r17,r17,r2
    db30:	8880202c 	andhi	r2,r17,128
    db34:	10001c26 	beq	r2,zero,dba8 <__muldf3+0x820>
    db38:	3027883a 	mov	r19,r6
    db3c:	00800044 	movi	r2,1
    db40:	0021883a 	mov	r16,zero
    db44:	002d883a 	mov	r22,zero
    db48:	003e6e06 	br	d504 <__alt_data_end+0xf800d504>
    db4c:	4007883a 	mov	r3,r8
    db50:	003f9706 	br	d9b0 <__alt_data_end+0xf800d9b0>
    db54:	017ff844 	movi	r5,-31
    db58:	2885c83a 	sub	r2,r5,r2
    db5c:	888ad83a 	srl	r5,r17,r2
    db60:	00800804 	movi	r2,32
    db64:	18801a26 	beq	r3,r2,dbd0 <__muldf3+0x848>
    db68:	01001004 	movi	r4,64
    db6c:	20c7c83a 	sub	r3,r4,r3
    db70:	88e2983a 	sll	r17,r17,r3
    db74:	8ca4b03a 	or	r18,r17,r18
    db78:	9004c03a 	cmpne	r2,r18,zero
    db7c:	2884b03a 	or	r2,r5,r2
    db80:	144001cc 	andi	r17,r2,7
    db84:	88000d1e 	bne	r17,zero,dbbc <__muldf3+0x834>
    db88:	0021883a 	mov	r16,zero
    db8c:	102cd0fa 	srli	r22,r2,3
    db90:	3027883a 	mov	r19,r6
    db94:	0005883a 	mov	r2,zero
    db98:	b46cb03a 	or	r22,r22,r17
    db9c:	003e5906 	br	d504 <__alt_data_end+0xf800d504>
    dba0:	1007883a 	mov	r3,r2
    dba4:	0023883a 	mov	r17,zero
    dba8:	8820927a 	slli	r16,r17,9
    dbac:	1805883a 	mov	r2,r3
    dbb0:	8822977a 	slli	r17,r17,29
    dbb4:	8020d33a 	srli	r16,r16,12
    dbb8:	003ff406 	br	db8c <__alt_data_end+0xf800db8c>
    dbbc:	10c003cc 	andi	r3,r2,15
    dbc0:	01000104 	movi	r4,4
    dbc4:	193ff626 	beq	r3,r4,dba0 <__alt_data_end+0xf800dba0>
    dbc8:	0023883a 	mov	r17,zero
    dbcc:	003fd506 	br	db24 <__alt_data_end+0xf800db24>
    dbd0:	0023883a 	mov	r17,zero
    dbd4:	003fe706 	br	db74 <__alt_data_end+0xf800db74>
    dbd8:	00800434 	movhi	r2,16
    dbdc:	8c000234 	orhi	r16,r17,8
    dbe0:	10bfffc4 	addi	r2,r2,-1
    dbe4:	3027883a 	mov	r19,r6
    dbe8:	80a0703a 	and	r16,r16,r2
    dbec:	902d883a 	mov	r22,r18
    dbf0:	003eac06 	br	d6a4 <__alt_data_end+0xf800d6a4>

0000dbf4 <__subdf3>:
    dbf4:	02000434 	movhi	r8,16
    dbf8:	423fffc4 	addi	r8,r8,-1
    dbfc:	defffb04 	addi	sp,sp,-20
    dc00:	2a14703a 	and	r10,r5,r8
    dc04:	3812d53a 	srli	r9,r7,20
    dc08:	3a10703a 	and	r8,r7,r8
    dc0c:	2006d77a 	srli	r3,r4,29
    dc10:	3004d77a 	srli	r2,r6,29
    dc14:	dc000015 	stw	r16,0(sp)
    dc18:	501490fa 	slli	r10,r10,3
    dc1c:	2820d53a 	srli	r16,r5,20
    dc20:	401090fa 	slli	r8,r8,3
    dc24:	dc800215 	stw	r18,8(sp)
    dc28:	dc400115 	stw	r17,4(sp)
    dc2c:	dfc00415 	stw	ra,16(sp)
    dc30:	202290fa 	slli	r17,r4,3
    dc34:	dcc00315 	stw	r19,12(sp)
    dc38:	4a41ffcc 	andi	r9,r9,2047
    dc3c:	0101ffc4 	movi	r4,2047
    dc40:	2824d7fa 	srli	r18,r5,31
    dc44:	8401ffcc 	andi	r16,r16,2047
    dc48:	50c6b03a 	or	r3,r10,r3
    dc4c:	380ed7fa 	srli	r7,r7,31
    dc50:	408ab03a 	or	r5,r8,r2
    dc54:	300c90fa 	slli	r6,r6,3
    dc58:	49009626 	beq	r9,r4,deb4 <__subdf3+0x2c0>
    dc5c:	39c0005c 	xori	r7,r7,1
    dc60:	8245c83a 	sub	r2,r16,r9
    dc64:	3c807426 	beq	r7,r18,de38 <__subdf3+0x244>
    dc68:	0080af0e 	bge	zero,r2,df28 <__subdf3+0x334>
    dc6c:	48002a1e 	bne	r9,zero,dd18 <__subdf3+0x124>
    dc70:	2988b03a 	or	r4,r5,r6
    dc74:	20009a1e 	bne	r4,zero,dee0 <__subdf3+0x2ec>
    dc78:	888001cc 	andi	r2,r17,7
    dc7c:	10000726 	beq	r2,zero,dc9c <__subdf3+0xa8>
    dc80:	888003cc 	andi	r2,r17,15
    dc84:	01000104 	movi	r4,4
    dc88:	11000426 	beq	r2,r4,dc9c <__subdf3+0xa8>
    dc8c:	890b883a 	add	r5,r17,r4
    dc90:	2c63803a 	cmpltu	r17,r5,r17
    dc94:	1c47883a 	add	r3,r3,r17
    dc98:	2823883a 	mov	r17,r5
    dc9c:	1880202c 	andhi	r2,r3,128
    dca0:	10005926 	beq	r2,zero,de08 <__subdf3+0x214>
    dca4:	84000044 	addi	r16,r16,1
    dca8:	0081ffc4 	movi	r2,2047
    dcac:	8080be26 	beq	r16,r2,dfa8 <__subdf3+0x3b4>
    dcb0:	017fe034 	movhi	r5,65408
    dcb4:	297fffc4 	addi	r5,r5,-1
    dcb8:	1946703a 	and	r3,r3,r5
    dcbc:	1804977a 	slli	r2,r3,29
    dcc0:	1806927a 	slli	r3,r3,9
    dcc4:	8822d0fa 	srli	r17,r17,3
    dcc8:	8401ffcc 	andi	r16,r16,2047
    dccc:	180ad33a 	srli	r5,r3,12
    dcd0:	9100004c 	andi	r4,r18,1
    dcd4:	1444b03a 	or	r2,r2,r17
    dcd8:	80c1ffcc 	andi	r3,r16,2047
    dcdc:	1820953a 	slli	r16,r3,20
    dce0:	20c03fcc 	andi	r3,r4,255
    dce4:	180897fa 	slli	r4,r3,31
    dce8:	00c00434 	movhi	r3,16
    dcec:	18ffffc4 	addi	r3,r3,-1
    dcf0:	28c6703a 	and	r3,r5,r3
    dcf4:	1c06b03a 	or	r3,r3,r16
    dcf8:	1906b03a 	or	r3,r3,r4
    dcfc:	dfc00417 	ldw	ra,16(sp)
    dd00:	dcc00317 	ldw	r19,12(sp)
    dd04:	dc800217 	ldw	r18,8(sp)
    dd08:	dc400117 	ldw	r17,4(sp)
    dd0c:	dc000017 	ldw	r16,0(sp)
    dd10:	dec00504 	addi	sp,sp,20
    dd14:	f800283a 	ret
    dd18:	0101ffc4 	movi	r4,2047
    dd1c:	813fd626 	beq	r16,r4,dc78 <__alt_data_end+0xf800dc78>
    dd20:	29402034 	orhi	r5,r5,128
    dd24:	01000e04 	movi	r4,56
    dd28:	2080a316 	blt	r4,r2,dfb8 <__subdf3+0x3c4>
    dd2c:	010007c4 	movi	r4,31
    dd30:	2080c616 	blt	r4,r2,e04c <__subdf3+0x458>
    dd34:	01000804 	movi	r4,32
    dd38:	2089c83a 	sub	r4,r4,r2
    dd3c:	2910983a 	sll	r8,r5,r4
    dd40:	308ed83a 	srl	r7,r6,r2
    dd44:	3108983a 	sll	r4,r6,r4
    dd48:	2884d83a 	srl	r2,r5,r2
    dd4c:	41ccb03a 	or	r6,r8,r7
    dd50:	2008c03a 	cmpne	r4,r4,zero
    dd54:	310cb03a 	or	r6,r6,r4
    dd58:	898dc83a 	sub	r6,r17,r6
    dd5c:	89a3803a 	cmpltu	r17,r17,r6
    dd60:	1887c83a 	sub	r3,r3,r2
    dd64:	1c47c83a 	sub	r3,r3,r17
    dd68:	3023883a 	mov	r17,r6
    dd6c:	1880202c 	andhi	r2,r3,128
    dd70:	10002326 	beq	r2,zero,de00 <__subdf3+0x20c>
    dd74:	04c02034 	movhi	r19,128
    dd78:	9cffffc4 	addi	r19,r19,-1
    dd7c:	1ce6703a 	and	r19,r3,r19
    dd80:	98007a26 	beq	r19,zero,df6c <__subdf3+0x378>
    dd84:	9809883a 	mov	r4,r19
    dd88:	000e6f40 	call	e6f4 <__clzsi2>
    dd8c:	113ffe04 	addi	r4,r2,-8
    dd90:	00c007c4 	movi	r3,31
    dd94:	19007b16 	blt	r3,r4,df84 <__subdf3+0x390>
    dd98:	00800804 	movi	r2,32
    dd9c:	1105c83a 	sub	r2,r2,r4
    dda0:	8884d83a 	srl	r2,r17,r2
    dda4:	9906983a 	sll	r3,r19,r4
    dda8:	8922983a 	sll	r17,r17,r4
    ddac:	10c4b03a 	or	r2,r2,r3
    ddb0:	24007816 	blt	r4,r16,df94 <__subdf3+0x3a0>
    ddb4:	2421c83a 	sub	r16,r4,r16
    ddb8:	80c00044 	addi	r3,r16,1
    ddbc:	010007c4 	movi	r4,31
    ddc0:	20c09516 	blt	r4,r3,e018 <__subdf3+0x424>
    ddc4:	01400804 	movi	r5,32
    ddc8:	28cbc83a 	sub	r5,r5,r3
    ddcc:	88c8d83a 	srl	r4,r17,r3
    ddd0:	8962983a 	sll	r17,r17,r5
    ddd4:	114a983a 	sll	r5,r2,r5
    ddd8:	10c6d83a 	srl	r3,r2,r3
    dddc:	8804c03a 	cmpne	r2,r17,zero
    dde0:	290ab03a 	or	r5,r5,r4
    dde4:	28a2b03a 	or	r17,r5,r2
    dde8:	0021883a 	mov	r16,zero
    ddec:	003fa206 	br	dc78 <__alt_data_end+0xf800dc78>
    ddf0:	2090b03a 	or	r8,r4,r2
    ddf4:	40018e26 	beq	r8,zero,e430 <__subdf3+0x83c>
    ddf8:	1007883a 	mov	r3,r2
    ddfc:	2023883a 	mov	r17,r4
    de00:	888001cc 	andi	r2,r17,7
    de04:	103f9e1e 	bne	r2,zero,dc80 <__alt_data_end+0xf800dc80>
    de08:	1804977a 	slli	r2,r3,29
    de0c:	8822d0fa 	srli	r17,r17,3
    de10:	1810d0fa 	srli	r8,r3,3
    de14:	9100004c 	andi	r4,r18,1
    de18:	1444b03a 	or	r2,r2,r17
    de1c:	00c1ffc4 	movi	r3,2047
    de20:	80c02826 	beq	r16,r3,dec4 <__subdf3+0x2d0>
    de24:	01400434 	movhi	r5,16
    de28:	297fffc4 	addi	r5,r5,-1
    de2c:	80e0703a 	and	r16,r16,r3
    de30:	414a703a 	and	r5,r8,r5
    de34:	003fa806 	br	dcd8 <__alt_data_end+0xf800dcd8>
    de38:	0080630e 	bge	zero,r2,dfc8 <__subdf3+0x3d4>
    de3c:	48003026 	beq	r9,zero,df00 <__subdf3+0x30c>
    de40:	0101ffc4 	movi	r4,2047
    de44:	813f8c26 	beq	r16,r4,dc78 <__alt_data_end+0xf800dc78>
    de48:	29402034 	orhi	r5,r5,128
    de4c:	01000e04 	movi	r4,56
    de50:	2080a90e 	bge	r4,r2,e0f8 <__subdf3+0x504>
    de54:	298cb03a 	or	r6,r5,r6
    de58:	3012c03a 	cmpne	r9,r6,zero
    de5c:	0005883a 	mov	r2,zero
    de60:	4c53883a 	add	r9,r9,r17
    de64:	4c63803a 	cmpltu	r17,r9,r17
    de68:	10c7883a 	add	r3,r2,r3
    de6c:	88c7883a 	add	r3,r17,r3
    de70:	4823883a 	mov	r17,r9
    de74:	1880202c 	andhi	r2,r3,128
    de78:	1000d026 	beq	r2,zero,e1bc <__subdf3+0x5c8>
    de7c:	84000044 	addi	r16,r16,1
    de80:	0081ffc4 	movi	r2,2047
    de84:	8080fe26 	beq	r16,r2,e280 <__subdf3+0x68c>
    de88:	00bfe034 	movhi	r2,65408
    de8c:	10bfffc4 	addi	r2,r2,-1
    de90:	1886703a 	and	r3,r3,r2
    de94:	880ad07a 	srli	r5,r17,1
    de98:	180497fa 	slli	r2,r3,31
    de9c:	8900004c 	andi	r4,r17,1
    dea0:	2922b03a 	or	r17,r5,r4
    dea4:	1806d07a 	srli	r3,r3,1
    dea8:	1462b03a 	or	r17,r2,r17
    deac:	3825883a 	mov	r18,r7
    deb0:	003f7106 	br	dc78 <__alt_data_end+0xf800dc78>
    deb4:	2984b03a 	or	r2,r5,r6
    deb8:	103f6826 	beq	r2,zero,dc5c <__alt_data_end+0xf800dc5c>
    debc:	39c03fcc 	andi	r7,r7,255
    dec0:	003f6706 	br	dc60 <__alt_data_end+0xf800dc60>
    dec4:	4086b03a 	or	r3,r8,r2
    dec8:	18015226 	beq	r3,zero,e414 <__subdf3+0x820>
    decc:	00c00434 	movhi	r3,16
    ded0:	41400234 	orhi	r5,r8,8
    ded4:	18ffffc4 	addi	r3,r3,-1
    ded8:	28ca703a 	and	r5,r5,r3
    dedc:	003f7e06 	br	dcd8 <__alt_data_end+0xf800dcd8>
    dee0:	10bfffc4 	addi	r2,r2,-1
    dee4:	1000491e 	bne	r2,zero,e00c <__subdf3+0x418>
    dee8:	898fc83a 	sub	r7,r17,r6
    deec:	89e3803a 	cmpltu	r17,r17,r7
    def0:	1947c83a 	sub	r3,r3,r5
    def4:	1c47c83a 	sub	r3,r3,r17
    def8:	3823883a 	mov	r17,r7
    defc:	003f9b06 	br	dd6c <__alt_data_end+0xf800dd6c>
    df00:	2988b03a 	or	r4,r5,r6
    df04:	203f5c26 	beq	r4,zero,dc78 <__alt_data_end+0xf800dc78>
    df08:	10bfffc4 	addi	r2,r2,-1
    df0c:	1000931e 	bne	r2,zero,e15c <__subdf3+0x568>
    df10:	898d883a 	add	r6,r17,r6
    df14:	3463803a 	cmpltu	r17,r6,r17
    df18:	1947883a 	add	r3,r3,r5
    df1c:	88c7883a 	add	r3,r17,r3
    df20:	3023883a 	mov	r17,r6
    df24:	003fd306 	br	de74 <__alt_data_end+0xf800de74>
    df28:	1000541e 	bne	r2,zero,e07c <__subdf3+0x488>
    df2c:	80800044 	addi	r2,r16,1
    df30:	1081ffcc 	andi	r2,r2,2047
    df34:	01000044 	movi	r4,1
    df38:	2080a20e 	bge	r4,r2,e1c4 <__subdf3+0x5d0>
    df3c:	8989c83a 	sub	r4,r17,r6
    df40:	8905803a 	cmpltu	r2,r17,r4
    df44:	1967c83a 	sub	r19,r3,r5
    df48:	98a7c83a 	sub	r19,r19,r2
    df4c:	9880202c 	andhi	r2,r19,128
    df50:	10006326 	beq	r2,zero,e0e0 <__subdf3+0x4ec>
    df54:	3463c83a 	sub	r17,r6,r17
    df58:	28c7c83a 	sub	r3,r5,r3
    df5c:	344d803a 	cmpltu	r6,r6,r17
    df60:	19a7c83a 	sub	r19,r3,r6
    df64:	3825883a 	mov	r18,r7
    df68:	983f861e 	bne	r19,zero,dd84 <__alt_data_end+0xf800dd84>
    df6c:	8809883a 	mov	r4,r17
    df70:	000e6f40 	call	e6f4 <__clzsi2>
    df74:	10800804 	addi	r2,r2,32
    df78:	113ffe04 	addi	r4,r2,-8
    df7c:	00c007c4 	movi	r3,31
    df80:	193f850e 	bge	r3,r4,dd98 <__alt_data_end+0xf800dd98>
    df84:	10bff604 	addi	r2,r2,-40
    df88:	8884983a 	sll	r2,r17,r2
    df8c:	0023883a 	mov	r17,zero
    df90:	243f880e 	bge	r4,r16,ddb4 <__alt_data_end+0xf800ddb4>
    df94:	00ffe034 	movhi	r3,65408
    df98:	18ffffc4 	addi	r3,r3,-1
    df9c:	8121c83a 	sub	r16,r16,r4
    dfa0:	10c6703a 	and	r3,r2,r3
    dfa4:	003f3406 	br	dc78 <__alt_data_end+0xf800dc78>
    dfa8:	9100004c 	andi	r4,r18,1
    dfac:	000b883a 	mov	r5,zero
    dfb0:	0005883a 	mov	r2,zero
    dfb4:	003f4806 	br	dcd8 <__alt_data_end+0xf800dcd8>
    dfb8:	298cb03a 	or	r6,r5,r6
    dfbc:	300cc03a 	cmpne	r6,r6,zero
    dfc0:	0005883a 	mov	r2,zero
    dfc4:	003f6406 	br	dd58 <__alt_data_end+0xf800dd58>
    dfc8:	10009a1e 	bne	r2,zero,e234 <__subdf3+0x640>
    dfcc:	82400044 	addi	r9,r16,1
    dfd0:	4881ffcc 	andi	r2,r9,2047
    dfd4:	02800044 	movi	r10,1
    dfd8:	5080670e 	bge	r10,r2,e178 <__subdf3+0x584>
    dfdc:	0081ffc4 	movi	r2,2047
    dfe0:	4880af26 	beq	r9,r2,e2a0 <__subdf3+0x6ac>
    dfe4:	898d883a 	add	r6,r17,r6
    dfe8:	1945883a 	add	r2,r3,r5
    dfec:	3447803a 	cmpltu	r3,r6,r17
    dff0:	1887883a 	add	r3,r3,r2
    dff4:	182297fa 	slli	r17,r3,31
    dff8:	300cd07a 	srli	r6,r6,1
    dffc:	1806d07a 	srli	r3,r3,1
    e000:	4821883a 	mov	r16,r9
    e004:	89a2b03a 	or	r17,r17,r6
    e008:	003f1b06 	br	dc78 <__alt_data_end+0xf800dc78>
    e00c:	0101ffc4 	movi	r4,2047
    e010:	813f441e 	bne	r16,r4,dd24 <__alt_data_end+0xf800dd24>
    e014:	003f1806 	br	dc78 <__alt_data_end+0xf800dc78>
    e018:	843ff844 	addi	r16,r16,-31
    e01c:	01400804 	movi	r5,32
    e020:	1408d83a 	srl	r4,r2,r16
    e024:	19405026 	beq	r3,r5,e168 <__subdf3+0x574>
    e028:	01401004 	movi	r5,64
    e02c:	28c7c83a 	sub	r3,r5,r3
    e030:	10c4983a 	sll	r2,r2,r3
    e034:	88a2b03a 	or	r17,r17,r2
    e038:	8822c03a 	cmpne	r17,r17,zero
    e03c:	2462b03a 	or	r17,r4,r17
    e040:	0007883a 	mov	r3,zero
    e044:	0021883a 	mov	r16,zero
    e048:	003f6d06 	br	de00 <__alt_data_end+0xf800de00>
    e04c:	11fff804 	addi	r7,r2,-32
    e050:	01000804 	movi	r4,32
    e054:	29ced83a 	srl	r7,r5,r7
    e058:	11004526 	beq	r2,r4,e170 <__subdf3+0x57c>
    e05c:	01001004 	movi	r4,64
    e060:	2089c83a 	sub	r4,r4,r2
    e064:	2904983a 	sll	r2,r5,r4
    e068:	118cb03a 	or	r6,r2,r6
    e06c:	300cc03a 	cmpne	r6,r6,zero
    e070:	398cb03a 	or	r6,r7,r6
    e074:	0005883a 	mov	r2,zero
    e078:	003f3706 	br	dd58 <__alt_data_end+0xf800dd58>
    e07c:	80002a26 	beq	r16,zero,e128 <__subdf3+0x534>
    e080:	0101ffc4 	movi	r4,2047
    e084:	49006626 	beq	r9,r4,e220 <__subdf3+0x62c>
    e088:	0085c83a 	sub	r2,zero,r2
    e08c:	18c02034 	orhi	r3,r3,128
    e090:	01000e04 	movi	r4,56
    e094:	20807e16 	blt	r4,r2,e290 <__subdf3+0x69c>
    e098:	010007c4 	movi	r4,31
    e09c:	2080e716 	blt	r4,r2,e43c <__subdf3+0x848>
    e0a0:	01000804 	movi	r4,32
    e0a4:	2089c83a 	sub	r4,r4,r2
    e0a8:	1914983a 	sll	r10,r3,r4
    e0ac:	8890d83a 	srl	r8,r17,r2
    e0b0:	8908983a 	sll	r4,r17,r4
    e0b4:	1884d83a 	srl	r2,r3,r2
    e0b8:	5222b03a 	or	r17,r10,r8
    e0bc:	2006c03a 	cmpne	r3,r4,zero
    e0c0:	88e2b03a 	or	r17,r17,r3
    e0c4:	3463c83a 	sub	r17,r6,r17
    e0c8:	2885c83a 	sub	r2,r5,r2
    e0cc:	344d803a 	cmpltu	r6,r6,r17
    e0d0:	1187c83a 	sub	r3,r2,r6
    e0d4:	4821883a 	mov	r16,r9
    e0d8:	3825883a 	mov	r18,r7
    e0dc:	003f2306 	br	dd6c <__alt_data_end+0xf800dd6c>
    e0e0:	24d0b03a 	or	r8,r4,r19
    e0e4:	40001b1e 	bne	r8,zero,e154 <__subdf3+0x560>
    e0e8:	0005883a 	mov	r2,zero
    e0ec:	0009883a 	mov	r4,zero
    e0f0:	0021883a 	mov	r16,zero
    e0f4:	003f4906 	br	de1c <__alt_data_end+0xf800de1c>
    e0f8:	010007c4 	movi	r4,31
    e0fc:	20803a16 	blt	r4,r2,e1e8 <__subdf3+0x5f4>
    e100:	01000804 	movi	r4,32
    e104:	2089c83a 	sub	r4,r4,r2
    e108:	2912983a 	sll	r9,r5,r4
    e10c:	3090d83a 	srl	r8,r6,r2
    e110:	3108983a 	sll	r4,r6,r4
    e114:	2884d83a 	srl	r2,r5,r2
    e118:	4a12b03a 	or	r9,r9,r8
    e11c:	2008c03a 	cmpne	r4,r4,zero
    e120:	4912b03a 	or	r9,r9,r4
    e124:	003f4e06 	br	de60 <__alt_data_end+0xf800de60>
    e128:	1c48b03a 	or	r4,r3,r17
    e12c:	20003c26 	beq	r4,zero,e220 <__subdf3+0x62c>
    e130:	0084303a 	nor	r2,zero,r2
    e134:	1000381e 	bne	r2,zero,e218 <__subdf3+0x624>
    e138:	3463c83a 	sub	r17,r6,r17
    e13c:	28c5c83a 	sub	r2,r5,r3
    e140:	344d803a 	cmpltu	r6,r6,r17
    e144:	1187c83a 	sub	r3,r2,r6
    e148:	4821883a 	mov	r16,r9
    e14c:	3825883a 	mov	r18,r7
    e150:	003f0606 	br	dd6c <__alt_data_end+0xf800dd6c>
    e154:	2023883a 	mov	r17,r4
    e158:	003f0906 	br	dd80 <__alt_data_end+0xf800dd80>
    e15c:	0101ffc4 	movi	r4,2047
    e160:	813f3a1e 	bne	r16,r4,de4c <__alt_data_end+0xf800de4c>
    e164:	003ec406 	br	dc78 <__alt_data_end+0xf800dc78>
    e168:	0005883a 	mov	r2,zero
    e16c:	003fb106 	br	e034 <__alt_data_end+0xf800e034>
    e170:	0005883a 	mov	r2,zero
    e174:	003fbc06 	br	e068 <__alt_data_end+0xf800e068>
    e178:	1c44b03a 	or	r2,r3,r17
    e17c:	80008e1e 	bne	r16,zero,e3b8 <__subdf3+0x7c4>
    e180:	1000c826 	beq	r2,zero,e4a4 <__subdf3+0x8b0>
    e184:	2984b03a 	or	r2,r5,r6
    e188:	103ebb26 	beq	r2,zero,dc78 <__alt_data_end+0xf800dc78>
    e18c:	8989883a 	add	r4,r17,r6
    e190:	1945883a 	add	r2,r3,r5
    e194:	2447803a 	cmpltu	r3,r4,r17
    e198:	1887883a 	add	r3,r3,r2
    e19c:	1880202c 	andhi	r2,r3,128
    e1a0:	2023883a 	mov	r17,r4
    e1a4:	103f1626 	beq	r2,zero,de00 <__alt_data_end+0xf800de00>
    e1a8:	00bfe034 	movhi	r2,65408
    e1ac:	10bfffc4 	addi	r2,r2,-1
    e1b0:	5021883a 	mov	r16,r10
    e1b4:	1886703a 	and	r3,r3,r2
    e1b8:	003eaf06 	br	dc78 <__alt_data_end+0xf800dc78>
    e1bc:	3825883a 	mov	r18,r7
    e1c0:	003f0f06 	br	de00 <__alt_data_end+0xf800de00>
    e1c4:	1c44b03a 	or	r2,r3,r17
    e1c8:	8000251e 	bne	r16,zero,e260 <__subdf3+0x66c>
    e1cc:	1000661e 	bne	r2,zero,e368 <__subdf3+0x774>
    e1d0:	2990b03a 	or	r8,r5,r6
    e1d4:	40009626 	beq	r8,zero,e430 <__subdf3+0x83c>
    e1d8:	2807883a 	mov	r3,r5
    e1dc:	3023883a 	mov	r17,r6
    e1e0:	3825883a 	mov	r18,r7
    e1e4:	003ea406 	br	dc78 <__alt_data_end+0xf800dc78>
    e1e8:	127ff804 	addi	r9,r2,-32
    e1ec:	01000804 	movi	r4,32
    e1f0:	2a52d83a 	srl	r9,r5,r9
    e1f4:	11008c26 	beq	r2,r4,e428 <__subdf3+0x834>
    e1f8:	01001004 	movi	r4,64
    e1fc:	2085c83a 	sub	r2,r4,r2
    e200:	2884983a 	sll	r2,r5,r2
    e204:	118cb03a 	or	r6,r2,r6
    e208:	300cc03a 	cmpne	r6,r6,zero
    e20c:	4992b03a 	or	r9,r9,r6
    e210:	0005883a 	mov	r2,zero
    e214:	003f1206 	br	de60 <__alt_data_end+0xf800de60>
    e218:	0101ffc4 	movi	r4,2047
    e21c:	493f9c1e 	bne	r9,r4,e090 <__alt_data_end+0xf800e090>
    e220:	2807883a 	mov	r3,r5
    e224:	3023883a 	mov	r17,r6
    e228:	4821883a 	mov	r16,r9
    e22c:	3825883a 	mov	r18,r7
    e230:	003e9106 	br	dc78 <__alt_data_end+0xf800dc78>
    e234:	80001f1e 	bne	r16,zero,e2b4 <__subdf3+0x6c0>
    e238:	1c48b03a 	or	r4,r3,r17
    e23c:	20005a26 	beq	r4,zero,e3a8 <__subdf3+0x7b4>
    e240:	0084303a 	nor	r2,zero,r2
    e244:	1000561e 	bne	r2,zero,e3a0 <__subdf3+0x7ac>
    e248:	89a3883a 	add	r17,r17,r6
    e24c:	1945883a 	add	r2,r3,r5
    e250:	898d803a 	cmpltu	r6,r17,r6
    e254:	3087883a 	add	r3,r6,r2
    e258:	4821883a 	mov	r16,r9
    e25c:	003f0506 	br	de74 <__alt_data_end+0xf800de74>
    e260:	10002b1e 	bne	r2,zero,e310 <__subdf3+0x71c>
    e264:	2984b03a 	or	r2,r5,r6
    e268:	10008026 	beq	r2,zero,e46c <__subdf3+0x878>
    e26c:	2807883a 	mov	r3,r5
    e270:	3023883a 	mov	r17,r6
    e274:	3825883a 	mov	r18,r7
    e278:	0401ffc4 	movi	r16,2047
    e27c:	003e7e06 	br	dc78 <__alt_data_end+0xf800dc78>
    e280:	3809883a 	mov	r4,r7
    e284:	0011883a 	mov	r8,zero
    e288:	0005883a 	mov	r2,zero
    e28c:	003ee306 	br	de1c <__alt_data_end+0xf800de1c>
    e290:	1c62b03a 	or	r17,r3,r17
    e294:	8822c03a 	cmpne	r17,r17,zero
    e298:	0005883a 	mov	r2,zero
    e29c:	003f8906 	br	e0c4 <__alt_data_end+0xf800e0c4>
    e2a0:	3809883a 	mov	r4,r7
    e2a4:	4821883a 	mov	r16,r9
    e2a8:	0011883a 	mov	r8,zero
    e2ac:	0005883a 	mov	r2,zero
    e2b0:	003eda06 	br	de1c <__alt_data_end+0xf800de1c>
    e2b4:	0101ffc4 	movi	r4,2047
    e2b8:	49003b26 	beq	r9,r4,e3a8 <__subdf3+0x7b4>
    e2bc:	0085c83a 	sub	r2,zero,r2
    e2c0:	18c02034 	orhi	r3,r3,128
    e2c4:	01000e04 	movi	r4,56
    e2c8:	20806e16 	blt	r4,r2,e484 <__subdf3+0x890>
    e2cc:	010007c4 	movi	r4,31
    e2d0:	20807716 	blt	r4,r2,e4b0 <__subdf3+0x8bc>
    e2d4:	01000804 	movi	r4,32
    e2d8:	2089c83a 	sub	r4,r4,r2
    e2dc:	1914983a 	sll	r10,r3,r4
    e2e0:	8890d83a 	srl	r8,r17,r2
    e2e4:	8908983a 	sll	r4,r17,r4
    e2e8:	1884d83a 	srl	r2,r3,r2
    e2ec:	5222b03a 	or	r17,r10,r8
    e2f0:	2006c03a 	cmpne	r3,r4,zero
    e2f4:	88e2b03a 	or	r17,r17,r3
    e2f8:	89a3883a 	add	r17,r17,r6
    e2fc:	1145883a 	add	r2,r2,r5
    e300:	898d803a 	cmpltu	r6,r17,r6
    e304:	3087883a 	add	r3,r6,r2
    e308:	4821883a 	mov	r16,r9
    e30c:	003ed906 	br	de74 <__alt_data_end+0xf800de74>
    e310:	2984b03a 	or	r2,r5,r6
    e314:	10004226 	beq	r2,zero,e420 <__subdf3+0x82c>
    e318:	1808d0fa 	srli	r4,r3,3
    e31c:	8822d0fa 	srli	r17,r17,3
    e320:	1806977a 	slli	r3,r3,29
    e324:	2080022c 	andhi	r2,r4,8
    e328:	1c62b03a 	or	r17,r3,r17
    e32c:	10000826 	beq	r2,zero,e350 <__subdf3+0x75c>
    e330:	2812d0fa 	srli	r9,r5,3
    e334:	4880022c 	andhi	r2,r9,8
    e338:	1000051e 	bne	r2,zero,e350 <__subdf3+0x75c>
    e33c:	300cd0fa 	srli	r6,r6,3
    e340:	2804977a 	slli	r2,r5,29
    e344:	4809883a 	mov	r4,r9
    e348:	3825883a 	mov	r18,r7
    e34c:	11a2b03a 	or	r17,r2,r6
    e350:	8806d77a 	srli	r3,r17,29
    e354:	200890fa 	slli	r4,r4,3
    e358:	882290fa 	slli	r17,r17,3
    e35c:	0401ffc4 	movi	r16,2047
    e360:	1906b03a 	or	r3,r3,r4
    e364:	003e4406 	br	dc78 <__alt_data_end+0xf800dc78>
    e368:	2984b03a 	or	r2,r5,r6
    e36c:	103e4226 	beq	r2,zero,dc78 <__alt_data_end+0xf800dc78>
    e370:	8989c83a 	sub	r4,r17,r6
    e374:	8911803a 	cmpltu	r8,r17,r4
    e378:	1945c83a 	sub	r2,r3,r5
    e37c:	1205c83a 	sub	r2,r2,r8
    e380:	1200202c 	andhi	r8,r2,128
    e384:	403e9a26 	beq	r8,zero,ddf0 <__alt_data_end+0xf800ddf0>
    e388:	3463c83a 	sub	r17,r6,r17
    e38c:	28c5c83a 	sub	r2,r5,r3
    e390:	344d803a 	cmpltu	r6,r6,r17
    e394:	1187c83a 	sub	r3,r2,r6
    e398:	3825883a 	mov	r18,r7
    e39c:	003e3606 	br	dc78 <__alt_data_end+0xf800dc78>
    e3a0:	0101ffc4 	movi	r4,2047
    e3a4:	493fc71e 	bne	r9,r4,e2c4 <__alt_data_end+0xf800e2c4>
    e3a8:	2807883a 	mov	r3,r5
    e3ac:	3023883a 	mov	r17,r6
    e3b0:	4821883a 	mov	r16,r9
    e3b4:	003e3006 	br	dc78 <__alt_data_end+0xf800dc78>
    e3b8:	10003626 	beq	r2,zero,e494 <__subdf3+0x8a0>
    e3bc:	2984b03a 	or	r2,r5,r6
    e3c0:	10001726 	beq	r2,zero,e420 <__subdf3+0x82c>
    e3c4:	1808d0fa 	srli	r4,r3,3
    e3c8:	8822d0fa 	srli	r17,r17,3
    e3cc:	1806977a 	slli	r3,r3,29
    e3d0:	2080022c 	andhi	r2,r4,8
    e3d4:	1c62b03a 	or	r17,r3,r17
    e3d8:	10000726 	beq	r2,zero,e3f8 <__subdf3+0x804>
    e3dc:	2812d0fa 	srli	r9,r5,3
    e3e0:	4880022c 	andhi	r2,r9,8
    e3e4:	1000041e 	bne	r2,zero,e3f8 <__subdf3+0x804>
    e3e8:	300cd0fa 	srli	r6,r6,3
    e3ec:	2804977a 	slli	r2,r5,29
    e3f0:	4809883a 	mov	r4,r9
    e3f4:	11a2b03a 	or	r17,r2,r6
    e3f8:	8806d77a 	srli	r3,r17,29
    e3fc:	200890fa 	slli	r4,r4,3
    e400:	882290fa 	slli	r17,r17,3
    e404:	3825883a 	mov	r18,r7
    e408:	1906b03a 	or	r3,r3,r4
    e40c:	0401ffc4 	movi	r16,2047
    e410:	003e1906 	br	dc78 <__alt_data_end+0xf800dc78>
    e414:	000b883a 	mov	r5,zero
    e418:	0005883a 	mov	r2,zero
    e41c:	003e2e06 	br	dcd8 <__alt_data_end+0xf800dcd8>
    e420:	0401ffc4 	movi	r16,2047
    e424:	003e1406 	br	dc78 <__alt_data_end+0xf800dc78>
    e428:	0005883a 	mov	r2,zero
    e42c:	003f7506 	br	e204 <__alt_data_end+0xf800e204>
    e430:	0005883a 	mov	r2,zero
    e434:	0009883a 	mov	r4,zero
    e438:	003e7806 	br	de1c <__alt_data_end+0xf800de1c>
    e43c:	123ff804 	addi	r8,r2,-32
    e440:	01000804 	movi	r4,32
    e444:	1a10d83a 	srl	r8,r3,r8
    e448:	11002526 	beq	r2,r4,e4e0 <__subdf3+0x8ec>
    e44c:	01001004 	movi	r4,64
    e450:	2085c83a 	sub	r2,r4,r2
    e454:	1884983a 	sll	r2,r3,r2
    e458:	1444b03a 	or	r2,r2,r17
    e45c:	1004c03a 	cmpne	r2,r2,zero
    e460:	40a2b03a 	or	r17,r8,r2
    e464:	0005883a 	mov	r2,zero
    e468:	003f1606 	br	e0c4 <__alt_data_end+0xf800e0c4>
    e46c:	02000434 	movhi	r8,16
    e470:	0009883a 	mov	r4,zero
    e474:	423fffc4 	addi	r8,r8,-1
    e478:	00bfffc4 	movi	r2,-1
    e47c:	0401ffc4 	movi	r16,2047
    e480:	003e6606 	br	de1c <__alt_data_end+0xf800de1c>
    e484:	1c62b03a 	or	r17,r3,r17
    e488:	8822c03a 	cmpne	r17,r17,zero
    e48c:	0005883a 	mov	r2,zero
    e490:	003f9906 	br	e2f8 <__alt_data_end+0xf800e2f8>
    e494:	2807883a 	mov	r3,r5
    e498:	3023883a 	mov	r17,r6
    e49c:	0401ffc4 	movi	r16,2047
    e4a0:	003df506 	br	dc78 <__alt_data_end+0xf800dc78>
    e4a4:	2807883a 	mov	r3,r5
    e4a8:	3023883a 	mov	r17,r6
    e4ac:	003df206 	br	dc78 <__alt_data_end+0xf800dc78>
    e4b0:	123ff804 	addi	r8,r2,-32
    e4b4:	01000804 	movi	r4,32
    e4b8:	1a10d83a 	srl	r8,r3,r8
    e4bc:	11000a26 	beq	r2,r4,e4e8 <__subdf3+0x8f4>
    e4c0:	01001004 	movi	r4,64
    e4c4:	2085c83a 	sub	r2,r4,r2
    e4c8:	1884983a 	sll	r2,r3,r2
    e4cc:	1444b03a 	or	r2,r2,r17
    e4d0:	1004c03a 	cmpne	r2,r2,zero
    e4d4:	40a2b03a 	or	r17,r8,r2
    e4d8:	0005883a 	mov	r2,zero
    e4dc:	003f8606 	br	e2f8 <__alt_data_end+0xf800e2f8>
    e4e0:	0005883a 	mov	r2,zero
    e4e4:	003fdc06 	br	e458 <__alt_data_end+0xf800e458>
    e4e8:	0005883a 	mov	r2,zero
    e4ec:	003ff706 	br	e4cc <__alt_data_end+0xf800e4cc>

0000e4f0 <__fixdfsi>:
    e4f0:	280cd53a 	srli	r6,r5,20
    e4f4:	00c00434 	movhi	r3,16
    e4f8:	18ffffc4 	addi	r3,r3,-1
    e4fc:	3181ffcc 	andi	r6,r6,2047
    e500:	01c0ff84 	movi	r7,1022
    e504:	28c6703a 	and	r3,r5,r3
    e508:	280ad7fa 	srli	r5,r5,31
    e50c:	3980120e 	bge	r7,r6,e558 <__fixdfsi+0x68>
    e510:	00810744 	movi	r2,1053
    e514:	11800c16 	blt	r2,r6,e548 <__fixdfsi+0x58>
    e518:	00810cc4 	movi	r2,1075
    e51c:	1185c83a 	sub	r2,r2,r6
    e520:	01c007c4 	movi	r7,31
    e524:	18c00434 	orhi	r3,r3,16
    e528:	38800d16 	blt	r7,r2,e560 <__fixdfsi+0x70>
    e52c:	31befb44 	addi	r6,r6,-1043
    e530:	2084d83a 	srl	r2,r4,r2
    e534:	1986983a 	sll	r3,r3,r6
    e538:	1884b03a 	or	r2,r3,r2
    e53c:	28000726 	beq	r5,zero,e55c <__fixdfsi+0x6c>
    e540:	0085c83a 	sub	r2,zero,r2
    e544:	f800283a 	ret
    e548:	00a00034 	movhi	r2,32768
    e54c:	10bfffc4 	addi	r2,r2,-1
    e550:	2885883a 	add	r2,r5,r2
    e554:	f800283a 	ret
    e558:	0005883a 	mov	r2,zero
    e55c:	f800283a 	ret
    e560:	008104c4 	movi	r2,1043
    e564:	1185c83a 	sub	r2,r2,r6
    e568:	1884d83a 	srl	r2,r3,r2
    e56c:	003ff306 	br	e53c <__alt_data_end+0xf800e53c>

0000e570 <__floatsidf>:
    e570:	defffd04 	addi	sp,sp,-12
    e574:	dfc00215 	stw	ra,8(sp)
    e578:	dc400115 	stw	r17,4(sp)
    e57c:	dc000015 	stw	r16,0(sp)
    e580:	20002b26 	beq	r4,zero,e630 <__floatsidf+0xc0>
    e584:	2023883a 	mov	r17,r4
    e588:	2020d7fa 	srli	r16,r4,31
    e58c:	20002d16 	blt	r4,zero,e644 <__floatsidf+0xd4>
    e590:	8809883a 	mov	r4,r17
    e594:	000e6f40 	call	e6f4 <__clzsi2>
    e598:	01410784 	movi	r5,1054
    e59c:	288bc83a 	sub	r5,r5,r2
    e5a0:	01010cc4 	movi	r4,1075
    e5a4:	2149c83a 	sub	r4,r4,r5
    e5a8:	00c007c4 	movi	r3,31
    e5ac:	1900160e 	bge	r3,r4,e608 <__floatsidf+0x98>
    e5b0:	00c104c4 	movi	r3,1043
    e5b4:	1947c83a 	sub	r3,r3,r5
    e5b8:	88c6983a 	sll	r3,r17,r3
    e5bc:	00800434 	movhi	r2,16
    e5c0:	10bfffc4 	addi	r2,r2,-1
    e5c4:	1886703a 	and	r3,r3,r2
    e5c8:	2941ffcc 	andi	r5,r5,2047
    e5cc:	800d883a 	mov	r6,r16
    e5d0:	0005883a 	mov	r2,zero
    e5d4:	280a953a 	slli	r5,r5,20
    e5d8:	31803fcc 	andi	r6,r6,255
    e5dc:	01000434 	movhi	r4,16
    e5e0:	300c97fa 	slli	r6,r6,31
    e5e4:	213fffc4 	addi	r4,r4,-1
    e5e8:	1906703a 	and	r3,r3,r4
    e5ec:	1946b03a 	or	r3,r3,r5
    e5f0:	1986b03a 	or	r3,r3,r6
    e5f4:	dfc00217 	ldw	ra,8(sp)
    e5f8:	dc400117 	ldw	r17,4(sp)
    e5fc:	dc000017 	ldw	r16,0(sp)
    e600:	dec00304 	addi	sp,sp,12
    e604:	f800283a 	ret
    e608:	00c002c4 	movi	r3,11
    e60c:	1887c83a 	sub	r3,r3,r2
    e610:	88c6d83a 	srl	r3,r17,r3
    e614:	8904983a 	sll	r2,r17,r4
    e618:	01000434 	movhi	r4,16
    e61c:	213fffc4 	addi	r4,r4,-1
    e620:	2941ffcc 	andi	r5,r5,2047
    e624:	1906703a 	and	r3,r3,r4
    e628:	800d883a 	mov	r6,r16
    e62c:	003fe906 	br	e5d4 <__alt_data_end+0xf800e5d4>
    e630:	000d883a 	mov	r6,zero
    e634:	000b883a 	mov	r5,zero
    e638:	0007883a 	mov	r3,zero
    e63c:	0005883a 	mov	r2,zero
    e640:	003fe406 	br	e5d4 <__alt_data_end+0xf800e5d4>
    e644:	0123c83a 	sub	r17,zero,r4
    e648:	003fd106 	br	e590 <__alt_data_end+0xf800e590>

0000e64c <__floatunsidf>:
    e64c:	defffe04 	addi	sp,sp,-8
    e650:	dc000015 	stw	r16,0(sp)
    e654:	dfc00115 	stw	ra,4(sp)
    e658:	2021883a 	mov	r16,r4
    e65c:	20002226 	beq	r4,zero,e6e8 <__floatunsidf+0x9c>
    e660:	000e6f40 	call	e6f4 <__clzsi2>
    e664:	01010784 	movi	r4,1054
    e668:	2089c83a 	sub	r4,r4,r2
    e66c:	01810cc4 	movi	r6,1075
    e670:	310dc83a 	sub	r6,r6,r4
    e674:	00c007c4 	movi	r3,31
    e678:	1980120e 	bge	r3,r6,e6c4 <__floatunsidf+0x78>
    e67c:	00c104c4 	movi	r3,1043
    e680:	1907c83a 	sub	r3,r3,r4
    e684:	80ca983a 	sll	r5,r16,r3
    e688:	00800434 	movhi	r2,16
    e68c:	10bfffc4 	addi	r2,r2,-1
    e690:	2101ffcc 	andi	r4,r4,2047
    e694:	0021883a 	mov	r16,zero
    e698:	288a703a 	and	r5,r5,r2
    e69c:	2008953a 	slli	r4,r4,20
    e6a0:	00c00434 	movhi	r3,16
    e6a4:	18ffffc4 	addi	r3,r3,-1
    e6a8:	28c6703a 	and	r3,r5,r3
    e6ac:	8005883a 	mov	r2,r16
    e6b0:	1906b03a 	or	r3,r3,r4
    e6b4:	dfc00117 	ldw	ra,4(sp)
    e6b8:	dc000017 	ldw	r16,0(sp)
    e6bc:	dec00204 	addi	sp,sp,8
    e6c0:	f800283a 	ret
    e6c4:	00c002c4 	movi	r3,11
    e6c8:	188bc83a 	sub	r5,r3,r2
    e6cc:	814ad83a 	srl	r5,r16,r5
    e6d0:	00c00434 	movhi	r3,16
    e6d4:	18ffffc4 	addi	r3,r3,-1
    e6d8:	81a0983a 	sll	r16,r16,r6
    e6dc:	2101ffcc 	andi	r4,r4,2047
    e6e0:	28ca703a 	and	r5,r5,r3
    e6e4:	003fed06 	br	e69c <__alt_data_end+0xf800e69c>
    e6e8:	0009883a 	mov	r4,zero
    e6ec:	000b883a 	mov	r5,zero
    e6f0:	003fea06 	br	e69c <__alt_data_end+0xf800e69c>

0000e6f4 <__clzsi2>:
    e6f4:	00bfffd4 	movui	r2,65535
    e6f8:	11000536 	bltu	r2,r4,e710 <__clzsi2+0x1c>
    e6fc:	00803fc4 	movi	r2,255
    e700:	11000f36 	bltu	r2,r4,e740 <__clzsi2+0x4c>
    e704:	00800804 	movi	r2,32
    e708:	0007883a 	mov	r3,zero
    e70c:	00000506 	br	e724 <__clzsi2+0x30>
    e710:	00804034 	movhi	r2,256
    e714:	10bfffc4 	addi	r2,r2,-1
    e718:	11000c2e 	bgeu	r2,r4,e74c <__clzsi2+0x58>
    e71c:	00800204 	movi	r2,8
    e720:	00c00604 	movi	r3,24
    e724:	20c8d83a 	srl	r4,r4,r3
    e728:	00c00074 	movhi	r3,1
    e72c:	18c89e04 	addi	r3,r3,8824
    e730:	1909883a 	add	r4,r3,r4
    e734:	20c00003 	ldbu	r3,0(r4)
    e738:	10c5c83a 	sub	r2,r2,r3
    e73c:	f800283a 	ret
    e740:	00800604 	movi	r2,24
    e744:	00c00204 	movi	r3,8
    e748:	003ff606 	br	e724 <__alt_data_end+0xf800e724>
    e74c:	00800404 	movi	r2,16
    e750:	1007883a 	mov	r3,r2
    e754:	003ff306 	br	e724 <__alt_data_end+0xf800e724>

0000e758 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e758:	defffe04 	addi	sp,sp,-8
    e75c:	dfc00115 	stw	ra,4(sp)
    e760:	df000015 	stw	fp,0(sp)
    e764:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e768:	d0a00b17 	ldw	r2,-32724(gp)
    e76c:	10000326 	beq	r2,zero,e77c <alt_get_errno+0x24>
    e770:	d0a00b17 	ldw	r2,-32724(gp)
    e774:	103ee83a 	callr	r2
    e778:	00000106 	br	e780 <alt_get_errno+0x28>
    e77c:	d0a71a04 	addi	r2,gp,-25496
}
    e780:	e037883a 	mov	sp,fp
    e784:	dfc00117 	ldw	ra,4(sp)
    e788:	df000017 	ldw	fp,0(sp)
    e78c:	dec00204 	addi	sp,sp,8
    e790:	f800283a 	ret

0000e794 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e794:	defffb04 	addi	sp,sp,-20
    e798:	dfc00415 	stw	ra,16(sp)
    e79c:	df000315 	stw	fp,12(sp)
    e7a0:	df000304 	addi	fp,sp,12
    e7a4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e7a8:	e0bfff17 	ldw	r2,-4(fp)
    e7ac:	10000816 	blt	r2,zero,e7d0 <close+0x3c>
    e7b0:	01400304 	movi	r5,12
    e7b4:	e13fff17 	ldw	r4,-4(fp)
    e7b8:	00017b40 	call	17b4 <__mulsi3>
    e7bc:	1007883a 	mov	r3,r2
    e7c0:	00800074 	movhi	r2,1
    e7c4:	108bc204 	addi	r2,r2,12040
    e7c8:	1885883a 	add	r2,r3,r2
    e7cc:	00000106 	br	e7d4 <close+0x40>
    e7d0:	0005883a 	mov	r2,zero
    e7d4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    e7d8:	e0bffd17 	ldw	r2,-12(fp)
    e7dc:	10001926 	beq	r2,zero,e844 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e7e0:	e0bffd17 	ldw	r2,-12(fp)
    e7e4:	10800017 	ldw	r2,0(r2)
    e7e8:	10800417 	ldw	r2,16(r2)
    e7ec:	10000626 	beq	r2,zero,e808 <close+0x74>
    e7f0:	e0bffd17 	ldw	r2,-12(fp)
    e7f4:	10800017 	ldw	r2,0(r2)
    e7f8:	10800417 	ldw	r2,16(r2)
    e7fc:	e13ffd17 	ldw	r4,-12(fp)
    e800:	103ee83a 	callr	r2
    e804:	00000106 	br	e80c <close+0x78>
    e808:	0005883a 	mov	r2,zero
    e80c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e810:	e13fff17 	ldw	r4,-4(fp)
    e814:	000ef6c0 	call	ef6c <alt_release_fd>
    if (rval < 0)
    e818:	e0bffe17 	ldw	r2,-8(fp)
    e81c:	1000070e 	bge	r2,zero,e83c <close+0xa8>
    {
      ALT_ERRNO = -rval;
    e820:	000e7580 	call	e758 <alt_get_errno>
    e824:	1007883a 	mov	r3,r2
    e828:	e0bffe17 	ldw	r2,-8(fp)
    e82c:	0085c83a 	sub	r2,zero,r2
    e830:	18800015 	stw	r2,0(r3)
      return -1;
    e834:	00bfffc4 	movi	r2,-1
    e838:	00000706 	br	e858 <close+0xc4>
    }
    return 0;
    e83c:	0005883a 	mov	r2,zero
    e840:	00000506 	br	e858 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e844:	000e7580 	call	e758 <alt_get_errno>
    e848:	1007883a 	mov	r3,r2
    e84c:	00801444 	movi	r2,81
    e850:	18800015 	stw	r2,0(r3)
    return -1;
    e854:	00bfffc4 	movi	r2,-1
  }
}
    e858:	e037883a 	mov	sp,fp
    e85c:	dfc00117 	ldw	ra,4(sp)
    e860:	df000017 	ldw	fp,0(sp)
    e864:	dec00204 	addi	sp,sp,8
    e868:	f800283a 	ret

0000e86c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e86c:	defffc04 	addi	sp,sp,-16
    e870:	df000315 	stw	fp,12(sp)
    e874:	df000304 	addi	fp,sp,12
    e878:	e13ffd15 	stw	r4,-12(fp)
    e87c:	e17ffe15 	stw	r5,-8(fp)
    e880:	e1bfff15 	stw	r6,-4(fp)
  return len;
    e884:	e0bfff17 	ldw	r2,-4(fp)
}
    e888:	e037883a 	mov	sp,fp
    e88c:	df000017 	ldw	fp,0(sp)
    e890:	dec00104 	addi	sp,sp,4
    e894:	f800283a 	ret

0000e898 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e898:	defffe04 	addi	sp,sp,-8
    e89c:	dfc00115 	stw	ra,4(sp)
    e8a0:	df000015 	stw	fp,0(sp)
    e8a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e8a8:	d0a00b17 	ldw	r2,-32724(gp)
    e8ac:	10000326 	beq	r2,zero,e8bc <alt_get_errno+0x24>
    e8b0:	d0a00b17 	ldw	r2,-32724(gp)
    e8b4:	103ee83a 	callr	r2
    e8b8:	00000106 	br	e8c0 <alt_get_errno+0x28>
    e8bc:	d0a71a04 	addi	r2,gp,-25496
}
    e8c0:	e037883a 	mov	sp,fp
    e8c4:	dfc00117 	ldw	ra,4(sp)
    e8c8:	df000017 	ldw	fp,0(sp)
    e8cc:	dec00204 	addi	sp,sp,8
    e8d0:	f800283a 	ret

0000e8d4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e8d4:	defffb04 	addi	sp,sp,-20
    e8d8:	dfc00415 	stw	ra,16(sp)
    e8dc:	df000315 	stw	fp,12(sp)
    e8e0:	df000304 	addi	fp,sp,12
    e8e4:	e13ffe15 	stw	r4,-8(fp)
    e8e8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e8ec:	e0bffe17 	ldw	r2,-8(fp)
    e8f0:	10000816 	blt	r2,zero,e914 <fstat+0x40>
    e8f4:	01400304 	movi	r5,12
    e8f8:	e13ffe17 	ldw	r4,-8(fp)
    e8fc:	00017b40 	call	17b4 <__mulsi3>
    e900:	1007883a 	mov	r3,r2
    e904:	00800074 	movhi	r2,1
    e908:	108bc204 	addi	r2,r2,12040
    e90c:	1885883a 	add	r2,r3,r2
    e910:	00000106 	br	e918 <fstat+0x44>
    e914:	0005883a 	mov	r2,zero
    e918:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e91c:	e0bffd17 	ldw	r2,-12(fp)
    e920:	10001026 	beq	r2,zero,e964 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e924:	e0bffd17 	ldw	r2,-12(fp)
    e928:	10800017 	ldw	r2,0(r2)
    e92c:	10800817 	ldw	r2,32(r2)
    e930:	10000726 	beq	r2,zero,e950 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    e934:	e0bffd17 	ldw	r2,-12(fp)
    e938:	10800017 	ldw	r2,0(r2)
    e93c:	10800817 	ldw	r2,32(r2)
    e940:	e17fff17 	ldw	r5,-4(fp)
    e944:	e13ffd17 	ldw	r4,-12(fp)
    e948:	103ee83a 	callr	r2
    e94c:	00000a06 	br	e978 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e950:	e0bfff17 	ldw	r2,-4(fp)
    e954:	00c80004 	movi	r3,8192
    e958:	10c00115 	stw	r3,4(r2)
      return 0;
    e95c:	0005883a 	mov	r2,zero
    e960:	00000506 	br	e978 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e964:	000e8980 	call	e898 <alt_get_errno>
    e968:	1007883a 	mov	r3,r2
    e96c:	00801444 	movi	r2,81
    e970:	18800015 	stw	r2,0(r3)
    return -1;
    e974:	00bfffc4 	movi	r2,-1
  }
}
    e978:	e037883a 	mov	sp,fp
    e97c:	dfc00117 	ldw	ra,4(sp)
    e980:	df000017 	ldw	fp,0(sp)
    e984:	dec00204 	addi	sp,sp,8
    e988:	f800283a 	ret

0000e98c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    e98c:	defff504 	addi	sp,sp,-44
    e990:	dfc00a15 	stw	ra,40(sp)
    e994:	df000915 	stw	fp,36(sp)
    e998:	df000904 	addi	fp,sp,36
    e99c:	e13ffc15 	stw	r4,-16(fp)
    e9a0:	e17ffd15 	stw	r5,-12(fp)
    e9a4:	e1bffe15 	stw	r6,-8(fp)
    e9a8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    e9ac:	00bffa84 	movi	r2,-22
    e9b0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    e9b4:	e0bffd17 	ldw	r2,-12(fp)
    e9b8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    e9bc:	e0bff817 	ldw	r2,-32(fp)
    e9c0:	10800808 	cmpgei	r2,r2,32
    e9c4:	1000271e 	bne	r2,zero,ea64 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e9c8:	0005303a 	rdctl	r2,status
    e9cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e9d0:	e0fffb17 	ldw	r3,-20(fp)
    e9d4:	00bfff84 	movi	r2,-2
    e9d8:	1884703a 	and	r2,r3,r2
    e9dc:	1001703a 	wrctl	status,r2
  
  return context;
    e9e0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    e9e4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    e9e8:	00800074 	movhi	r2,1
    e9ec:	1097b304 	addi	r2,r2,24268
    e9f0:	e0fff817 	ldw	r3,-32(fp)
    e9f4:	180690fa 	slli	r3,r3,3
    e9f8:	10c5883a 	add	r2,r2,r3
    e9fc:	e0fffe17 	ldw	r3,-8(fp)
    ea00:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    ea04:	00800074 	movhi	r2,1
    ea08:	1097b304 	addi	r2,r2,24268
    ea0c:	e0fff817 	ldw	r3,-32(fp)
    ea10:	180690fa 	slli	r3,r3,3
    ea14:	10c5883a 	add	r2,r2,r3
    ea18:	10800104 	addi	r2,r2,4
    ea1c:	e0ffff17 	ldw	r3,-4(fp)
    ea20:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    ea24:	e0bffe17 	ldw	r2,-8(fp)
    ea28:	10000526 	beq	r2,zero,ea40 <alt_iic_isr_register+0xb4>
    ea2c:	e0bff817 	ldw	r2,-32(fp)
    ea30:	100b883a 	mov	r5,r2
    ea34:	e13ffc17 	ldw	r4,-16(fp)
    ea38:	001113c0 	call	1113c <alt_ic_irq_enable>
    ea3c:	00000406 	br	ea50 <alt_iic_isr_register+0xc4>
    ea40:	e0bff817 	ldw	r2,-32(fp)
    ea44:	100b883a 	mov	r5,r2
    ea48:	e13ffc17 	ldw	r4,-16(fp)
    ea4c:	00111c40 	call	111c4 <alt_ic_irq_disable>
    ea50:	e0bff715 	stw	r2,-36(fp)
    ea54:	e0bffa17 	ldw	r2,-24(fp)
    ea58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ea5c:	e0bff917 	ldw	r2,-28(fp)
    ea60:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    ea64:	e0bff717 	ldw	r2,-36(fp)
}
    ea68:	e037883a 	mov	sp,fp
    ea6c:	dfc00117 	ldw	ra,4(sp)
    ea70:	df000017 	ldw	fp,0(sp)
    ea74:	dec00204 	addi	sp,sp,8
    ea78:	f800283a 	ret

0000ea7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ea7c:	defffe04 	addi	sp,sp,-8
    ea80:	dfc00115 	stw	ra,4(sp)
    ea84:	df000015 	stw	fp,0(sp)
    ea88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ea8c:	d0a00b17 	ldw	r2,-32724(gp)
    ea90:	10000326 	beq	r2,zero,eaa0 <alt_get_errno+0x24>
    ea94:	d0a00b17 	ldw	r2,-32724(gp)
    ea98:	103ee83a 	callr	r2
    ea9c:	00000106 	br	eaa4 <alt_get_errno+0x28>
    eaa0:	d0a71a04 	addi	r2,gp,-25496
}
    eaa4:	e037883a 	mov	sp,fp
    eaa8:	dfc00117 	ldw	ra,4(sp)
    eaac:	df000017 	ldw	fp,0(sp)
    eab0:	dec00204 	addi	sp,sp,8
    eab4:	f800283a 	ret

0000eab8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    eab8:	deffed04 	addi	sp,sp,-76
    eabc:	dfc01215 	stw	ra,72(sp)
    eac0:	df001115 	stw	fp,68(sp)
    eac4:	df001104 	addi	fp,sp,68
    eac8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    eacc:	e0bfff17 	ldw	r2,-4(fp)
    ead0:	10000816 	blt	r2,zero,eaf4 <isatty+0x3c>
    ead4:	01400304 	movi	r5,12
    ead8:	e13fff17 	ldw	r4,-4(fp)
    eadc:	00017b40 	call	17b4 <__mulsi3>
    eae0:	1007883a 	mov	r3,r2
    eae4:	00800074 	movhi	r2,1
    eae8:	108bc204 	addi	r2,r2,12040
    eaec:	1885883a 	add	r2,r3,r2
    eaf0:	00000106 	br	eaf8 <isatty+0x40>
    eaf4:	0005883a 	mov	r2,zero
    eaf8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    eafc:	e0bfef17 	ldw	r2,-68(fp)
    eb00:	10000e26 	beq	r2,zero,eb3c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    eb04:	e0bfef17 	ldw	r2,-68(fp)
    eb08:	10800017 	ldw	r2,0(r2)
    eb0c:	10800817 	ldw	r2,32(r2)
    eb10:	1000021e 	bne	r2,zero,eb1c <isatty+0x64>
    {
      return 1;
    eb14:	00800044 	movi	r2,1
    eb18:	00000d06 	br	eb50 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    eb1c:	e0bff004 	addi	r2,fp,-64
    eb20:	100b883a 	mov	r5,r2
    eb24:	e13fff17 	ldw	r4,-4(fp)
    eb28:	000e8d40 	call	e8d4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    eb2c:	e0bff117 	ldw	r2,-60(fp)
    eb30:	10880020 	cmpeqi	r2,r2,8192
    eb34:	10803fcc 	andi	r2,r2,255
    eb38:	00000506 	br	eb50 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    eb3c:	000ea7c0 	call	ea7c <alt_get_errno>
    eb40:	1007883a 	mov	r3,r2
    eb44:	00801444 	movi	r2,81
    eb48:	18800015 	stw	r2,0(r3)
    return 0;
    eb4c:	0005883a 	mov	r2,zero
  }
}
    eb50:	e037883a 	mov	sp,fp
    eb54:	dfc00117 	ldw	ra,4(sp)
    eb58:	df000017 	ldw	fp,0(sp)
    eb5c:	dec00204 	addi	sp,sp,8
    eb60:	f800283a 	ret

0000eb64 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    eb64:	defffc04 	addi	sp,sp,-16
    eb68:	df000315 	stw	fp,12(sp)
    eb6c:	df000304 	addi	fp,sp,12
    eb70:	e13ffd15 	stw	r4,-12(fp)
    eb74:	e17ffe15 	stw	r5,-8(fp)
    eb78:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    eb7c:	e0fffe17 	ldw	r3,-8(fp)
    eb80:	e0bffd17 	ldw	r2,-12(fp)
    eb84:	18800c26 	beq	r3,r2,ebb8 <alt_load_section+0x54>
  {
    while( to != end )
    eb88:	00000806 	br	ebac <alt_load_section+0x48>
    {
      *to++ = *from++;
    eb8c:	e0bffe17 	ldw	r2,-8(fp)
    eb90:	10c00104 	addi	r3,r2,4
    eb94:	e0fffe15 	stw	r3,-8(fp)
    eb98:	e0fffd17 	ldw	r3,-12(fp)
    eb9c:	19000104 	addi	r4,r3,4
    eba0:	e13ffd15 	stw	r4,-12(fp)
    eba4:	18c00017 	ldw	r3,0(r3)
    eba8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    ebac:	e0fffe17 	ldw	r3,-8(fp)
    ebb0:	e0bfff17 	ldw	r2,-4(fp)
    ebb4:	18bff51e 	bne	r3,r2,eb8c <__alt_data_end+0xf800eb8c>
    {
      *to++ = *from++;
    }
  }
}
    ebb8:	0001883a 	nop
    ebbc:	e037883a 	mov	sp,fp
    ebc0:	df000017 	ldw	fp,0(sp)
    ebc4:	dec00104 	addi	sp,sp,4
    ebc8:	f800283a 	ret

0000ebcc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    ebcc:	defffe04 	addi	sp,sp,-8
    ebd0:	dfc00115 	stw	ra,4(sp)
    ebd4:	df000015 	stw	fp,0(sp)
    ebd8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    ebdc:	01800074 	movhi	r6,1
    ebe0:	31909404 	addi	r6,r6,16976
    ebe4:	01400074 	movhi	r5,1
    ebe8:	29498f04 	addi	r5,r5,9788
    ebec:	01000074 	movhi	r4,1
    ebf0:	21109404 	addi	r4,r4,16976
    ebf4:	000eb640 	call	eb64 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    ebf8:	01800034 	movhi	r6,0
    ebfc:	31808c04 	addi	r6,r6,560
    ec00:	01400034 	movhi	r5,0
    ec04:	29400804 	addi	r5,r5,32
    ec08:	01000034 	movhi	r4,0
    ec0c:	21000804 	addi	r4,r4,32
    ec10:	000eb640 	call	eb64 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    ec14:	01800074 	movhi	r6,1
    ec18:	31898f04 	addi	r6,r6,9788
    ec1c:	01400074 	movhi	r5,1
    ec20:	29481704 	addi	r5,r5,8284
    ec24:	01000074 	movhi	r4,1
    ec28:	21081704 	addi	r4,r4,8284
    ec2c:	000eb640 	call	eb64 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    ec30:	0010f0c0 	call	10f0c <alt_dcache_flush_all>
  alt_icache_flush_all();
    ec34:	00110cc0 	call	110cc <alt_icache_flush_all>
}
    ec38:	0001883a 	nop
    ec3c:	e037883a 	mov	sp,fp
    ec40:	dfc00117 	ldw	ra,4(sp)
    ec44:	df000017 	ldw	fp,0(sp)
    ec48:	dec00204 	addi	sp,sp,8
    ec4c:	f800283a 	ret

0000ec50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ec50:	defffe04 	addi	sp,sp,-8
    ec54:	dfc00115 	stw	ra,4(sp)
    ec58:	df000015 	stw	fp,0(sp)
    ec5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ec60:	d0a00b17 	ldw	r2,-32724(gp)
    ec64:	10000326 	beq	r2,zero,ec74 <alt_get_errno+0x24>
    ec68:	d0a00b17 	ldw	r2,-32724(gp)
    ec6c:	103ee83a 	callr	r2
    ec70:	00000106 	br	ec78 <alt_get_errno+0x28>
    ec74:	d0a71a04 	addi	r2,gp,-25496
}
    ec78:	e037883a 	mov	sp,fp
    ec7c:	dfc00117 	ldw	ra,4(sp)
    ec80:	df000017 	ldw	fp,0(sp)
    ec84:	dec00204 	addi	sp,sp,8
    ec88:	f800283a 	ret

0000ec8c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    ec8c:	defff904 	addi	sp,sp,-28
    ec90:	dfc00615 	stw	ra,24(sp)
    ec94:	df000515 	stw	fp,20(sp)
    ec98:	df000504 	addi	fp,sp,20
    ec9c:	e13ffd15 	stw	r4,-12(fp)
    eca0:	e17ffe15 	stw	r5,-8(fp)
    eca4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    eca8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ecac:	e0bffd17 	ldw	r2,-12(fp)
    ecb0:	10000816 	blt	r2,zero,ecd4 <lseek+0x48>
    ecb4:	01400304 	movi	r5,12
    ecb8:	e13ffd17 	ldw	r4,-12(fp)
    ecbc:	00017b40 	call	17b4 <__mulsi3>
    ecc0:	1007883a 	mov	r3,r2
    ecc4:	00800074 	movhi	r2,1
    ecc8:	108bc204 	addi	r2,r2,12040
    eccc:	1885883a 	add	r2,r3,r2
    ecd0:	00000106 	br	ecd8 <lseek+0x4c>
    ecd4:	0005883a 	mov	r2,zero
    ecd8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    ecdc:	e0bffc17 	ldw	r2,-16(fp)
    ece0:	10001026 	beq	r2,zero,ed24 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    ece4:	e0bffc17 	ldw	r2,-16(fp)
    ece8:	10800017 	ldw	r2,0(r2)
    ecec:	10800717 	ldw	r2,28(r2)
    ecf0:	10000926 	beq	r2,zero,ed18 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    ecf4:	e0bffc17 	ldw	r2,-16(fp)
    ecf8:	10800017 	ldw	r2,0(r2)
    ecfc:	10800717 	ldw	r2,28(r2)
    ed00:	e1bfff17 	ldw	r6,-4(fp)
    ed04:	e17ffe17 	ldw	r5,-8(fp)
    ed08:	e13ffc17 	ldw	r4,-16(fp)
    ed0c:	103ee83a 	callr	r2
    ed10:	e0bffb15 	stw	r2,-20(fp)
    ed14:	00000506 	br	ed2c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    ed18:	00bfde84 	movi	r2,-134
    ed1c:	e0bffb15 	stw	r2,-20(fp)
    ed20:	00000206 	br	ed2c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    ed24:	00bfebc4 	movi	r2,-81
    ed28:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    ed2c:	e0bffb17 	ldw	r2,-20(fp)
    ed30:	1000070e 	bge	r2,zero,ed50 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    ed34:	000ec500 	call	ec50 <alt_get_errno>
    ed38:	1007883a 	mov	r3,r2
    ed3c:	e0bffb17 	ldw	r2,-20(fp)
    ed40:	0085c83a 	sub	r2,zero,r2
    ed44:	18800015 	stw	r2,0(r3)
    rc = -1;
    ed48:	00bfffc4 	movi	r2,-1
    ed4c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    ed50:	e0bffb17 	ldw	r2,-20(fp)
}
    ed54:	e037883a 	mov	sp,fp
    ed58:	dfc00117 	ldw	ra,4(sp)
    ed5c:	df000017 	ldw	fp,0(sp)
    ed60:	dec00204 	addi	sp,sp,8
    ed64:	f800283a 	ret

0000ed68 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ed68:	defffd04 	addi	sp,sp,-12
    ed6c:	dfc00215 	stw	ra,8(sp)
    ed70:	df000115 	stw	fp,4(sp)
    ed74:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ed78:	0009883a 	mov	r4,zero
    ed7c:	000f2100 	call	f210 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    ed80:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ed84:	000f2480 	call	f248 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ed88:	01800074 	movhi	r6,1
    ed8c:	3188e104 	addi	r6,r6,9092
    ed90:	01400074 	movhi	r5,1
    ed94:	2948e104 	addi	r5,r5,9092
    ed98:	01000074 	movhi	r4,1
    ed9c:	2108e504 	addi	r4,r4,9108
    eda0:	001141c0 	call	1141c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    eda4:	001100c0 	call	1100c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    eda8:	01000074 	movhi	r4,1
    edac:	21041b04 	addi	r4,r4,4204
    edb0:	0011cc80 	call	11cc8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    edb4:	d0a71e17 	ldw	r2,-25480(gp)
    edb8:	d0e71f17 	ldw	r3,-25476(gp)
    edbc:	d1272017 	ldw	r4,-25472(gp)
    edc0:	200d883a 	mov	r6,r4
    edc4:	180b883a 	mov	r5,r3
    edc8:	1009883a 	mov	r4,r2
    edcc:	00003a40 	call	3a4 <main>
    edd0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    edd4:	01000044 	movi	r4,1
    edd8:	000e7940 	call	e794 <close>
  exit (result);
    eddc:	e13fff17 	ldw	r4,-4(fp)
    ede0:	0011cdc0 	call	11cdc <exit>

0000ede4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    ede4:	defffe04 	addi	sp,sp,-8
    ede8:	df000115 	stw	fp,4(sp)
    edec:	df000104 	addi	fp,sp,4
    edf0:	e13fff15 	stw	r4,-4(fp)
}
    edf4:	0001883a 	nop
    edf8:	e037883a 	mov	sp,fp
    edfc:	df000017 	ldw	fp,0(sp)
    ee00:	dec00104 	addi	sp,sp,4
    ee04:	f800283a 	ret

0000ee08 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    ee08:	defffe04 	addi	sp,sp,-8
    ee0c:	df000115 	stw	fp,4(sp)
    ee10:	df000104 	addi	fp,sp,4
    ee14:	e13fff15 	stw	r4,-4(fp)
}
    ee18:	0001883a 	nop
    ee1c:	e037883a 	mov	sp,fp
    ee20:	df000017 	ldw	fp,0(sp)
    ee24:	dec00104 	addi	sp,sp,4
    ee28:	f800283a 	ret

0000ee2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ee2c:	defffe04 	addi	sp,sp,-8
    ee30:	dfc00115 	stw	ra,4(sp)
    ee34:	df000015 	stw	fp,0(sp)
    ee38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ee3c:	d0a00b17 	ldw	r2,-32724(gp)
    ee40:	10000326 	beq	r2,zero,ee50 <alt_get_errno+0x24>
    ee44:	d0a00b17 	ldw	r2,-32724(gp)
    ee48:	103ee83a 	callr	r2
    ee4c:	00000106 	br	ee54 <alt_get_errno+0x28>
    ee50:	d0a71a04 	addi	r2,gp,-25496
}
    ee54:	e037883a 	mov	sp,fp
    ee58:	dfc00117 	ldw	ra,4(sp)
    ee5c:	df000017 	ldw	fp,0(sp)
    ee60:	dec00204 	addi	sp,sp,8
    ee64:	f800283a 	ret

0000ee68 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    ee68:	defff904 	addi	sp,sp,-28
    ee6c:	dfc00615 	stw	ra,24(sp)
    ee70:	df000515 	stw	fp,20(sp)
    ee74:	df000504 	addi	fp,sp,20
    ee78:	e13ffd15 	stw	r4,-12(fp)
    ee7c:	e17ffe15 	stw	r5,-8(fp)
    ee80:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ee84:	e0bffd17 	ldw	r2,-12(fp)
    ee88:	10000816 	blt	r2,zero,eeac <read+0x44>
    ee8c:	01400304 	movi	r5,12
    ee90:	e13ffd17 	ldw	r4,-12(fp)
    ee94:	00017b40 	call	17b4 <__mulsi3>
    ee98:	1007883a 	mov	r3,r2
    ee9c:	00800074 	movhi	r2,1
    eea0:	108bc204 	addi	r2,r2,12040
    eea4:	1885883a 	add	r2,r3,r2
    eea8:	00000106 	br	eeb0 <read+0x48>
    eeac:	0005883a 	mov	r2,zero
    eeb0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    eeb4:	e0bffb17 	ldw	r2,-20(fp)
    eeb8:	10002226 	beq	r2,zero,ef44 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    eebc:	e0bffb17 	ldw	r2,-20(fp)
    eec0:	10800217 	ldw	r2,8(r2)
    eec4:	108000cc 	andi	r2,r2,3
    eec8:	10800060 	cmpeqi	r2,r2,1
    eecc:	1000181e 	bne	r2,zero,ef30 <read+0xc8>
        (fd->dev->read))
    eed0:	e0bffb17 	ldw	r2,-20(fp)
    eed4:	10800017 	ldw	r2,0(r2)
    eed8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    eedc:	10001426 	beq	r2,zero,ef30 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    eee0:	e0bffb17 	ldw	r2,-20(fp)
    eee4:	10800017 	ldw	r2,0(r2)
    eee8:	10800517 	ldw	r2,20(r2)
    eeec:	e0ffff17 	ldw	r3,-4(fp)
    eef0:	180d883a 	mov	r6,r3
    eef4:	e17ffe17 	ldw	r5,-8(fp)
    eef8:	e13ffb17 	ldw	r4,-20(fp)
    eefc:	103ee83a 	callr	r2
    ef00:	e0bffc15 	stw	r2,-16(fp)
    ef04:	e0bffc17 	ldw	r2,-16(fp)
    ef08:	1000070e 	bge	r2,zero,ef28 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    ef0c:	000ee2c0 	call	ee2c <alt_get_errno>
    ef10:	1007883a 	mov	r3,r2
    ef14:	e0bffc17 	ldw	r2,-16(fp)
    ef18:	0085c83a 	sub	r2,zero,r2
    ef1c:	18800015 	stw	r2,0(r3)
          return -1;
    ef20:	00bfffc4 	movi	r2,-1
    ef24:	00000c06 	br	ef58 <read+0xf0>
        }
        return rval;
    ef28:	e0bffc17 	ldw	r2,-16(fp)
    ef2c:	00000a06 	br	ef58 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ef30:	000ee2c0 	call	ee2c <alt_get_errno>
    ef34:	1007883a 	mov	r3,r2
    ef38:	00800344 	movi	r2,13
    ef3c:	18800015 	stw	r2,0(r3)
    ef40:	00000406 	br	ef54 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    ef44:	000ee2c0 	call	ee2c <alt_get_errno>
    ef48:	1007883a 	mov	r3,r2
    ef4c:	00801444 	movi	r2,81
    ef50:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ef54:	00bfffc4 	movi	r2,-1
}
    ef58:	e037883a 	mov	sp,fp
    ef5c:	dfc00117 	ldw	ra,4(sp)
    ef60:	df000017 	ldw	fp,0(sp)
    ef64:	dec00204 	addi	sp,sp,8
    ef68:	f800283a 	ret

0000ef6c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ef6c:	defffc04 	addi	sp,sp,-16
    ef70:	dfc00315 	stw	ra,12(sp)
    ef74:	df000215 	stw	fp,8(sp)
    ef78:	dc000115 	stw	r16,4(sp)
    ef7c:	df000204 	addi	fp,sp,8
    ef80:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    ef84:	e0bffe17 	ldw	r2,-8(fp)
    ef88:	108000d0 	cmplti	r2,r2,3
    ef8c:	1000111e 	bne	r2,zero,efd4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    ef90:	04000074 	movhi	r16,1
    ef94:	840bc204 	addi	r16,r16,12040
    ef98:	e0bffe17 	ldw	r2,-8(fp)
    ef9c:	01400304 	movi	r5,12
    efa0:	1009883a 	mov	r4,r2
    efa4:	00017b40 	call	17b4 <__mulsi3>
    efa8:	8085883a 	add	r2,r16,r2
    efac:	10800204 	addi	r2,r2,8
    efb0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    efb4:	04000074 	movhi	r16,1
    efb8:	840bc204 	addi	r16,r16,12040
    efbc:	e0bffe17 	ldw	r2,-8(fp)
    efc0:	01400304 	movi	r5,12
    efc4:	1009883a 	mov	r4,r2
    efc8:	00017b40 	call	17b4 <__mulsi3>
    efcc:	8085883a 	add	r2,r16,r2
    efd0:	10000015 	stw	zero,0(r2)
  }
}
    efd4:	0001883a 	nop
    efd8:	e6ffff04 	addi	sp,fp,-4
    efdc:	dfc00217 	ldw	ra,8(sp)
    efe0:	df000117 	ldw	fp,4(sp)
    efe4:	dc000017 	ldw	r16,0(sp)
    efe8:	dec00304 	addi	sp,sp,12
    efec:	f800283a 	ret

0000eff0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    eff0:	defff904 	addi	sp,sp,-28
    eff4:	df000615 	stw	fp,24(sp)
    eff8:	df000604 	addi	fp,sp,24
    effc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f000:	0005303a 	rdctl	r2,status
    f004:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f008:	e0fffe17 	ldw	r3,-8(fp)
    f00c:	00bfff84 	movi	r2,-2
    f010:	1884703a 	and	r2,r3,r2
    f014:	1001703a 	wrctl	status,r2
  
  return context;
    f018:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    f01c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f020:	d0a00c17 	ldw	r2,-32720(gp)
    f024:	10c000c4 	addi	r3,r2,3
    f028:	00bfff04 	movi	r2,-4
    f02c:	1884703a 	and	r2,r3,r2
    f030:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    f034:	d0e00c17 	ldw	r3,-32720(gp)
    f038:	e0bfff17 	ldw	r2,-4(fp)
    f03c:	1887883a 	add	r3,r3,r2
    f040:	00820034 	movhi	r2,2048
    f044:	10800004 	addi	r2,r2,0
    f048:	10c0062e 	bgeu	r2,r3,f064 <sbrk+0x74>
    f04c:	e0bffb17 	ldw	r2,-20(fp)
    f050:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f054:	e0bffa17 	ldw	r2,-24(fp)
    f058:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    f05c:	00bfffc4 	movi	r2,-1
    f060:	00000b06 	br	f090 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    f064:	d0a00c17 	ldw	r2,-32720(gp)
    f068:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    f06c:	d0e00c17 	ldw	r3,-32720(gp)
    f070:	e0bfff17 	ldw	r2,-4(fp)
    f074:	1885883a 	add	r2,r3,r2
    f078:	d0a00c15 	stw	r2,-32720(gp)
    f07c:	e0bffb17 	ldw	r2,-20(fp)
    f080:	e0bffc15 	stw	r2,-16(fp)
    f084:	e0bffc17 	ldw	r2,-16(fp)
    f088:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    f08c:	e0bffd17 	ldw	r2,-12(fp)
} 
    f090:	e037883a 	mov	sp,fp
    f094:	df000017 	ldw	fp,0(sp)
    f098:	dec00104 	addi	sp,sp,4
    f09c:	f800283a 	ret

0000f0a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f0a0:	defffe04 	addi	sp,sp,-8
    f0a4:	dfc00115 	stw	ra,4(sp)
    f0a8:	df000015 	stw	fp,0(sp)
    f0ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f0b0:	d0a00b17 	ldw	r2,-32724(gp)
    f0b4:	10000326 	beq	r2,zero,f0c4 <alt_get_errno+0x24>
    f0b8:	d0a00b17 	ldw	r2,-32724(gp)
    f0bc:	103ee83a 	callr	r2
    f0c0:	00000106 	br	f0c8 <alt_get_errno+0x28>
    f0c4:	d0a71a04 	addi	r2,gp,-25496
}
    f0c8:	e037883a 	mov	sp,fp
    f0cc:	dfc00117 	ldw	ra,4(sp)
    f0d0:	df000017 	ldw	fp,0(sp)
    f0d4:	dec00204 	addi	sp,sp,8
    f0d8:	f800283a 	ret

0000f0dc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    f0dc:	defff904 	addi	sp,sp,-28
    f0e0:	dfc00615 	stw	ra,24(sp)
    f0e4:	df000515 	stw	fp,20(sp)
    f0e8:	df000504 	addi	fp,sp,20
    f0ec:	e13ffd15 	stw	r4,-12(fp)
    f0f0:	e17ffe15 	stw	r5,-8(fp)
    f0f4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f0f8:	e0bffd17 	ldw	r2,-12(fp)
    f0fc:	10000816 	blt	r2,zero,f120 <write+0x44>
    f100:	01400304 	movi	r5,12
    f104:	e13ffd17 	ldw	r4,-12(fp)
    f108:	00017b40 	call	17b4 <__mulsi3>
    f10c:	1007883a 	mov	r3,r2
    f110:	00800074 	movhi	r2,1
    f114:	108bc204 	addi	r2,r2,12040
    f118:	1885883a 	add	r2,r3,r2
    f11c:	00000106 	br	f124 <write+0x48>
    f120:	0005883a 	mov	r2,zero
    f124:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f128:	e0bffb17 	ldw	r2,-20(fp)
    f12c:	10002126 	beq	r2,zero,f1b4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    f130:	e0bffb17 	ldw	r2,-20(fp)
    f134:	10800217 	ldw	r2,8(r2)
    f138:	108000cc 	andi	r2,r2,3
    f13c:	10001826 	beq	r2,zero,f1a0 <write+0xc4>
    f140:	e0bffb17 	ldw	r2,-20(fp)
    f144:	10800017 	ldw	r2,0(r2)
    f148:	10800617 	ldw	r2,24(r2)
    f14c:	10001426 	beq	r2,zero,f1a0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    f150:	e0bffb17 	ldw	r2,-20(fp)
    f154:	10800017 	ldw	r2,0(r2)
    f158:	10800617 	ldw	r2,24(r2)
    f15c:	e0ffff17 	ldw	r3,-4(fp)
    f160:	180d883a 	mov	r6,r3
    f164:	e17ffe17 	ldw	r5,-8(fp)
    f168:	e13ffb17 	ldw	r4,-20(fp)
    f16c:	103ee83a 	callr	r2
    f170:	e0bffc15 	stw	r2,-16(fp)
    f174:	e0bffc17 	ldw	r2,-16(fp)
    f178:	1000070e 	bge	r2,zero,f198 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    f17c:	000f0a00 	call	f0a0 <alt_get_errno>
    f180:	1007883a 	mov	r3,r2
    f184:	e0bffc17 	ldw	r2,-16(fp)
    f188:	0085c83a 	sub	r2,zero,r2
    f18c:	18800015 	stw	r2,0(r3)
        return -1;
    f190:	00bfffc4 	movi	r2,-1
    f194:	00000c06 	br	f1c8 <write+0xec>
      }
      return rval;
    f198:	e0bffc17 	ldw	r2,-16(fp)
    f19c:	00000a06 	br	f1c8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    f1a0:	000f0a00 	call	f0a0 <alt_get_errno>
    f1a4:	1007883a 	mov	r3,r2
    f1a8:	00800344 	movi	r2,13
    f1ac:	18800015 	stw	r2,0(r3)
    f1b0:	00000406 	br	f1c4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    f1b4:	000f0a00 	call	f0a0 <alt_get_errno>
    f1b8:	1007883a 	mov	r3,r2
    f1bc:	00801444 	movi	r2,81
    f1c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f1c4:	00bfffc4 	movi	r2,-1
}
    f1c8:	e037883a 	mov	sp,fp
    f1cc:	dfc00117 	ldw	ra,4(sp)
    f1d0:	df000017 	ldw	fp,0(sp)
    f1d4:	dec00204 	addi	sp,sp,8
    f1d8:	f800283a 	ret

0000f1dc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    f1dc:	defffd04 	addi	sp,sp,-12
    f1e0:	dfc00215 	stw	ra,8(sp)
    f1e4:	df000115 	stw	fp,4(sp)
    f1e8:	df000104 	addi	fp,sp,4
    f1ec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    f1f0:	d1600804 	addi	r5,gp,-32736
    f1f4:	e13fff17 	ldw	r4,-4(fp)
    f1f8:	0010f680 	call	10f68 <alt_dev_llist_insert>
}
    f1fc:	e037883a 	mov	sp,fp
    f200:	dfc00117 	ldw	ra,4(sp)
    f204:	df000017 	ldw	fp,0(sp)
    f208:	dec00204 	addi	sp,sp,8
    f20c:	f800283a 	ret

0000f210 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    f210:	defffd04 	addi	sp,sp,-12
    f214:	dfc00215 	stw	ra,8(sp)
    f218:	df000115 	stw	fp,4(sp)
    f21c:	df000104 	addi	fp,sp,4
    f220:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( MAINCPU, MainCPU);
    f224:	00118f00 	call	118f0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    f228:	00800044 	movi	r2,1
    f22c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    f230:	0001883a 	nop
    f234:	e037883a 	mov	sp,fp
    f238:	dfc00117 	ldw	ra,4(sp)
    f23c:	df000017 	ldw	fp,0(sp)
    f240:	dec00204 	addi	sp,sp,8
    f244:	f800283a 	ret

0000f248 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    f248:	defffe04 	addi	sp,sp,-8
    f24c:	dfc00115 	stw	ra,4(sp)
    f250:	df000015 	stw	fp,0(sp)
    f254:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( ADDER_TIMER, Adder_timer);
    ALTERA_AVALON_TIMER_INIT ( HIGHRESTIMER, HighResTimer);
    f258:	00820034 	movhi	r2,2048
    f25c:	10840004 	addi	r2,r2,4096
    f260:	d0a72115 	stw	r2,-25468(gp)
    f264:	00817db4 	movhi	r2,1526
    f268:	10b84004 	addi	r2,r2,-7936
    f26c:	d0a72215 	stw	r2,-25464(gp)
    ALTERA_AVALON_TIMER_INIT ( LCD_REFRESH_TIMER, LCD_refresh_timer);
    ALTERA_AVALON_TIMER_INIT ( SYSTEMTIMER, SystemTimer);
    f270:	01c0fa04 	movi	r7,1000
    f274:	01800044 	movi	r6,1
    f278:	000b883a 	mov	r5,zero
    f27c:	01020034 	movhi	r4,2048
    f280:	21040804 	addi	r4,r4,4128
    f284:	0010d640 	call	10d64 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAGUART, JtagUART);
    f288:	000d883a 	mov	r6,zero
    f28c:	000b883a 	mov	r5,zero
    f290:	01000074 	movhi	r4,1
    f294:	210c2c04 	addi	r4,r4,12464
    f298:	000f43c0 	call	f43c <altera_avalon_jtag_uart_init>
    f29c:	01000074 	movhi	r4,1
    f2a0:	210c2204 	addi	r4,r4,12424
    f2a4:	000f1dc0 	call	f1dc <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, LCD);
    f2a8:	01000074 	movhi	r4,1
    f2ac:	21104404 	addi	r4,r4,16656
    f2b0:	0010b580 	call	10b58 <altera_avalon_lcd_16207_init>
    f2b4:	01000074 	movhi	r4,1
    f2b8:	21103a04 	addi	r4,r4,16616
    f2bc:	000f1dc0 	call	f1dc <alt_dev_reg>
}
    f2c0:	0001883a 	nop
    f2c4:	e037883a 	mov	sp,fp
    f2c8:	dfc00117 	ldw	ra,4(sp)
    f2cc:	df000017 	ldw	fp,0(sp)
    f2d0:	dec00204 	addi	sp,sp,8
    f2d4:	f800283a 	ret

0000f2d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f2d8:	defffa04 	addi	sp,sp,-24
    f2dc:	dfc00515 	stw	ra,20(sp)
    f2e0:	df000415 	stw	fp,16(sp)
    f2e4:	df000404 	addi	fp,sp,16
    f2e8:	e13ffd15 	stw	r4,-12(fp)
    f2ec:	e17ffe15 	stw	r5,-8(fp)
    f2f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f2f4:	e0bffd17 	ldw	r2,-12(fp)
    f2f8:	10800017 	ldw	r2,0(r2)
    f2fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f300:	e0bffc17 	ldw	r2,-16(fp)
    f304:	10c00a04 	addi	r3,r2,40
    f308:	e0bffd17 	ldw	r2,-12(fp)
    f30c:	10800217 	ldw	r2,8(r2)
    f310:	100f883a 	mov	r7,r2
    f314:	e1bfff17 	ldw	r6,-4(fp)
    f318:	e17ffe17 	ldw	r5,-8(fp)
    f31c:	1809883a 	mov	r4,r3
    f320:	000f9000 	call	f900 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f324:	e037883a 	mov	sp,fp
    f328:	dfc00117 	ldw	ra,4(sp)
    f32c:	df000017 	ldw	fp,0(sp)
    f330:	dec00204 	addi	sp,sp,8
    f334:	f800283a 	ret

0000f338 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f338:	defffa04 	addi	sp,sp,-24
    f33c:	dfc00515 	stw	ra,20(sp)
    f340:	df000415 	stw	fp,16(sp)
    f344:	df000404 	addi	fp,sp,16
    f348:	e13ffd15 	stw	r4,-12(fp)
    f34c:	e17ffe15 	stw	r5,-8(fp)
    f350:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f354:	e0bffd17 	ldw	r2,-12(fp)
    f358:	10800017 	ldw	r2,0(r2)
    f35c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f360:	e0bffc17 	ldw	r2,-16(fp)
    f364:	10c00a04 	addi	r3,r2,40
    f368:	e0bffd17 	ldw	r2,-12(fp)
    f36c:	10800217 	ldw	r2,8(r2)
    f370:	100f883a 	mov	r7,r2
    f374:	e1bfff17 	ldw	r6,-4(fp)
    f378:	e17ffe17 	ldw	r5,-8(fp)
    f37c:	1809883a 	mov	r4,r3
    f380:	000fb1c0 	call	fb1c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f384:	e037883a 	mov	sp,fp
    f388:	dfc00117 	ldw	ra,4(sp)
    f38c:	df000017 	ldw	fp,0(sp)
    f390:	dec00204 	addi	sp,sp,8
    f394:	f800283a 	ret

0000f398 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f398:	defffc04 	addi	sp,sp,-16
    f39c:	dfc00315 	stw	ra,12(sp)
    f3a0:	df000215 	stw	fp,8(sp)
    f3a4:	df000204 	addi	fp,sp,8
    f3a8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f3ac:	e0bfff17 	ldw	r2,-4(fp)
    f3b0:	10800017 	ldw	r2,0(r2)
    f3b4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f3b8:	e0bffe17 	ldw	r2,-8(fp)
    f3bc:	10c00a04 	addi	r3,r2,40
    f3c0:	e0bfff17 	ldw	r2,-4(fp)
    f3c4:	10800217 	ldw	r2,8(r2)
    f3c8:	100b883a 	mov	r5,r2
    f3cc:	1809883a 	mov	r4,r3
    f3d0:	000f7a80 	call	f7a8 <altera_avalon_jtag_uart_close>
}
    f3d4:	e037883a 	mov	sp,fp
    f3d8:	dfc00117 	ldw	ra,4(sp)
    f3dc:	df000017 	ldw	fp,0(sp)
    f3e0:	dec00204 	addi	sp,sp,8
    f3e4:	f800283a 	ret

0000f3e8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f3e8:	defffa04 	addi	sp,sp,-24
    f3ec:	dfc00515 	stw	ra,20(sp)
    f3f0:	df000415 	stw	fp,16(sp)
    f3f4:	df000404 	addi	fp,sp,16
    f3f8:	e13ffd15 	stw	r4,-12(fp)
    f3fc:	e17ffe15 	stw	r5,-8(fp)
    f400:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f404:	e0bffd17 	ldw	r2,-12(fp)
    f408:	10800017 	ldw	r2,0(r2)
    f40c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f410:	e0bffc17 	ldw	r2,-16(fp)
    f414:	10800a04 	addi	r2,r2,40
    f418:	e1bfff17 	ldw	r6,-4(fp)
    f41c:	e17ffe17 	ldw	r5,-8(fp)
    f420:	1009883a 	mov	r4,r2
    f424:	000f8100 	call	f810 <altera_avalon_jtag_uart_ioctl>
}
    f428:	e037883a 	mov	sp,fp
    f42c:	dfc00117 	ldw	ra,4(sp)
    f430:	df000017 	ldw	fp,0(sp)
    f434:	dec00204 	addi	sp,sp,8
    f438:	f800283a 	ret

0000f43c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f43c:	defffa04 	addi	sp,sp,-24
    f440:	dfc00515 	stw	ra,20(sp)
    f444:	df000415 	stw	fp,16(sp)
    f448:	df000404 	addi	fp,sp,16
    f44c:	e13ffd15 	stw	r4,-12(fp)
    f450:	e17ffe15 	stw	r5,-8(fp)
    f454:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f458:	e0bffd17 	ldw	r2,-12(fp)
    f45c:	00c00044 	movi	r3,1
    f460:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f464:	e0bffd17 	ldw	r2,-12(fp)
    f468:	10800017 	ldw	r2,0(r2)
    f46c:	10800104 	addi	r2,r2,4
    f470:	1007883a 	mov	r3,r2
    f474:	e0bffd17 	ldw	r2,-12(fp)
    f478:	10800817 	ldw	r2,32(r2)
    f47c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f480:	e0bffe17 	ldw	r2,-8(fp)
    f484:	e0ffff17 	ldw	r3,-4(fp)
    f488:	d8000015 	stw	zero,0(sp)
    f48c:	e1fffd17 	ldw	r7,-12(fp)
    f490:	01800074 	movhi	r6,1
    f494:	31bd3f04 	addi	r6,r6,-2820
    f498:	180b883a 	mov	r5,r3
    f49c:	1009883a 	mov	r4,r2
    f4a0:	00110ec0 	call	110ec <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f4a4:	e0bffd17 	ldw	r2,-12(fp)
    f4a8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f4ac:	e0bffd17 	ldw	r2,-12(fp)
    f4b0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f4b4:	d0e72517 	ldw	r3,-25452(gp)
    f4b8:	e1fffd17 	ldw	r7,-12(fp)
    f4bc:	01800074 	movhi	r6,1
    f4c0:	31bdc204 	addi	r6,r6,-2296
    f4c4:	180b883a 	mov	r5,r3
    f4c8:	1009883a 	mov	r4,r2
    f4cc:	0010de00 	call	10de0 <alt_alarm_start>
    f4d0:	1000040e 	bge	r2,zero,f4e4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f4d4:	e0fffd17 	ldw	r3,-12(fp)
    f4d8:	00a00034 	movhi	r2,32768
    f4dc:	10bfffc4 	addi	r2,r2,-1
    f4e0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f4e4:	0001883a 	nop
    f4e8:	e037883a 	mov	sp,fp
    f4ec:	dfc00117 	ldw	ra,4(sp)
    f4f0:	df000017 	ldw	fp,0(sp)
    f4f4:	dec00204 	addi	sp,sp,8
    f4f8:	f800283a 	ret

0000f4fc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f4fc:	defff804 	addi	sp,sp,-32
    f500:	df000715 	stw	fp,28(sp)
    f504:	df000704 	addi	fp,sp,28
    f508:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f50c:	e0bfff17 	ldw	r2,-4(fp)
    f510:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f514:	e0bffb17 	ldw	r2,-20(fp)
    f518:	10800017 	ldw	r2,0(r2)
    f51c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f520:	e0bffc17 	ldw	r2,-16(fp)
    f524:	10800104 	addi	r2,r2,4
    f528:	10800037 	ldwio	r2,0(r2)
    f52c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f530:	e0bffd17 	ldw	r2,-12(fp)
    f534:	1080c00c 	andi	r2,r2,768
    f538:	10006d26 	beq	r2,zero,f6f0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f53c:	e0bffd17 	ldw	r2,-12(fp)
    f540:	1080400c 	andi	r2,r2,256
    f544:	10003526 	beq	r2,zero,f61c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f548:	00800074 	movhi	r2,1
    f54c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f550:	e0bffb17 	ldw	r2,-20(fp)
    f554:	10800a17 	ldw	r2,40(r2)
    f558:	10800044 	addi	r2,r2,1
    f55c:	1081ffcc 	andi	r2,r2,2047
    f560:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f564:	e0bffb17 	ldw	r2,-20(fp)
    f568:	10c00b17 	ldw	r3,44(r2)
    f56c:	e0bffe17 	ldw	r2,-8(fp)
    f570:	18801526 	beq	r3,r2,f5c8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f574:	e0bffc17 	ldw	r2,-16(fp)
    f578:	10800037 	ldwio	r2,0(r2)
    f57c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f580:	e0bff917 	ldw	r2,-28(fp)
    f584:	10a0000c 	andi	r2,r2,32768
    f588:	10001126 	beq	r2,zero,f5d0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f58c:	e0bffb17 	ldw	r2,-20(fp)
    f590:	10800a17 	ldw	r2,40(r2)
    f594:	e0fff917 	ldw	r3,-28(fp)
    f598:	1809883a 	mov	r4,r3
    f59c:	e0fffb17 	ldw	r3,-20(fp)
    f5a0:	1885883a 	add	r2,r3,r2
    f5a4:	10800e04 	addi	r2,r2,56
    f5a8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f5ac:	e0bffb17 	ldw	r2,-20(fp)
    f5b0:	10800a17 	ldw	r2,40(r2)
    f5b4:	10800044 	addi	r2,r2,1
    f5b8:	10c1ffcc 	andi	r3,r2,2047
    f5bc:	e0bffb17 	ldw	r2,-20(fp)
    f5c0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f5c4:	003fe206 	br	f550 <__alt_data_end+0xf800f550>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f5c8:	0001883a 	nop
    f5cc:	00000106 	br	f5d4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f5d0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f5d4:	e0bff917 	ldw	r2,-28(fp)
    f5d8:	10bfffec 	andhi	r2,r2,65535
    f5dc:	10000f26 	beq	r2,zero,f61c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f5e0:	e0bffb17 	ldw	r2,-20(fp)
    f5e4:	10c00817 	ldw	r3,32(r2)
    f5e8:	00bfff84 	movi	r2,-2
    f5ec:	1886703a 	and	r3,r3,r2
    f5f0:	e0bffb17 	ldw	r2,-20(fp)
    f5f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f5f8:	e0bffc17 	ldw	r2,-16(fp)
    f5fc:	10800104 	addi	r2,r2,4
    f600:	1007883a 	mov	r3,r2
    f604:	e0bffb17 	ldw	r2,-20(fp)
    f608:	10800817 	ldw	r2,32(r2)
    f60c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f610:	e0bffc17 	ldw	r2,-16(fp)
    f614:	10800104 	addi	r2,r2,4
    f618:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f61c:	e0bffd17 	ldw	r2,-12(fp)
    f620:	1080800c 	andi	r2,r2,512
    f624:	103fbe26 	beq	r2,zero,f520 <__alt_data_end+0xf800f520>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f628:	e0bffd17 	ldw	r2,-12(fp)
    f62c:	1004d43a 	srli	r2,r2,16
    f630:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f634:	00001406 	br	f688 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f638:	e0bffc17 	ldw	r2,-16(fp)
    f63c:	e0fffb17 	ldw	r3,-20(fp)
    f640:	18c00d17 	ldw	r3,52(r3)
    f644:	e13ffb17 	ldw	r4,-20(fp)
    f648:	20c7883a 	add	r3,r4,r3
    f64c:	18c20e04 	addi	r3,r3,2104
    f650:	18c00003 	ldbu	r3,0(r3)
    f654:	18c03fcc 	andi	r3,r3,255
    f658:	18c0201c 	xori	r3,r3,128
    f65c:	18ffe004 	addi	r3,r3,-128
    f660:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f664:	e0bffb17 	ldw	r2,-20(fp)
    f668:	10800d17 	ldw	r2,52(r2)
    f66c:	10800044 	addi	r2,r2,1
    f670:	10c1ffcc 	andi	r3,r2,2047
    f674:	e0bffb17 	ldw	r2,-20(fp)
    f678:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f67c:	e0bffa17 	ldw	r2,-24(fp)
    f680:	10bfffc4 	addi	r2,r2,-1
    f684:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f688:	e0bffa17 	ldw	r2,-24(fp)
    f68c:	10000526 	beq	r2,zero,f6a4 <altera_avalon_jtag_uart_irq+0x1a8>
    f690:	e0bffb17 	ldw	r2,-20(fp)
    f694:	10c00d17 	ldw	r3,52(r2)
    f698:	e0bffb17 	ldw	r2,-20(fp)
    f69c:	10800c17 	ldw	r2,48(r2)
    f6a0:	18bfe51e 	bne	r3,r2,f638 <__alt_data_end+0xf800f638>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f6a4:	e0bffa17 	ldw	r2,-24(fp)
    f6a8:	103f9d26 	beq	r2,zero,f520 <__alt_data_end+0xf800f520>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f6ac:	e0bffb17 	ldw	r2,-20(fp)
    f6b0:	10c00817 	ldw	r3,32(r2)
    f6b4:	00bfff44 	movi	r2,-3
    f6b8:	1886703a 	and	r3,r3,r2
    f6bc:	e0bffb17 	ldw	r2,-20(fp)
    f6c0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f6c4:	e0bffb17 	ldw	r2,-20(fp)
    f6c8:	10800017 	ldw	r2,0(r2)
    f6cc:	10800104 	addi	r2,r2,4
    f6d0:	1007883a 	mov	r3,r2
    f6d4:	e0bffb17 	ldw	r2,-20(fp)
    f6d8:	10800817 	ldw	r2,32(r2)
    f6dc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f6e0:	e0bffc17 	ldw	r2,-16(fp)
    f6e4:	10800104 	addi	r2,r2,4
    f6e8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f6ec:	003f8c06 	br	f520 <__alt_data_end+0xf800f520>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    f6f0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    f6f4:	0001883a 	nop
    f6f8:	e037883a 	mov	sp,fp
    f6fc:	df000017 	ldw	fp,0(sp)
    f700:	dec00104 	addi	sp,sp,4
    f704:	f800283a 	ret

0000f708 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f708:	defff804 	addi	sp,sp,-32
    f70c:	df000715 	stw	fp,28(sp)
    f710:	df000704 	addi	fp,sp,28
    f714:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f718:	e0bffb17 	ldw	r2,-20(fp)
    f71c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f720:	e0bff917 	ldw	r2,-28(fp)
    f724:	10800017 	ldw	r2,0(r2)
    f728:	10800104 	addi	r2,r2,4
    f72c:	10800037 	ldwio	r2,0(r2)
    f730:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f734:	e0bffa17 	ldw	r2,-24(fp)
    f738:	1081000c 	andi	r2,r2,1024
    f73c:	10000b26 	beq	r2,zero,f76c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f740:	e0bff917 	ldw	r2,-28(fp)
    f744:	10800017 	ldw	r2,0(r2)
    f748:	10800104 	addi	r2,r2,4
    f74c:	1007883a 	mov	r3,r2
    f750:	e0bff917 	ldw	r2,-28(fp)
    f754:	10800817 	ldw	r2,32(r2)
    f758:	10810014 	ori	r2,r2,1024
    f75c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f760:	e0bff917 	ldw	r2,-28(fp)
    f764:	10000915 	stw	zero,36(r2)
    f768:	00000a06 	br	f794 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f76c:	e0bff917 	ldw	r2,-28(fp)
    f770:	10c00917 	ldw	r3,36(r2)
    f774:	00a00034 	movhi	r2,32768
    f778:	10bfff04 	addi	r2,r2,-4
    f77c:	10c00536 	bltu	r2,r3,f794 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f780:	e0bff917 	ldw	r2,-28(fp)
    f784:	10800917 	ldw	r2,36(r2)
    f788:	10c00044 	addi	r3,r2,1
    f78c:	e0bff917 	ldw	r2,-28(fp)
    f790:	10c00915 	stw	r3,36(r2)
    f794:	d0a72517 	ldw	r2,-25452(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f798:	e037883a 	mov	sp,fp
    f79c:	df000017 	ldw	fp,0(sp)
    f7a0:	dec00104 	addi	sp,sp,4
    f7a4:	f800283a 	ret

0000f7a8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f7a8:	defffd04 	addi	sp,sp,-12
    f7ac:	df000215 	stw	fp,8(sp)
    f7b0:	df000204 	addi	fp,sp,8
    f7b4:	e13ffe15 	stw	r4,-8(fp)
    f7b8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f7bc:	00000506 	br	f7d4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f7c0:	e0bfff17 	ldw	r2,-4(fp)
    f7c4:	1090000c 	andi	r2,r2,16384
    f7c8:	10000226 	beq	r2,zero,f7d4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f7cc:	00bffd44 	movi	r2,-11
    f7d0:	00000b06 	br	f800 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f7d4:	e0bffe17 	ldw	r2,-8(fp)
    f7d8:	10c00d17 	ldw	r3,52(r2)
    f7dc:	e0bffe17 	ldw	r2,-8(fp)
    f7e0:	10800c17 	ldw	r2,48(r2)
    f7e4:	18800526 	beq	r3,r2,f7fc <altera_avalon_jtag_uart_close+0x54>
    f7e8:	e0bffe17 	ldw	r2,-8(fp)
    f7ec:	10c00917 	ldw	r3,36(r2)
    f7f0:	e0bffe17 	ldw	r2,-8(fp)
    f7f4:	10800117 	ldw	r2,4(r2)
    f7f8:	18bff136 	bltu	r3,r2,f7c0 <__alt_data_end+0xf800f7c0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f7fc:	0005883a 	mov	r2,zero
}
    f800:	e037883a 	mov	sp,fp
    f804:	df000017 	ldw	fp,0(sp)
    f808:	dec00104 	addi	sp,sp,4
    f80c:	f800283a 	ret

0000f810 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    f810:	defffa04 	addi	sp,sp,-24
    f814:	df000515 	stw	fp,20(sp)
    f818:	df000504 	addi	fp,sp,20
    f81c:	e13ffd15 	stw	r4,-12(fp)
    f820:	e17ffe15 	stw	r5,-8(fp)
    f824:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    f828:	00bff9c4 	movi	r2,-25
    f82c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    f830:	e0bffe17 	ldw	r2,-8(fp)
    f834:	10da8060 	cmpeqi	r3,r2,27137
    f838:	1800031e 	bne	r3,zero,f848 <altera_avalon_jtag_uart_ioctl+0x38>
    f83c:	109a80a0 	cmpeqi	r2,r2,27138
    f840:	1000181e 	bne	r2,zero,f8a4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    f844:	00002906 	br	f8ec <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f848:	e0bffd17 	ldw	r2,-12(fp)
    f84c:	10c00117 	ldw	r3,4(r2)
    f850:	00a00034 	movhi	r2,32768
    f854:	10bfffc4 	addi	r2,r2,-1
    f858:	18802126 	beq	r3,r2,f8e0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    f85c:	e0bfff17 	ldw	r2,-4(fp)
    f860:	10800017 	ldw	r2,0(r2)
    f864:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f868:	e0bffc17 	ldw	r2,-16(fp)
    f86c:	10800090 	cmplti	r2,r2,2
    f870:	1000061e 	bne	r2,zero,f88c <altera_avalon_jtag_uart_ioctl+0x7c>
    f874:	e0fffc17 	ldw	r3,-16(fp)
    f878:	00a00034 	movhi	r2,32768
    f87c:	10bfffc4 	addi	r2,r2,-1
    f880:	18800226 	beq	r3,r2,f88c <altera_avalon_jtag_uart_ioctl+0x7c>
    f884:	e0bffc17 	ldw	r2,-16(fp)
    f888:	00000206 	br	f894 <altera_avalon_jtag_uart_ioctl+0x84>
    f88c:	00a00034 	movhi	r2,32768
    f890:	10bfff84 	addi	r2,r2,-2
    f894:	e0fffd17 	ldw	r3,-12(fp)
    f898:	18800115 	stw	r2,4(r3)
      rc = 0;
    f89c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f8a0:	00000f06 	br	f8e0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f8a4:	e0bffd17 	ldw	r2,-12(fp)
    f8a8:	10c00117 	ldw	r3,4(r2)
    f8ac:	00a00034 	movhi	r2,32768
    f8b0:	10bfffc4 	addi	r2,r2,-1
    f8b4:	18800c26 	beq	r3,r2,f8e8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f8b8:	e0bffd17 	ldw	r2,-12(fp)
    f8bc:	10c00917 	ldw	r3,36(r2)
    f8c0:	e0bffd17 	ldw	r2,-12(fp)
    f8c4:	10800117 	ldw	r2,4(r2)
    f8c8:	1885803a 	cmpltu	r2,r3,r2
    f8cc:	10c03fcc 	andi	r3,r2,255
    f8d0:	e0bfff17 	ldw	r2,-4(fp)
    f8d4:	10c00015 	stw	r3,0(r2)
      rc = 0;
    f8d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f8dc:	00000206 	br	f8e8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    f8e0:	0001883a 	nop
    f8e4:	00000106 	br	f8ec <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    f8e8:	0001883a 	nop

  default:
    break;
  }

  return rc;
    f8ec:	e0bffb17 	ldw	r2,-20(fp)
}
    f8f0:	e037883a 	mov	sp,fp
    f8f4:	df000017 	ldw	fp,0(sp)
    f8f8:	dec00104 	addi	sp,sp,4
    f8fc:	f800283a 	ret

0000f900 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f900:	defff304 	addi	sp,sp,-52
    f904:	dfc00c15 	stw	ra,48(sp)
    f908:	df000b15 	stw	fp,44(sp)
    f90c:	df000b04 	addi	fp,sp,44
    f910:	e13ffc15 	stw	r4,-16(fp)
    f914:	e17ffd15 	stw	r5,-12(fp)
    f918:	e1bffe15 	stw	r6,-8(fp)
    f91c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    f920:	e0bffd17 	ldw	r2,-12(fp)
    f924:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f928:	00004706 	br	fa48 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f92c:	e0bffc17 	ldw	r2,-16(fp)
    f930:	10800a17 	ldw	r2,40(r2)
    f934:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    f938:	e0bffc17 	ldw	r2,-16(fp)
    f93c:	10800b17 	ldw	r2,44(r2)
    f940:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    f944:	e0fff717 	ldw	r3,-36(fp)
    f948:	e0bff817 	ldw	r2,-32(fp)
    f94c:	18800536 	bltu	r3,r2,f964 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    f950:	e0fff717 	ldw	r3,-36(fp)
    f954:	e0bff817 	ldw	r2,-32(fp)
    f958:	1885c83a 	sub	r2,r3,r2
    f95c:	e0bff615 	stw	r2,-40(fp)
    f960:	00000406 	br	f974 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f964:	00c20004 	movi	r3,2048
    f968:	e0bff817 	ldw	r2,-32(fp)
    f96c:	1885c83a 	sub	r2,r3,r2
    f970:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f974:	e0bff617 	ldw	r2,-40(fp)
    f978:	10001e26 	beq	r2,zero,f9f4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    f97c:	e0fffe17 	ldw	r3,-8(fp)
    f980:	e0bff617 	ldw	r2,-40(fp)
    f984:	1880022e 	bgeu	r3,r2,f990 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    f988:	e0bffe17 	ldw	r2,-8(fp)
    f98c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    f990:	e0bffc17 	ldw	r2,-16(fp)
    f994:	10c00e04 	addi	r3,r2,56
    f998:	e0bff817 	ldw	r2,-32(fp)
    f99c:	1885883a 	add	r2,r3,r2
    f9a0:	e1bff617 	ldw	r6,-40(fp)
    f9a4:	100b883a 	mov	r5,r2
    f9a8:	e13ff517 	ldw	r4,-44(fp)
    f9ac:	00073f00 	call	73f0 <memcpy>
      ptr   += n;
    f9b0:	e0fff517 	ldw	r3,-44(fp)
    f9b4:	e0bff617 	ldw	r2,-40(fp)
    f9b8:	1885883a 	add	r2,r3,r2
    f9bc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    f9c0:	e0fffe17 	ldw	r3,-8(fp)
    f9c4:	e0bff617 	ldw	r2,-40(fp)
    f9c8:	1885c83a 	sub	r2,r3,r2
    f9cc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f9d0:	e0fff817 	ldw	r3,-32(fp)
    f9d4:	e0bff617 	ldw	r2,-40(fp)
    f9d8:	1885883a 	add	r2,r3,r2
    f9dc:	10c1ffcc 	andi	r3,r2,2047
    f9e0:	e0bffc17 	ldw	r2,-16(fp)
    f9e4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    f9e8:	e0bffe17 	ldw	r2,-8(fp)
    f9ec:	00bfcf16 	blt	zero,r2,f92c <__alt_data_end+0xf800f92c>
    f9f0:	00000106 	br	f9f8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    f9f4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    f9f8:	e0fff517 	ldw	r3,-44(fp)
    f9fc:	e0bffd17 	ldw	r2,-12(fp)
    fa00:	1880141e 	bne	r3,r2,fa54 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    fa04:	e0bfff17 	ldw	r2,-4(fp)
    fa08:	1090000c 	andi	r2,r2,16384
    fa0c:	1000131e 	bne	r2,zero,fa5c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    fa10:	0001883a 	nop
    fa14:	e0bffc17 	ldw	r2,-16(fp)
    fa18:	10c00a17 	ldw	r3,40(r2)
    fa1c:	e0bff717 	ldw	r2,-36(fp)
    fa20:	1880051e 	bne	r3,r2,fa38 <altera_avalon_jtag_uart_read+0x138>
    fa24:	e0bffc17 	ldw	r2,-16(fp)
    fa28:	10c00917 	ldw	r3,36(r2)
    fa2c:	e0bffc17 	ldw	r2,-16(fp)
    fa30:	10800117 	ldw	r2,4(r2)
    fa34:	18bff736 	bltu	r3,r2,fa14 <__alt_data_end+0xf800fa14>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    fa38:	e0bffc17 	ldw	r2,-16(fp)
    fa3c:	10c00a17 	ldw	r3,40(r2)
    fa40:	e0bff717 	ldw	r2,-36(fp)
    fa44:	18800726 	beq	r3,r2,fa64 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fa48:	e0bffe17 	ldw	r2,-8(fp)
    fa4c:	00bfb716 	blt	zero,r2,f92c <__alt_data_end+0xf800f92c>
    fa50:	00000506 	br	fa68 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    fa54:	0001883a 	nop
    fa58:	00000306 	br	fa68 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    fa5c:	0001883a 	nop
    fa60:	00000106 	br	fa68 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    fa64:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    fa68:	e0fff517 	ldw	r3,-44(fp)
    fa6c:	e0bffd17 	ldw	r2,-12(fp)
    fa70:	18801826 	beq	r3,r2,fad4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fa74:	0005303a 	rdctl	r2,status
    fa78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa7c:	e0fffb17 	ldw	r3,-20(fp)
    fa80:	00bfff84 	movi	r2,-2
    fa84:	1884703a 	and	r2,r3,r2
    fa88:	1001703a 	wrctl	status,r2
  
  return context;
    fa8c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    fa90:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fa94:	e0bffc17 	ldw	r2,-16(fp)
    fa98:	10800817 	ldw	r2,32(r2)
    fa9c:	10c00054 	ori	r3,r2,1
    faa0:	e0bffc17 	ldw	r2,-16(fp)
    faa4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    faa8:	e0bffc17 	ldw	r2,-16(fp)
    faac:	10800017 	ldw	r2,0(r2)
    fab0:	10800104 	addi	r2,r2,4
    fab4:	1007883a 	mov	r3,r2
    fab8:	e0bffc17 	ldw	r2,-16(fp)
    fabc:	10800817 	ldw	r2,32(r2)
    fac0:	18800035 	stwio	r2,0(r3)
    fac4:	e0bffa17 	ldw	r2,-24(fp)
    fac8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    facc:	e0bff917 	ldw	r2,-28(fp)
    fad0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    fad4:	e0fff517 	ldw	r3,-44(fp)
    fad8:	e0bffd17 	ldw	r2,-12(fp)
    fadc:	18800426 	beq	r3,r2,faf0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    fae0:	e0fff517 	ldw	r3,-44(fp)
    fae4:	e0bffd17 	ldw	r2,-12(fp)
    fae8:	1885c83a 	sub	r2,r3,r2
    faec:	00000606 	br	fb08 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    faf0:	e0bfff17 	ldw	r2,-4(fp)
    faf4:	1090000c 	andi	r2,r2,16384
    faf8:	10000226 	beq	r2,zero,fb04 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    fafc:	00bffd44 	movi	r2,-11
    fb00:	00000106 	br	fb08 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    fb04:	00bffec4 	movi	r2,-5
}
    fb08:	e037883a 	mov	sp,fp
    fb0c:	dfc00117 	ldw	ra,4(sp)
    fb10:	df000017 	ldw	fp,0(sp)
    fb14:	dec00204 	addi	sp,sp,8
    fb18:	f800283a 	ret

0000fb1c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    fb1c:	defff304 	addi	sp,sp,-52
    fb20:	dfc00c15 	stw	ra,48(sp)
    fb24:	df000b15 	stw	fp,44(sp)
    fb28:	df000b04 	addi	fp,sp,44
    fb2c:	e13ffc15 	stw	r4,-16(fp)
    fb30:	e17ffd15 	stw	r5,-12(fp)
    fb34:	e1bffe15 	stw	r6,-8(fp)
    fb38:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    fb3c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    fb40:	e0bffd17 	ldw	r2,-12(fp)
    fb44:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fb48:	00003706 	br	fc28 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    fb4c:	e0bffc17 	ldw	r2,-16(fp)
    fb50:	10800c17 	ldw	r2,48(r2)
    fb54:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    fb58:	e0bffc17 	ldw	r2,-16(fp)
    fb5c:	10800d17 	ldw	r2,52(r2)
    fb60:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    fb64:	e0fff917 	ldw	r3,-28(fp)
    fb68:	e0bff517 	ldw	r2,-44(fp)
    fb6c:	1880062e 	bgeu	r3,r2,fb88 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    fb70:	e0fff517 	ldw	r3,-44(fp)
    fb74:	e0bff917 	ldw	r2,-28(fp)
    fb78:	1885c83a 	sub	r2,r3,r2
    fb7c:	10bfffc4 	addi	r2,r2,-1
    fb80:	e0bff615 	stw	r2,-40(fp)
    fb84:	00000b06 	br	fbb4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    fb88:	e0bff517 	ldw	r2,-44(fp)
    fb8c:	10000526 	beq	r2,zero,fba4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    fb90:	00c20004 	movi	r3,2048
    fb94:	e0bff917 	ldw	r2,-28(fp)
    fb98:	1885c83a 	sub	r2,r3,r2
    fb9c:	e0bff615 	stw	r2,-40(fp)
    fba0:	00000406 	br	fbb4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    fba4:	00c1ffc4 	movi	r3,2047
    fba8:	e0bff917 	ldw	r2,-28(fp)
    fbac:	1885c83a 	sub	r2,r3,r2
    fbb0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fbb4:	e0bff617 	ldw	r2,-40(fp)
    fbb8:	10001e26 	beq	r2,zero,fc34 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    fbbc:	e0fffe17 	ldw	r3,-8(fp)
    fbc0:	e0bff617 	ldw	r2,-40(fp)
    fbc4:	1880022e 	bgeu	r3,r2,fbd0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    fbc8:	e0bffe17 	ldw	r2,-8(fp)
    fbcc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    fbd0:	e0bffc17 	ldw	r2,-16(fp)
    fbd4:	10c20e04 	addi	r3,r2,2104
    fbd8:	e0bff917 	ldw	r2,-28(fp)
    fbdc:	1885883a 	add	r2,r3,r2
    fbe0:	e1bff617 	ldw	r6,-40(fp)
    fbe4:	e17ffd17 	ldw	r5,-12(fp)
    fbe8:	1009883a 	mov	r4,r2
    fbec:	00073f00 	call	73f0 <memcpy>
      ptr   += n;
    fbf0:	e0fffd17 	ldw	r3,-12(fp)
    fbf4:	e0bff617 	ldw	r2,-40(fp)
    fbf8:	1885883a 	add	r2,r3,r2
    fbfc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    fc00:	e0fffe17 	ldw	r3,-8(fp)
    fc04:	e0bff617 	ldw	r2,-40(fp)
    fc08:	1885c83a 	sub	r2,r3,r2
    fc0c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fc10:	e0fff917 	ldw	r3,-28(fp)
    fc14:	e0bff617 	ldw	r2,-40(fp)
    fc18:	1885883a 	add	r2,r3,r2
    fc1c:	10c1ffcc 	andi	r3,r2,2047
    fc20:	e0bffc17 	ldw	r2,-16(fp)
    fc24:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fc28:	e0bffe17 	ldw	r2,-8(fp)
    fc2c:	00bfc716 	blt	zero,r2,fb4c <__alt_data_end+0xf800fb4c>
    fc30:	00000106 	br	fc38 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    fc34:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc38:	0005303a 	rdctl	r2,status
    fc3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc40:	e0fffb17 	ldw	r3,-20(fp)
    fc44:	00bfff84 	movi	r2,-2
    fc48:	1884703a 	and	r2,r3,r2
    fc4c:	1001703a 	wrctl	status,r2
  
  return context;
    fc50:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    fc54:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    fc58:	e0bffc17 	ldw	r2,-16(fp)
    fc5c:	10800817 	ldw	r2,32(r2)
    fc60:	10c00094 	ori	r3,r2,2
    fc64:	e0bffc17 	ldw	r2,-16(fp)
    fc68:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fc6c:	e0bffc17 	ldw	r2,-16(fp)
    fc70:	10800017 	ldw	r2,0(r2)
    fc74:	10800104 	addi	r2,r2,4
    fc78:	1007883a 	mov	r3,r2
    fc7c:	e0bffc17 	ldw	r2,-16(fp)
    fc80:	10800817 	ldw	r2,32(r2)
    fc84:	18800035 	stwio	r2,0(r3)
    fc88:	e0bffa17 	ldw	r2,-24(fp)
    fc8c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc90:	e0bff817 	ldw	r2,-32(fp)
    fc94:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    fc98:	e0bffe17 	ldw	r2,-8(fp)
    fc9c:	0080100e 	bge	zero,r2,fce0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    fca0:	e0bfff17 	ldw	r2,-4(fp)
    fca4:	1090000c 	andi	r2,r2,16384
    fca8:	1000101e 	bne	r2,zero,fcec <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    fcac:	0001883a 	nop
    fcb0:	e0bffc17 	ldw	r2,-16(fp)
    fcb4:	10c00d17 	ldw	r3,52(r2)
    fcb8:	e0bff517 	ldw	r2,-44(fp)
    fcbc:	1880051e 	bne	r3,r2,fcd4 <altera_avalon_jtag_uart_write+0x1b8>
    fcc0:	e0bffc17 	ldw	r2,-16(fp)
    fcc4:	10c00917 	ldw	r3,36(r2)
    fcc8:	e0bffc17 	ldw	r2,-16(fp)
    fccc:	10800117 	ldw	r2,4(r2)
    fcd0:	18bff736 	bltu	r3,r2,fcb0 <__alt_data_end+0xf800fcb0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    fcd4:	e0bffc17 	ldw	r2,-16(fp)
    fcd8:	10800917 	ldw	r2,36(r2)
    fcdc:	1000051e 	bne	r2,zero,fcf4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    fce0:	e0bffe17 	ldw	r2,-8(fp)
    fce4:	00bfd016 	blt	zero,r2,fc28 <__alt_data_end+0xf800fc28>
    fce8:	00000306 	br	fcf8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    fcec:	0001883a 	nop
    fcf0:	00000106 	br	fcf8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    fcf4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    fcf8:	e0fffd17 	ldw	r3,-12(fp)
    fcfc:	e0bff717 	ldw	r2,-36(fp)
    fd00:	18800426 	beq	r3,r2,fd14 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    fd04:	e0fffd17 	ldw	r3,-12(fp)
    fd08:	e0bff717 	ldw	r2,-36(fp)
    fd0c:	1885c83a 	sub	r2,r3,r2
    fd10:	00000606 	br	fd2c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    fd14:	e0bfff17 	ldw	r2,-4(fp)
    fd18:	1090000c 	andi	r2,r2,16384
    fd1c:	10000226 	beq	r2,zero,fd28 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    fd20:	00bffd44 	movi	r2,-11
    fd24:	00000106 	br	fd2c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    fd28:	00bffec4 	movi	r2,-5
}
    fd2c:	e037883a 	mov	sp,fp
    fd30:	dfc00117 	ldw	ra,4(sp)
    fd34:	df000017 	ldw	fp,0(sp)
    fd38:	dec00204 	addi	sp,sp,8
    fd3c:	f800283a 	ret

0000fd40 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
    fd40:	defffa04 	addi	sp,sp,-24
    fd44:	dfc00515 	stw	ra,20(sp)
    fd48:	df000415 	stw	fp,16(sp)
    fd4c:	df000404 	addi	fp,sp,16
    fd50:	e13ffe15 	stw	r4,-8(fp)
    fd54:	2805883a 	mov	r2,r5
    fd58:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
    fd5c:	e0bffe17 	ldw	r2,-8(fp)
    fd60:	10800017 	ldw	r2,0(r2)
    fd64:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
    fd68:	008003f4 	movhi	r2,15
    fd6c:	10909004 	addi	r2,r2,16960
    fd70:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    fd74:	e0bffe17 	ldw	r2,-8(fp)
    fd78:	10800803 	ldbu	r2,32(r2)
    fd7c:	10803fcc 	andi	r2,r2,255
    fd80:	1080201c 	xori	r2,r2,128
    fd84:	10bfe004 	addi	r2,r2,-128
    fd88:	1000151e 	bne	r2,zero,fde0 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    fd8c:	00000906 	br	fdb4 <lcd_write_command+0x74>
    if (--i == 0)
    fd90:	e0bffc17 	ldw	r2,-16(fp)
    fd94:	10bfffc4 	addi	r2,r2,-1
    fd98:	e0bffc15 	stw	r2,-16(fp)
    fd9c:	e0bffc17 	ldw	r2,-16(fp)
    fda0:	1000041e 	bne	r2,zero,fdb4 <lcd_write_command+0x74>
    {
      sp->broken = 1;
    fda4:	e0bffe17 	ldw	r2,-8(fp)
    fda8:	00c00044 	movi	r3,1
    fdac:	10c00805 	stb	r3,32(r2)
      return;
    fdb0:	00000c06 	br	fde4 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    fdb4:	e0bffd17 	ldw	r2,-12(fp)
    fdb8:	10800104 	addi	r2,r2,4
    fdbc:	10800037 	ldwio	r2,0(r2)
    fdc0:	1080200c 	andi	r2,r2,128
    fdc4:	103ff21e 	bne	r2,zero,fd90 <__alt_data_end+0xf800fd90>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
    fdc8:	01001904 	movi	r4,100
    fdcc:	00118c00 	call	118c0 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
    fdd0:	e0bffd17 	ldw	r2,-12(fp)
    fdd4:	e0ffff03 	ldbu	r3,-4(fp)
    fdd8:	10c00035 	stwio	r3,0(r2)
    fddc:	00000106 	br	fde4 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
    fde0:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
    fde4:	e037883a 	mov	sp,fp
    fde8:	dfc00117 	ldw	ra,4(sp)
    fdec:	df000017 	ldw	fp,0(sp)
    fdf0:	dec00204 	addi	sp,sp,8
    fdf4:	f800283a 	ret

0000fdf8 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
    fdf8:	defffa04 	addi	sp,sp,-24
    fdfc:	dfc00515 	stw	ra,20(sp)
    fe00:	df000415 	stw	fp,16(sp)
    fe04:	df000404 	addi	fp,sp,16
    fe08:	e13ffe15 	stw	r4,-8(fp)
    fe0c:	2805883a 	mov	r2,r5
    fe10:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
    fe14:	e0bffe17 	ldw	r2,-8(fp)
    fe18:	10800017 	ldw	r2,0(r2)
    fe1c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
    fe20:	008003f4 	movhi	r2,15
    fe24:	10909004 	addi	r2,r2,16960
    fe28:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    fe2c:	e0bffe17 	ldw	r2,-8(fp)
    fe30:	10800803 	ldbu	r2,32(r2)
    fe34:	10803fcc 	andi	r2,r2,255
    fe38:	1080201c 	xori	r2,r2,128
    fe3c:	10bfe004 	addi	r2,r2,-128
    fe40:	10001d1e 	bne	r2,zero,feb8 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    fe44:	00000906 	br	fe6c <lcd_write_data+0x74>
    if (--i == 0)
    fe48:	e0bffc17 	ldw	r2,-16(fp)
    fe4c:	10bfffc4 	addi	r2,r2,-1
    fe50:	e0bffc15 	stw	r2,-16(fp)
    fe54:	e0bffc17 	ldw	r2,-16(fp)
    fe58:	1000041e 	bne	r2,zero,fe6c <lcd_write_data+0x74>
    {
      sp->broken = 1;
    fe5c:	e0bffe17 	ldw	r2,-8(fp)
    fe60:	00c00044 	movi	r3,1
    fe64:	10c00805 	stb	r3,32(r2)
      return;
    fe68:	00001406 	br	febc <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    fe6c:	e0bffd17 	ldw	r2,-12(fp)
    fe70:	10800104 	addi	r2,r2,4
    fe74:	10800037 	ldwio	r2,0(r2)
    fe78:	1080200c 	andi	r2,r2,128
    fe7c:	103ff21e 	bne	r2,zero,fe48 <__alt_data_end+0xf800fe48>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
    fe80:	01001904 	movi	r4,100
    fe84:	00118c00 	call	118c0 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
    fe88:	e0bffd17 	ldw	r2,-12(fp)
    fe8c:	10800204 	addi	r2,r2,8
    fe90:	1007883a 	mov	r3,r2
    fe94:	e0bfff03 	ldbu	r2,-4(fp)
    fe98:	18800035 	stwio	r2,0(r3)

  sp->address++;
    fe9c:	e0bffe17 	ldw	r2,-8(fp)
    fea0:	108008c3 	ldbu	r2,35(r2)
    fea4:	10800044 	addi	r2,r2,1
    fea8:	1007883a 	mov	r3,r2
    feac:	e0bffe17 	ldw	r2,-8(fp)
    feb0:	10c008c5 	stb	r3,35(r2)
    feb4:	00000106 	br	febc <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
    feb8:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
    febc:	e037883a 	mov	sp,fp
    fec0:	dfc00117 	ldw	ra,4(sp)
    fec4:	df000017 	ldw	fp,0(sp)
    fec8:	dec00204 	addi	sp,sp,8
    fecc:	f800283a 	ret

0000fed0 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
    fed0:	defffb04 	addi	sp,sp,-20
    fed4:	dfc00415 	stw	ra,16(sp)
    fed8:	df000315 	stw	fp,12(sp)
    fedc:	dc000215 	stw	r16,8(sp)
    fee0:	df000304 	addi	fp,sp,12
    fee4:	e13ffe15 	stw	r4,-8(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
    fee8:	01400044 	movi	r5,1
    feec:	e13ffe17 	ldw	r4,-8(fp)
    fef0:	000fd400 	call	fd40 <lcd_write_command>

  sp->x = 0;
    fef4:	e0bffe17 	ldw	r2,-8(fp)
    fef8:	10000845 	stb	zero,33(r2)
  sp->y = 0;
    fefc:	e0bffe17 	ldw	r2,-8(fp)
    ff00:	10000885 	stb	zero,34(r2)
  sp->address = 0;
    ff04:	e0bffe17 	ldw	r2,-8(fp)
    ff08:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    ff0c:	e03ffd15 	stw	zero,-12(fp)
    ff10:	00001f06 	br	ff90 <lcd_clear_screen+0xc0>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    ff14:	014018c4 	movi	r5,99
    ff18:	e13ffd17 	ldw	r4,-12(fp)
    ff1c:	00017b40 	call	17b4 <__mulsi3>
    ff20:	10801004 	addi	r2,r2,64
    ff24:	e0fffe17 	ldw	r3,-8(fp)
    ff28:	1885883a 	add	r2,r3,r2
    ff2c:	01801444 	movi	r6,81
    ff30:	01400804 	movi	r5,32
    ff34:	1009883a 	mov	r4,r2
    ff38:	00076940 	call	7694 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    ff3c:	014018c4 	movi	r5,99
    ff40:	e13ffd17 	ldw	r4,-12(fp)
    ff44:	00017b40 	call	17b4 <__mulsi3>
    ff48:	10800c04 	addi	r2,r2,48
    ff4c:	e0fffe17 	ldw	r3,-8(fp)
    ff50:	1885883a 	add	r2,r3,r2
    ff54:	01800404 	movi	r6,16
    ff58:	01400804 	movi	r5,32
    ff5c:	1009883a 	mov	r4,r2
    ff60:	00076940 	call	7694 <memset>
    sp->line[y].width = 0;
    ff64:	e43ffe17 	ldw	r16,-8(fp)
    ff68:	e0bffd17 	ldw	r2,-12(fp)
    ff6c:	014018c4 	movi	r5,99
    ff70:	1009883a 	mov	r4,r2
    ff74:	00017b40 	call	17b4 <__mulsi3>
    ff78:	8085883a 	add	r2,r16,r2
    ff7c:	10802444 	addi	r2,r2,145
    ff80:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    ff84:	e0bffd17 	ldw	r2,-12(fp)
    ff88:	10800044 	addi	r2,r2,1
    ff8c:	e0bffd15 	stw	r2,-12(fp)
    ff90:	e0bffd17 	ldw	r2,-12(fp)
    ff94:	10800090 	cmplti	r2,r2,2
    ff98:	103fde1e 	bne	r2,zero,ff14 <__alt_data_end+0xf800ff14>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
    ff9c:	0001883a 	nop
    ffa0:	e6ffff04 	addi	sp,fp,-4
    ffa4:	dfc00217 	ldw	ra,8(sp)
    ffa8:	df000117 	ldw	fp,4(sp)
    ffac:	dc000017 	ldw	r16,0(sp)
    ffb0:	dec00304 	addi	sp,sp,12
    ffb4:	f800283a 	ret

0000ffb8 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
    ffb8:	defff504 	addi	sp,sp,-44
    ffbc:	dfc00a15 	stw	ra,40(sp)
    ffc0:	df000915 	stw	fp,36(sp)
    ffc4:	dc400815 	stw	r17,32(sp)
    ffc8:	dc000715 	stw	r16,28(sp)
    ffcc:	df000904 	addi	fp,sp,36
    ffd0:	e13ffd15 	stw	r4,-12(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
    ffd4:	e0bffd17 	ldw	r2,-12(fp)
    ffd8:	10800943 	ldbu	r2,37(r2)
    ffdc:	10803fcc 	andi	r2,r2,255
    ffe0:	e0bffa15 	stw	r2,-24(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    ffe4:	e03ff715 	stw	zero,-36(fp)
    ffe8:	00007206 	br	101b4 <lcd_repaint_screen+0x1fc>
  {
    int width  = sp->line[y].width;
    ffec:	e43ffd17 	ldw	r16,-12(fp)
    fff0:	e0bff717 	ldw	r2,-36(fp)
    fff4:	014018c4 	movi	r5,99
    fff8:	1009883a 	mov	r4,r2
    fffc:	00017b40 	call	17b4 <__mulsi3>
   10000:	8085883a 	add	r2,r16,r2
   10004:	10802444 	addi	r2,r2,145
   10008:	10800003 	ldbu	r2,0(r2)
   1000c:	10803fcc 	andi	r2,r2,255
   10010:	1080201c 	xori	r2,r2,128
   10014:	10bfe004 	addi	r2,r2,-128
   10018:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
   1001c:	e43ffd17 	ldw	r16,-12(fp)
   10020:	e0bff717 	ldw	r2,-36(fp)
   10024:	014018c4 	movi	r5,99
   10028:	1009883a 	mov	r4,r2
   1002c:	00017b40 	call	17b4 <__mulsi3>
   10030:	8085883a 	add	r2,r16,r2
   10034:	10802484 	addi	r2,r2,146
   10038:	10800003 	ldbu	r2,0(r2)
   1003c:	10803fcc 	andi	r2,r2,255
   10040:	e17ffa17 	ldw	r5,-24(fp)
   10044:	1009883a 	mov	r4,r2
   10048:	00017b40 	call	17b4 <__mulsi3>
   1004c:	1005d23a 	srai	r2,r2,8
   10050:	e0bff915 	stw	r2,-28(fp)
    if (offset >= width)
   10054:	e0fff917 	ldw	r3,-28(fp)
   10058:	e0bffb17 	ldw	r2,-20(fp)
   1005c:	18800116 	blt	r3,r2,10064 <lcd_repaint_screen+0xac>
      offset = 0;
   10060:	e03ff915 	stw	zero,-28(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   10064:	e03ff815 	stw	zero,-32(fp)
   10068:	00004c06 	br	1019c <lcd_repaint_screen+0x1e4>
    {
      char c = sp->line[y].data[(x + offset) % width];
   1006c:	e0fff817 	ldw	r3,-32(fp)
   10070:	e0bff917 	ldw	r2,-28(fp)
   10074:	1885883a 	add	r2,r3,r2
   10078:	e17ffb17 	ldw	r5,-20(fp)
   1007c:	1009883a 	mov	r4,r2
   10080:	000bd840 	call	bd84 <__modsi3>
   10084:	1023883a 	mov	r17,r2
   10088:	e43ffd17 	ldw	r16,-12(fp)
   1008c:	e0bff717 	ldw	r2,-36(fp)
   10090:	014018c4 	movi	r5,99
   10094:	1009883a 	mov	r4,r2
   10098:	00017b40 	call	17b4 <__mulsi3>
   1009c:	8085883a 	add	r2,r16,r2
   100a0:	1445883a 	add	r2,r2,r17
   100a4:	10801004 	addi	r2,r2,64
   100a8:	10800003 	ldbu	r2,0(r2)
   100ac:	e0bffc05 	stb	r2,-16(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
   100b0:	e43ffd17 	ldw	r16,-12(fp)
   100b4:	e0bff717 	ldw	r2,-36(fp)
   100b8:	014018c4 	movi	r5,99
   100bc:	1009883a 	mov	r4,r2
   100c0:	00017b40 	call	17b4 <__mulsi3>
   100c4:	8087883a 	add	r3,r16,r2
   100c8:	e0bff817 	ldw	r2,-32(fp)
   100cc:	1885883a 	add	r2,r3,r2
   100d0:	10800c04 	addi	r2,r2,48
   100d4:	10800003 	ldbu	r2,0(r2)
   100d8:	10c03fcc 	andi	r3,r2,255
   100dc:	18c0201c 	xori	r3,r3,128
   100e0:	18ffe004 	addi	r3,r3,-128
   100e4:	e0bffc07 	ldb	r2,-16(fp)
   100e8:	18802926 	beq	r3,r2,10190 <lcd_repaint_screen+0x1d8>
      {
        unsigned char address = x + colstart[y];
   100ec:	e0fff717 	ldw	r3,-36(fp)
   100f0:	d0a00d04 	addi	r2,gp,-32716
   100f4:	1885883a 	add	r2,r3,r2
   100f8:	10800003 	ldbu	r2,0(r2)
   100fc:	1007883a 	mov	r3,r2
   10100:	e0bff817 	ldw	r2,-32(fp)
   10104:	1885883a 	add	r2,r3,r2
   10108:	e0bffc45 	stb	r2,-15(fp)

        if (address != sp->address)
   1010c:	e0fffc43 	ldbu	r3,-15(fp)
   10110:	e0bffd17 	ldw	r2,-12(fp)
   10114:	108008c3 	ldbu	r2,35(r2)
   10118:	10803fcc 	andi	r2,r2,255
   1011c:	1080201c 	xori	r2,r2,128
   10120:	10bfe004 	addi	r2,r2,-128
   10124:	18800a26 	beq	r3,r2,10150 <lcd_repaint_screen+0x198>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
   10128:	e0fffc43 	ldbu	r3,-15(fp)
   1012c:	00bfe004 	movi	r2,-128
   10130:	1884b03a 	or	r2,r3,r2
   10134:	10803fcc 	andi	r2,r2,255
   10138:	100b883a 	mov	r5,r2
   1013c:	e13ffd17 	ldw	r4,-12(fp)
   10140:	000fd400 	call	fd40 <lcd_write_command>
          sp->address = address;
   10144:	e0fffc43 	ldbu	r3,-15(fp)
   10148:	e0bffd17 	ldw	r2,-12(fp)
   1014c:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
   10150:	e0bffc03 	ldbu	r2,-16(fp)
   10154:	10803fcc 	andi	r2,r2,255
   10158:	100b883a 	mov	r5,r2
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	000fdf80 	call	fdf8 <lcd_write_data>
        sp->line[y].visible[x] = c;
   10164:	e43ffd17 	ldw	r16,-12(fp)
   10168:	e0bff717 	ldw	r2,-36(fp)
   1016c:	014018c4 	movi	r5,99
   10170:	1009883a 	mov	r4,r2
   10174:	00017b40 	call	17b4 <__mulsi3>
   10178:	8087883a 	add	r3,r16,r2
   1017c:	e0bff817 	ldw	r2,-32(fp)
   10180:	1885883a 	add	r2,r3,r2
   10184:	10800c04 	addi	r2,r2,48
   10188:	e0fffc03 	ldbu	r3,-16(fp)
   1018c:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
   10190:	e0bff817 	ldw	r2,-32(fp)
   10194:	10800044 	addi	r2,r2,1
   10198:	e0bff815 	stw	r2,-32(fp)
   1019c:	e0bff817 	ldw	r2,-32(fp)
   101a0:	10800410 	cmplti	r2,r2,16
   101a4:	103fb11e 	bne	r2,zero,1006c <__alt_data_end+0xf801006c>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   101a8:	e0bff717 	ldw	r2,-36(fp)
   101ac:	10800044 	addi	r2,r2,1
   101b0:	e0bff715 	stw	r2,-36(fp)
   101b4:	e0bff717 	ldw	r2,-36(fp)
   101b8:	10800090 	cmplti	r2,r2,2
   101bc:	103f8b1e 	bne	r2,zero,ffec <__alt_data_end+0xf800ffec>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
   101c0:	0001883a 	nop
   101c4:	e6fffe04 	addi	sp,fp,-8
   101c8:	dfc00317 	ldw	ra,12(sp)
   101cc:	df000217 	ldw	fp,8(sp)
   101d0:	dc400117 	ldw	r17,4(sp)
   101d4:	dc000017 	ldw	r16,0(sp)
   101d8:	dec00404 	addi	sp,sp,16
   101dc:	f800283a 	ret

000101e0 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
   101e0:	defffb04 	addi	sp,sp,-20
   101e4:	dfc00415 	stw	ra,16(sp)
   101e8:	df000315 	stw	fp,12(sp)
   101ec:	dc000215 	stw	r16,8(sp)
   101f0:	df000304 	addi	fp,sp,12
   101f4:	e13ffe15 	stw	r4,-8(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   101f8:	e03ffd15 	stw	zero,-12(fp)
   101fc:	00002206 	br	10288 <lcd_scroll_up+0xa8>
  {
    if (y < ALT_LCD_HEIGHT-1)
   10200:	e0bffd17 	ldw	r2,-12(fp)
   10204:	00801316 	blt	zero,r2,10254 <lcd_scroll_up+0x74>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
   10208:	014018c4 	movi	r5,99
   1020c:	e13ffd17 	ldw	r4,-12(fp)
   10210:	00017b40 	call	17b4 <__mulsi3>
   10214:	10801004 	addi	r2,r2,64
   10218:	e0fffe17 	ldw	r3,-8(fp)
   1021c:	18a1883a 	add	r16,r3,r2
   10220:	e0bffd17 	ldw	r2,-12(fp)
   10224:	10800044 	addi	r2,r2,1
   10228:	014018c4 	movi	r5,99
   1022c:	1009883a 	mov	r4,r2
   10230:	00017b40 	call	17b4 <__mulsi3>
   10234:	10801004 	addi	r2,r2,64
   10238:	e0fffe17 	ldw	r3,-8(fp)
   1023c:	1885883a 	add	r2,r3,r2
   10240:	01801404 	movi	r6,80
   10244:	100b883a 	mov	r5,r2
   10248:	8009883a 	mov	r4,r16
   1024c:	00073f00 	call	73f0 <memcpy>
   10250:	00000a06 	br	1027c <lcd_scroll_up+0x9c>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
   10254:	014018c4 	movi	r5,99
   10258:	e13ffd17 	ldw	r4,-12(fp)
   1025c:	00017b40 	call	17b4 <__mulsi3>
   10260:	10801004 	addi	r2,r2,64
   10264:	e0fffe17 	ldw	r3,-8(fp)
   10268:	1885883a 	add	r2,r3,r2
   1026c:	01801404 	movi	r6,80
   10270:	01400804 	movi	r5,32
   10274:	1009883a 	mov	r4,r2
   10278:	00076940 	call	7694 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   1027c:	e0bffd17 	ldw	r2,-12(fp)
   10280:	10800044 	addi	r2,r2,1
   10284:	e0bffd15 	stw	r2,-12(fp)
   10288:	e0bffd17 	ldw	r2,-12(fp)
   1028c:	10800090 	cmplti	r2,r2,2
   10290:	103fdb1e 	bne	r2,zero,10200 <__alt_data_end+0xf8010200>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
   10294:	e0bffe17 	ldw	r2,-8(fp)
   10298:	10800883 	ldbu	r2,34(r2)
   1029c:	10bfffc4 	addi	r2,r2,-1
   102a0:	1007883a 	mov	r3,r2
   102a4:	e0bffe17 	ldw	r2,-8(fp)
   102a8:	10c00885 	stb	r3,34(r2)
}
   102ac:	0001883a 	nop
   102b0:	e6ffff04 	addi	sp,fp,-4
   102b4:	dfc00217 	ldw	ra,8(sp)
   102b8:	df000117 	ldw	fp,4(sp)
   102bc:	dc000017 	ldw	r16,0(sp)
   102c0:	dec00304 	addi	sp,sp,12
   102c4:	f800283a 	ret

000102c8 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
   102c8:	defff904 	addi	sp,sp,-28
   102cc:	dfc00615 	stw	ra,24(sp)
   102d0:	df000515 	stw	fp,20(sp)
   102d4:	df000504 	addi	fp,sp,20
   102d8:	e13ffe15 	stw	r4,-8(fp)
   102dc:	2805883a 	mov	r2,r5
   102e0:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
   102e4:	e03ffb15 	stw	zero,-20(fp)
   102e8:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
   102ec:	e0bffe17 	ldw	r2,-8(fp)
   102f0:	10800a03 	ldbu	r2,40(r2)
   102f4:	10803fcc 	andi	r2,r2,255
   102f8:	1080201c 	xori	r2,r2,128
   102fc:	10bfe004 	addi	r2,r2,-128
   10300:	108016d8 	cmpnei	r2,r2,91
   10304:	1000451e 	bne	r2,zero,1041c <lcd_handle_escape+0x154>
  {
    char * ptr = sp->escape+1;
   10308:	e0bffe17 	ldw	r2,-8(fp)
   1030c:	10800a04 	addi	r2,r2,40
   10310:	10800044 	addi	r2,r2,1
   10314:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
   10318:	00000e06 	br	10354 <lcd_handle_escape+0x8c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
   1031c:	01400284 	movi	r5,10
   10320:	e13ffb17 	ldw	r4,-20(fp)
   10324:	00017b40 	call	17b4 <__mulsi3>
   10328:	1009883a 	mov	r4,r2
   1032c:	e0bffd17 	ldw	r2,-12(fp)
   10330:	10c00044 	addi	r3,r2,1
   10334:	e0fffd15 	stw	r3,-12(fp)
   10338:	10800003 	ldbu	r2,0(r2)
   1033c:	10803fcc 	andi	r2,r2,255
   10340:	1080201c 	xori	r2,r2,128
   10344:	10bfe004 	addi	r2,r2,-128
   10348:	10bff404 	addi	r2,r2,-48
   1034c:	2085883a 	add	r2,r4,r2
   10350:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
   10354:	d0e01117 	ldw	r3,-32700(gp)
   10358:	e0bffd17 	ldw	r2,-12(fp)
   1035c:	10800003 	ldbu	r2,0(r2)
   10360:	10803fcc 	andi	r2,r2,255
   10364:	1080201c 	xori	r2,r2,128
   10368:	10bfe004 	addi	r2,r2,-128
   1036c:	10800044 	addi	r2,r2,1
   10370:	1885883a 	add	r2,r3,r2
   10374:	10800003 	ldbu	r2,0(r2)
   10378:	10803fcc 	andi	r2,r2,255
   1037c:	1080010c 	andi	r2,r2,4
   10380:	103fe61e 	bne	r2,zero,1031c <__alt_data_end+0xf801031c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
   10384:	e0bffd17 	ldw	r2,-12(fp)
   10388:	10800003 	ldbu	r2,0(r2)
   1038c:	10803fcc 	andi	r2,r2,255
   10390:	1080201c 	xori	r2,r2,128
   10394:	10bfe004 	addi	r2,r2,-128
   10398:	10800ed8 	cmpnei	r2,r2,59
   1039c:	1000211e 	bne	r2,zero,10424 <lcd_handle_escape+0x15c>
    {
      ptr++;
   103a0:	e0bffd17 	ldw	r2,-12(fp)
   103a4:	10800044 	addi	r2,r2,1
   103a8:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
   103ac:	00000e06 	br	103e8 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
   103b0:	01400284 	movi	r5,10
   103b4:	e13ffc17 	ldw	r4,-16(fp)
   103b8:	00017b40 	call	17b4 <__mulsi3>
   103bc:	1009883a 	mov	r4,r2
   103c0:	e0bffd17 	ldw	r2,-12(fp)
   103c4:	10c00044 	addi	r3,r2,1
   103c8:	e0fffd15 	stw	r3,-12(fp)
   103cc:	10800003 	ldbu	r2,0(r2)
   103d0:	10803fcc 	andi	r2,r2,255
   103d4:	1080201c 	xori	r2,r2,128
   103d8:	10bfe004 	addi	r2,r2,-128
   103dc:	10bff404 	addi	r2,r2,-48
   103e0:	2085883a 	add	r2,r4,r2
   103e4:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
   103e8:	d0e01117 	ldw	r3,-32700(gp)
   103ec:	e0bffd17 	ldw	r2,-12(fp)
   103f0:	10800003 	ldbu	r2,0(r2)
   103f4:	10803fcc 	andi	r2,r2,255
   103f8:	1080201c 	xori	r2,r2,128
   103fc:	10bfe004 	addi	r2,r2,-128
   10400:	10800044 	addi	r2,r2,1
   10404:	1885883a 	add	r2,r3,r2
   10408:	10800003 	ldbu	r2,0(r2)
   1040c:	10803fcc 	andi	r2,r2,255
   10410:	1080010c 	andi	r2,r2,4
   10414:	103fe61e 	bne	r2,zero,103b0 <__alt_data_end+0xf80103b0>
   10418:	00000206 	br	10424 <lcd_handle_escape+0x15c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
   1041c:	00bfffc4 	movi	r2,-1
   10420:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
   10424:	e0bfff07 	ldb	r2,-4(fp)
   10428:	10c012a0 	cmpeqi	r3,r2,74
   1042c:	1800291e 	bne	r3,zero,104d4 <lcd_handle_escape+0x20c>
   10430:	10c012c8 	cmpgei	r3,r2,75
   10434:	1800031e 	bne	r3,zero,10444 <lcd_handle_escape+0x17c>
   10438:	10801220 	cmpeqi	r2,r2,72
   1043c:	1000061e 	bne	r2,zero,10458 <lcd_handle_escape+0x190>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   10440:	00004c06 	br	10574 <lcd_handle_escape+0x2ac>
    }
  }
  else
    parm1 = -1;

  switch (c)
   10444:	10c012e0 	cmpeqi	r3,r2,75
   10448:	1800281e 	bne	r3,zero,104ec <lcd_handle_escape+0x224>
   1044c:	108019a0 	cmpeqi	r2,r2,102
   10450:	1000011e 	bne	r2,zero,10458 <lcd_handle_escape+0x190>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
   10454:	00004706 	br	10574 <lcd_handle_escape+0x2ac>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
   10458:	e0bffc17 	ldw	r2,-16(fp)
   1045c:	0080050e 	bge	zero,r2,10474 <lcd_handle_escape+0x1ac>
      sp->x = parm2 - 1;
   10460:	e0bffc17 	ldw	r2,-16(fp)
   10464:	10bfffc4 	addi	r2,r2,-1
   10468:	1007883a 	mov	r3,r2
   1046c:	e0bffe17 	ldw	r2,-8(fp)
   10470:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
   10474:	e0bffb17 	ldw	r2,-20(fp)
   10478:	0080390e 	bge	zero,r2,10560 <lcd_handle_escape+0x298>
    {
      sp->y = parm1 - 1;
   1047c:	e0bffb17 	ldw	r2,-20(fp)
   10480:	10bfffc4 	addi	r2,r2,-1
   10484:	1007883a 	mov	r3,r2
   10488:	e0bffe17 	ldw	r2,-8(fp)
   1048c:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
   10490:	e0bffe17 	ldw	r2,-8(fp)
   10494:	10800883 	ldbu	r2,34(r2)
   10498:	10803fcc 	andi	r2,r2,255
   1049c:	10800170 	cmpltui	r2,r2,5
   104a0:	1000061e 	bne	r2,zero,104bc <lcd_handle_escape+0x1f4>
        sp->y = ALT_LCD_HEIGHT * 2;
   104a4:	e0bffe17 	ldw	r2,-8(fp)
   104a8:	00c00104 	movi	r3,4
   104ac:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
   104b0:	00000206 	br	104bc <lcd_handle_escape+0x1f4>
        lcd_scroll_up(sp);
   104b4:	e13ffe17 	ldw	r4,-8(fp)
   104b8:	00101e00 	call	101e0 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
   104bc:	e0bffe17 	ldw	r2,-8(fp)
   104c0:	10800883 	ldbu	r2,34(r2)
   104c4:	10803fcc 	andi	r2,r2,255
   104c8:	108000e8 	cmpgeui	r2,r2,3
   104cc:	103ff91e 	bne	r2,zero,104b4 <__alt_data_end+0xf80104b4>
        lcd_scroll_up(sp);
    }
    break;
   104d0:	00002306 	br	10560 <lcd_handle_escape+0x298>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
   104d4:	e0bffb17 	ldw	r2,-20(fp)
   104d8:	10800098 	cmpnei	r2,r2,2
   104dc:	1000221e 	bne	r2,zero,10568 <lcd_handle_escape+0x2a0>
      lcd_clear_screen(sp);
   104e0:	e13ffe17 	ldw	r4,-8(fp)
   104e4:	000fed00 	call	fed0 <lcd_clear_screen>
    break;
   104e8:	00001f06 	br	10568 <lcd_handle_escape+0x2a0>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
   104ec:	e0bffb17 	ldw	r2,-20(fp)
   104f0:	00801f16 	blt	zero,r2,10570 <lcd_handle_escape+0x2a8>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   104f4:	e0bffe17 	ldw	r2,-8(fp)
   104f8:	10800843 	ldbu	r2,33(r2)
   104fc:	10803fcc 	andi	r2,r2,255
   10500:	10801428 	cmpgeui	r2,r2,80
   10504:	10001a1e 	bne	r2,zero,10570 <lcd_handle_escape+0x2a8>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
   10508:	e0bffe17 	ldw	r2,-8(fp)
   1050c:	10800883 	ldbu	r2,34(r2)
   10510:	10803fcc 	andi	r2,r2,255
   10514:	014018c4 	movi	r5,99
   10518:	1009883a 	mov	r4,r2
   1051c:	00017b40 	call	17b4 <__mulsi3>
   10520:	10801004 	addi	r2,r2,64
   10524:	e0fffe17 	ldw	r3,-8(fp)
   10528:	1887883a 	add	r3,r3,r2
   1052c:	e0bffe17 	ldw	r2,-8(fp)
   10530:	10800843 	ldbu	r2,33(r2)
   10534:	10803fcc 	andi	r2,r2,255
   10538:	1889883a 	add	r4,r3,r2
   1053c:	e0bffe17 	ldw	r2,-8(fp)
   10540:	10800843 	ldbu	r2,33(r2)
   10544:	10803fcc 	andi	r2,r2,255
   10548:	00c01404 	movi	r3,80
   1054c:	1885c83a 	sub	r2,r3,r2
   10550:	100d883a 	mov	r6,r2
   10554:	01400804 	movi	r5,32
   10558:	00076940 	call	7694 <memset>
    }
    break;
   1055c:	00000406 	br	10570 <lcd_handle_escape+0x2a8>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
   10560:	0001883a 	nop
   10564:	00000306 	br	10574 <lcd_handle_escape+0x2ac>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
   10568:	0001883a 	nop
   1056c:	00000106 	br	10574 <lcd_handle_escape+0x2ac>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
   10570:	0001883a 	nop
  }
}
   10574:	0001883a 	nop
   10578:	e037883a 	mov	sp,fp
   1057c:	dfc00117 	ldw	ra,4(sp)
   10580:	df000017 	ldw	fp,0(sp)
   10584:	dec00204 	addi	sp,sp,8
   10588:	f800283a 	ret

0001058c <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
   1058c:	defff104 	addi	sp,sp,-60
   10590:	dfc00e15 	stw	ra,56(sp)
   10594:	df000d15 	stw	fp,52(sp)
   10598:	dc400c15 	stw	r17,48(sp)
   1059c:	dc000b15 	stw	r16,44(sp)
   105a0:	df000d04 	addi	fp,sp,52
   105a4:	e13ffa15 	stw	r4,-24(fp)
   105a8:	e17ffb15 	stw	r5,-20(fp)
   105ac:	e1bffc15 	stw	r6,-16(fp)
   105b0:	e1fffd15 	stw	r7,-12(fp)
  const char* end = ptr + len;
   105b4:	e0bffc17 	ldw	r2,-16(fp)
   105b8:	e0fffb17 	ldw	r3,-20(fp)
   105bc:	1885883a 	add	r2,r3,r2
   105c0:	e0bff615 	stw	r2,-40(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
   105c4:	e0bffa17 	ldw	r2,-24(fp)
   105c8:	00c00044 	movi	r3,1
   105cc:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
   105d0:	00009b06 	br	10840 <altera_avalon_lcd_16207_write+0x2b4>
  {
    char c = *ptr;
   105d4:	e0bffb17 	ldw	r2,-20(fp)
   105d8:	10800003 	ldbu	r2,0(r2)
   105dc:	e0bff705 	stb	r2,-36(fp)

    if (sp->esccount >= 0)
   105e0:	e0bffa17 	ldw	r2,-24(fp)
   105e4:	10800903 	ldbu	r2,36(r2)
   105e8:	10803fcc 	andi	r2,r2,255
   105ec:	1080201c 	xori	r2,r2,128
   105f0:	10bfe004 	addi	r2,r2,-128
   105f4:	10003716 	blt	r2,zero,106d4 <altera_avalon_lcd_16207_write+0x148>
    {
      unsigned int esccount = sp->esccount;
   105f8:	e0bffa17 	ldw	r2,-24(fp)
   105fc:	10800903 	ldbu	r2,36(r2)
   10600:	10803fcc 	andi	r2,r2,255
   10604:	1080201c 	xori	r2,r2,128
   10608:	10bfe004 	addi	r2,r2,-128
   1060c:	e0bff815 	stw	r2,-32(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   10610:	e0bff817 	ldw	r2,-32(fp)
   10614:	1000031e 	bne	r2,zero,10624 <altera_avalon_lcd_16207_write+0x98>
   10618:	e0bff707 	ldb	r2,-36(fp)
   1061c:	108016d8 	cmpnei	r2,r2,91
   10620:	10000d1e 	bne	r2,zero,10658 <altera_avalon_lcd_16207_write+0xcc>
   10624:	e0bff817 	ldw	r2,-32(fp)
   10628:	10001826 	beq	r2,zero,1068c <altera_avalon_lcd_16207_write+0x100>
          (esccount > 0 && !isdigit(c) && c != ';'))
   1062c:	d0e01117 	ldw	r3,-32700(gp)
   10630:	e0bff707 	ldb	r2,-36(fp)
   10634:	10800044 	addi	r2,r2,1
   10638:	1885883a 	add	r2,r3,r2
   1063c:	10800003 	ldbu	r2,0(r2)
   10640:	10803fcc 	andi	r2,r2,255
   10644:	1080010c 	andi	r2,r2,4
   10648:	1000101e 	bne	r2,zero,1068c <altera_avalon_lcd_16207_write+0x100>
   1064c:	e0bff707 	ldb	r2,-36(fp)
   10650:	10800ee0 	cmpeqi	r2,r2,59
   10654:	10000d1e 	bne	r2,zero,1068c <altera_avalon_lcd_16207_write+0x100>
      {
        sp->escape[esccount] = 0;
   10658:	e0fffa17 	ldw	r3,-24(fp)
   1065c:	e0bff817 	ldw	r2,-32(fp)
   10660:	1885883a 	add	r2,r3,r2
   10664:	10800a04 	addi	r2,r2,40
   10668:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
   1066c:	e0bff707 	ldb	r2,-36(fp)
   10670:	100b883a 	mov	r5,r2
   10674:	e13ffa17 	ldw	r4,-24(fp)
   10678:	00102c80 	call	102c8 <lcd_handle_escape>

        sp->esccount = -1;
   1067c:	e0bffa17 	ldw	r2,-24(fp)
   10680:	00ffffc4 	movi	r3,-1
   10684:	10c00905 	stb	r3,36(r2)
   10688:	00006a06 	br	10834 <altera_avalon_lcd_16207_write+0x2a8>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
   1068c:	e0bffa17 	ldw	r2,-24(fp)
   10690:	10800903 	ldbu	r2,36(r2)
   10694:	10803fcc 	andi	r2,r2,255
   10698:	108001e8 	cmpgeui	r2,r2,7
   1069c:	1000651e 	bne	r2,zero,10834 <altera_avalon_lcd_16207_write+0x2a8>
      {
        sp->escape[esccount] = c;
   106a0:	e0fffa17 	ldw	r3,-24(fp)
   106a4:	e0bff817 	ldw	r2,-32(fp)
   106a8:	1885883a 	add	r2,r3,r2
   106ac:	10800a04 	addi	r2,r2,40
   106b0:	e0fff703 	ldbu	r3,-36(fp)
   106b4:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
   106b8:	e0bffa17 	ldw	r2,-24(fp)
   106bc:	10800903 	ldbu	r2,36(r2)
   106c0:	10800044 	addi	r2,r2,1
   106c4:	1007883a 	mov	r3,r2
   106c8:	e0bffa17 	ldw	r2,-24(fp)
   106cc:	10c00905 	stb	r3,36(r2)
   106d0:	00005806 	br	10834 <altera_avalon_lcd_16207_write+0x2a8>
      }
    }
    else if (c == 27) /* ESC */
   106d4:	e0bff707 	ldb	r2,-36(fp)
   106d8:	108006d8 	cmpnei	r2,r2,27
   106dc:	1000031e 	bne	r2,zero,106ec <altera_avalon_lcd_16207_write+0x160>
    {
      sp->esccount = 0;
   106e0:	e0bffa17 	ldw	r2,-24(fp)
   106e4:	10000905 	stb	zero,36(r2)
   106e8:	00005206 	br	10834 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\r')
   106ec:	e0bff707 	ldb	r2,-36(fp)
   106f0:	10800358 	cmpnei	r2,r2,13
   106f4:	1000031e 	bne	r2,zero,10704 <altera_avalon_lcd_16207_write+0x178>
    {
      sp->x = 0;
   106f8:	e0bffa17 	ldw	r2,-24(fp)
   106fc:	10000845 	stb	zero,33(r2)
   10700:	00004c06 	br	10834 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\n')
   10704:	e0bff707 	ldb	r2,-36(fp)
   10708:	10800298 	cmpnei	r2,r2,10
   1070c:	1000101e 	bne	r2,zero,10750 <altera_avalon_lcd_16207_write+0x1c4>
    {
      sp->x = 0;
   10710:	e0bffa17 	ldw	r2,-24(fp)
   10714:	10000845 	stb	zero,33(r2)
      sp->y++;
   10718:	e0bffa17 	ldw	r2,-24(fp)
   1071c:	10800883 	ldbu	r2,34(r2)
   10720:	10800044 	addi	r2,r2,1
   10724:	1007883a 	mov	r3,r2
   10728:	e0bffa17 	ldw	r2,-24(fp)
   1072c:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
   10730:	e0bffa17 	ldw	r2,-24(fp)
   10734:	10800883 	ldbu	r2,34(r2)
   10738:	10803fcc 	andi	r2,r2,255
   1073c:	108000f0 	cmpltui	r2,r2,3
   10740:	10003c1e 	bne	r2,zero,10834 <altera_avalon_lcd_16207_write+0x2a8>
        lcd_scroll_up(sp);
   10744:	e13ffa17 	ldw	r4,-24(fp)
   10748:	00101e00 	call	101e0 <lcd_scroll_up>
   1074c:	00003906 	br	10834 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (c == '\b')
   10750:	e0bff707 	ldb	r2,-36(fp)
   10754:	10800218 	cmpnei	r2,r2,8
   10758:	10000b1e 	bne	r2,zero,10788 <altera_avalon_lcd_16207_write+0x1fc>
    {
      if (sp->x > 0)
   1075c:	e0bffa17 	ldw	r2,-24(fp)
   10760:	10800843 	ldbu	r2,33(r2)
   10764:	10803fcc 	andi	r2,r2,255
   10768:	10003226 	beq	r2,zero,10834 <altera_avalon_lcd_16207_write+0x2a8>
        sp->x--;
   1076c:	e0bffa17 	ldw	r2,-24(fp)
   10770:	10800843 	ldbu	r2,33(r2)
   10774:	10bfffc4 	addi	r2,r2,-1
   10778:	1007883a 	mov	r3,r2
   1077c:	e0bffa17 	ldw	r2,-24(fp)
   10780:	10c00845 	stb	r3,33(r2)
   10784:	00002b06 	br	10834 <altera_avalon_lcd_16207_write+0x2a8>
    }
    else if (isprint(c))
   10788:	d0e01117 	ldw	r3,-32700(gp)
   1078c:	e0bff707 	ldb	r2,-36(fp)
   10790:	10800044 	addi	r2,r2,1
   10794:	1885883a 	add	r2,r3,r2
   10798:	10800003 	ldbu	r2,0(r2)
   1079c:	10803fcc 	andi	r2,r2,255
   107a0:	1080201c 	xori	r2,r2,128
   107a4:	10bfe004 	addi	r2,r2,-128
   107a8:	108025cc 	andi	r2,r2,151
   107ac:	10002126 	beq	r2,zero,10834 <altera_avalon_lcd_16207_write+0x2a8>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
   107b0:	e0bffa17 	ldw	r2,-24(fp)
   107b4:	10800883 	ldbu	r2,34(r2)
   107b8:	10803fcc 	andi	r2,r2,255
   107bc:	108000b0 	cmpltui	r2,r2,2
   107c0:	1000021e 	bne	r2,zero,107cc <altera_avalon_lcd_16207_write+0x240>
        lcd_scroll_up(sp);
   107c4:	e13ffa17 	ldw	r4,-24(fp)
   107c8:	00101e00 	call	101e0 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   107cc:	e0bffa17 	ldw	r2,-24(fp)
   107d0:	10800843 	ldbu	r2,33(r2)
   107d4:	10803fcc 	andi	r2,r2,255
   107d8:	10801428 	cmpgeui	r2,r2,80
   107dc:	10000f1e 	bne	r2,zero,1081c <altera_avalon_lcd_16207_write+0x290>
        sp->line[sp->y].data[sp->x] = c;
   107e0:	e0bffa17 	ldw	r2,-24(fp)
   107e4:	10800883 	ldbu	r2,34(r2)
   107e8:	10c03fcc 	andi	r3,r2,255
   107ec:	e0bffa17 	ldw	r2,-24(fp)
   107f0:	10800843 	ldbu	r2,33(r2)
   107f4:	14003fcc 	andi	r16,r2,255
   107f8:	e47ffa17 	ldw	r17,-24(fp)
   107fc:	014018c4 	movi	r5,99
   10800:	1809883a 	mov	r4,r3
   10804:	00017b40 	call	17b4 <__mulsi3>
   10808:	8885883a 	add	r2,r17,r2
   1080c:	1405883a 	add	r2,r2,r16
   10810:	10801004 	addi	r2,r2,64
   10814:	e0fff703 	ldbu	r3,-36(fp)
   10818:	10c00005 	stb	r3,0(r2)

      sp->x++;
   1081c:	e0bffa17 	ldw	r2,-24(fp)
   10820:	10800843 	ldbu	r2,33(r2)
   10824:	10800044 	addi	r2,r2,1
   10828:	1007883a 	mov	r3,r2
   1082c:	e0bffa17 	ldw	r2,-24(fp)
   10830:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
   10834:	e0bffb17 	ldw	r2,-20(fp)
   10838:	10800044 	addi	r2,r2,1
   1083c:	e0bffb15 	stw	r2,-20(fp)
   10840:	e0fffb17 	ldw	r3,-20(fp)
   10844:	e0bff617 	ldw	r2,-40(fp)
   10848:	18bf6236 	bltu	r3,r2,105d4 <__alt_data_end+0xf80105d4>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
   1084c:	00800404 	movi	r2,16
   10850:	e0bff415 	stw	r2,-48(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   10854:	e03ff315 	stw	zero,-52(fp)
   10858:	00003d06 	br	10950 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   1085c:	00801404 	movi	r2,80
   10860:	e0bff515 	stw	r2,-44(fp)
   10864:	00001306 	br	108b4 <altera_avalon_lcd_16207_write+0x328>
      if (sp->line[y].data[width-1] != ' ')
   10868:	e0bff517 	ldw	r2,-44(fp)
   1086c:	143fffc4 	addi	r16,r2,-1
   10870:	e47ffa17 	ldw	r17,-24(fp)
   10874:	e0bff317 	ldw	r2,-52(fp)
   10878:	014018c4 	movi	r5,99
   1087c:	1009883a 	mov	r4,r2
   10880:	00017b40 	call	17b4 <__mulsi3>
   10884:	8885883a 	add	r2,r17,r2
   10888:	1405883a 	add	r2,r2,r16
   1088c:	10801004 	addi	r2,r2,64
   10890:	10800003 	ldbu	r2,0(r2)
   10894:	10803fcc 	andi	r2,r2,255
   10898:	1080201c 	xori	r2,r2,128
   1089c:	10bfe004 	addi	r2,r2,-128
   108a0:	10800820 	cmpeqi	r2,r2,32
   108a4:	10000626 	beq	r2,zero,108c0 <altera_avalon_lcd_16207_write+0x334>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   108a8:	e0bff517 	ldw	r2,-44(fp)
   108ac:	10bfffc4 	addi	r2,r2,-1
   108b0:	e0bff515 	stw	r2,-44(fp)
   108b4:	e0bff517 	ldw	r2,-44(fp)
   108b8:	00bfeb16 	blt	zero,r2,10868 <__alt_data_end+0xf8010868>
   108bc:	00000106 	br	108c4 <altera_avalon_lcd_16207_write+0x338>
      if (sp->line[y].data[width-1] != ' ')
        break;
   108c0:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
   108c4:	e0bff517 	ldw	r2,-44(fp)
   108c8:	10800448 	cmpgei	r2,r2,17
   108cc:	1000031e 	bne	r2,zero,108dc <altera_avalon_lcd_16207_write+0x350>
      width = ALT_LCD_WIDTH;
   108d0:	00800404 	movi	r2,16
   108d4:	e0bff515 	stw	r2,-44(fp)
   108d8:	00000306 	br	108e8 <altera_avalon_lcd_16207_write+0x35c>
    else
      width++;
   108dc:	e0bff517 	ldw	r2,-44(fp)
   108e0:	10800044 	addi	r2,r2,1
   108e4:	e0bff515 	stw	r2,-44(fp)

    sp->line[y].width = width;
   108e8:	e0bff517 	ldw	r2,-44(fp)
   108ec:	1023883a 	mov	r17,r2
   108f0:	e43ffa17 	ldw	r16,-24(fp)
   108f4:	e0bff317 	ldw	r2,-52(fp)
   108f8:	014018c4 	movi	r5,99
   108fc:	1009883a 	mov	r4,r2
   10900:	00017b40 	call	17b4 <__mulsi3>
   10904:	8085883a 	add	r2,r16,r2
   10908:	10802444 	addi	r2,r2,145
   1090c:	14400005 	stb	r17,0(r2)
    if (widthmax < width)
   10910:	e0fff417 	ldw	r3,-48(fp)
   10914:	e0bff517 	ldw	r2,-44(fp)
   10918:	1880020e 	bge	r3,r2,10924 <altera_avalon_lcd_16207_write+0x398>
      widthmax = width;
   1091c:	e0bff517 	ldw	r2,-44(fp)
   10920:	e0bff415 	stw	r2,-48(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
   10924:	e43ffa17 	ldw	r16,-24(fp)
   10928:	e0bff317 	ldw	r2,-52(fp)
   1092c:	014018c4 	movi	r5,99
   10930:	1009883a 	mov	r4,r2
   10934:	00017b40 	call	17b4 <__mulsi3>
   10938:	8085883a 	add	r2,r16,r2
   1093c:	10802484 	addi	r2,r2,146
   10940:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   10944:	e0bff317 	ldw	r2,-52(fp)
   10948:	10800044 	addi	r2,r2,1
   1094c:	e0bff315 	stw	r2,-52(fp)
   10950:	e0bff317 	ldw	r2,-52(fp)
   10954:	10800090 	cmplti	r2,r2,2
   10958:	103fc01e 	bne	r2,zero,1085c <__alt_data_end+0xf801085c>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
   1095c:	e0bff417 	ldw	r2,-48(fp)
   10960:	10800448 	cmpgei	r2,r2,17
   10964:	1000031e 	bne	r2,zero,10974 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
   10968:	e0bffa17 	ldw	r2,-24(fp)
   1096c:	10000985 	stb	zero,38(r2)
   10970:	00003406 	br	10a44 <altera_avalon_lcd_16207_write+0x4b8>
  else
  {
    widthmax *= 2;
   10974:	e0bff417 	ldw	r2,-48(fp)
   10978:	1085883a 	add	r2,r2,r2
   1097c:	e0bff415 	stw	r2,-48(fp)
    sp->scrollmax = widthmax;
   10980:	e0bff417 	ldw	r2,-48(fp)
   10984:	1007883a 	mov	r3,r2
   10988:	e0bffa17 	ldw	r2,-24(fp)
   1098c:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   10990:	e03ff315 	stw	zero,-52(fp)
   10994:	00002806 	br	10a38 <altera_avalon_lcd_16207_write+0x4ac>
      if (sp->line[y].width > ALT_LCD_WIDTH)
   10998:	e43ffa17 	ldw	r16,-24(fp)
   1099c:	e0bff317 	ldw	r2,-52(fp)
   109a0:	014018c4 	movi	r5,99
   109a4:	1009883a 	mov	r4,r2
   109a8:	00017b40 	call	17b4 <__mulsi3>
   109ac:	8085883a 	add	r2,r16,r2
   109b0:	10802444 	addi	r2,r2,145
   109b4:	10800003 	ldbu	r2,0(r2)
   109b8:	10803fcc 	andi	r2,r2,255
   109bc:	1080201c 	xori	r2,r2,128
   109c0:	10bfe004 	addi	r2,r2,-128
   109c4:	10800450 	cmplti	r2,r2,17
   109c8:	1000181e 	bne	r2,zero,10a2c <altera_avalon_lcd_16207_write+0x4a0>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
   109cc:	e43ffa17 	ldw	r16,-24(fp)
   109d0:	e0bff317 	ldw	r2,-52(fp)
   109d4:	014018c4 	movi	r5,99
   109d8:	1009883a 	mov	r4,r2
   109dc:	00017b40 	call	17b4 <__mulsi3>
   109e0:	8085883a 	add	r2,r16,r2
   109e4:	10802444 	addi	r2,r2,145
   109e8:	10800003 	ldbu	r2,0(r2)
   109ec:	10803fcc 	andi	r2,r2,255
   109f0:	1080201c 	xori	r2,r2,128
   109f4:	10bfe004 	addi	r2,r2,-128
   109f8:	1004923a 	slli	r2,r2,8
   109fc:	e17ff417 	ldw	r5,-48(fp)
   10a00:	1009883a 	mov	r4,r2
   10a04:	000bd000 	call	bd00 <__divsi3>
   10a08:	1023883a 	mov	r17,r2
   10a0c:	e43ffa17 	ldw	r16,-24(fp)
   10a10:	e0bff317 	ldw	r2,-52(fp)
   10a14:	014018c4 	movi	r5,99
   10a18:	1009883a 	mov	r4,r2
   10a1c:	00017b40 	call	17b4 <__mulsi3>
   10a20:	8085883a 	add	r2,r16,r2
   10a24:	10802484 	addi	r2,r2,146
   10a28:	14400005 	stb	r17,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   10a2c:	e0bff317 	ldw	r2,-52(fp)
   10a30:	10800044 	addi	r2,r2,1
   10a34:	e0bff315 	stw	r2,-52(fp)
   10a38:	e0bff317 	ldw	r2,-52(fp)
   10a3c:	10800090 	cmplti	r2,r2,2
   10a40:	103fd51e 	bne	r2,zero,10998 <__alt_data_end+0xf8010998>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
   10a44:	e0bffa17 	ldw	r2,-24(fp)
   10a48:	10800943 	ldbu	r2,37(r2)
   10a4c:	10803fcc 	andi	r2,r2,255
   10a50:	e0bff915 	stw	r2,-28(fp)

    lcd_repaint_screen(sp);
   10a54:	e13ffa17 	ldw	r4,-24(fp)
   10a58:	000ffb80 	call	ffb8 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
   10a5c:	e0bffa17 	ldw	r2,-24(fp)
   10a60:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
   10a64:	e0bffa17 	ldw	r2,-24(fp)
   10a68:	10800943 	ldbu	r2,37(r2)
   10a6c:	10c03fcc 	andi	r3,r2,255
   10a70:	e0bff917 	ldw	r2,-28(fp)
   10a74:	18800426 	beq	r3,r2,10a88 <altera_avalon_lcd_16207_write+0x4fc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
   10a78:	e0bffa17 	ldw	r2,-24(fp)
   10a7c:	00c00044 	movi	r3,1
   10a80:	10c009c5 	stb	r3,39(r2)
  }
   10a84:	003fef06 	br	10a44 <__alt_data_end+0xf8010a44>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
   10a88:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
   10a8c:	e0bffc17 	ldw	r2,-16(fp)
}
   10a90:	e6fffe04 	addi	sp,fp,-8
   10a94:	dfc00317 	ldw	ra,12(sp)
   10a98:	df000217 	ldw	fp,8(sp)
   10a9c:	dc400117 	ldw	r17,4(sp)
   10aa0:	dc000017 	ldw	r16,0(sp)
   10aa4:	dec00404 	addi	sp,sp,16
   10aa8:	f800283a 	ret

00010aac <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
   10aac:	defffc04 	addi	sp,sp,-16
   10ab0:	dfc00315 	stw	ra,12(sp)
   10ab4:	df000215 	stw	fp,8(sp)
   10ab8:	df000204 	addi	fp,sp,8
   10abc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
   10ac0:	e0bfff17 	ldw	r2,-4(fp)
   10ac4:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
   10ac8:	e0bffe17 	ldw	r2,-8(fp)
   10acc:	10800943 	ldbu	r2,37(r2)
   10ad0:	10803fcc 	andi	r2,r2,255
   10ad4:	10c00044 	addi	r3,r2,1
   10ad8:	e0bffe17 	ldw	r2,-8(fp)
   10adc:	10800983 	ldbu	r2,38(r2)
   10ae0:	10803fcc 	andi	r2,r2,255
   10ae4:	18800316 	blt	r3,r2,10af4 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
   10ae8:	e0bffe17 	ldw	r2,-8(fp)
   10aec:	10000945 	stb	zero,37(r2)
   10af0:	00000606 	br	10b0c <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
   10af4:	e0bffe17 	ldw	r2,-8(fp)
   10af8:	10800943 	ldbu	r2,37(r2)
   10afc:	10800044 	addi	r2,r2,1
   10b00:	1007883a 	mov	r3,r2
   10b04:	e0bffe17 	ldw	r2,-8(fp)
   10b08:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
   10b0c:	e0bffe17 	ldw	r2,-8(fp)
   10b10:	10800983 	ldbu	r2,38(r2)
   10b14:	10803fcc 	andi	r2,r2,255
   10b18:	10000826 	beq	r2,zero,10b3c <alt_lcd_16207_timeout+0x90>
   10b1c:	e0bffe17 	ldw	r2,-8(fp)
   10b20:	108009c3 	ldbu	r2,39(r2)
   10b24:	10803fcc 	andi	r2,r2,255
   10b28:	1080201c 	xori	r2,r2,128
   10b2c:	10bfe004 	addi	r2,r2,-128
   10b30:	1000021e 	bne	r2,zero,10b3c <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
   10b34:	e13ffe17 	ldw	r4,-8(fp)
   10b38:	000ffb80 	call	ffb8 <lcd_repaint_screen>

  return sp->period;
   10b3c:	e0bffe17 	ldw	r2,-8(fp)
   10b40:	10800717 	ldw	r2,28(r2)
}
   10b44:	e037883a 	mov	sp,fp
   10b48:	dfc00117 	ldw	ra,4(sp)
   10b4c:	df000017 	ldw	fp,0(sp)
   10b50:	dec00204 	addi	sp,sp,8
   10b54:	f800283a 	ret

00010b58 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
   10b58:	defffc04 	addi	sp,sp,-16
   10b5c:	dfc00315 	stw	ra,12(sp)
   10b60:	df000215 	stw	fp,8(sp)
   10b64:	df000204 	addi	fp,sp,8
   10b68:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
   10b6c:	e0bfff17 	ldw	r2,-4(fp)
   10b70:	10800017 	ldw	r2,0(r2)
   10b74:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
   10b78:	e0bfff17 	ldw	r2,-4(fp)
   10b7c:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
   10b80:	010ea604 	movi	r4,15000
   10b84:	00118c00 	call	118c0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   10b88:	e0bffe17 	ldw	r2,-8(fp)
   10b8c:	00c00c04 	movi	r3,48
   10b90:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
   10b94:	01040104 	movi	r4,4100
   10b98:	00118c00 	call	118c0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   10b9c:	e0bffe17 	ldw	r2,-8(fp)
   10ba0:	00c00c04 	movi	r3,48
   10ba4:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
   10ba8:	0100fa04 	movi	r4,1000
   10bac:	00118c00 	call	118c0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   10bb0:	e0bffe17 	ldw	r2,-8(fp)
   10bb4:	00c00c04 	movi	r3,48
   10bb8:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
   10bbc:	01400e04 	movi	r5,56
   10bc0:	e13fff17 	ldw	r4,-4(fp)
   10bc4:	000fd400 	call	fd40 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
   10bc8:	01400204 	movi	r5,8
   10bcc:	e13fff17 	ldw	r4,-4(fp)
   10bd0:	000fd400 	call	fd40 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
   10bd4:	e13fff17 	ldw	r4,-4(fp)
   10bd8:	000fed00 	call	fed0 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
   10bdc:	01400184 	movi	r5,6
   10be0:	e13fff17 	ldw	r4,-4(fp)
   10be4:	000fd400 	call	fd40 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
   10be8:	01400304 	movi	r5,12
   10bec:	e13fff17 	ldw	r4,-4(fp)
   10bf0:	000fd400 	call	fd40 <lcd_write_command>

  sp->esccount = -1;
   10bf4:	e0bfff17 	ldw	r2,-4(fp)
   10bf8:	00ffffc4 	movi	r3,-1
   10bfc:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
   10c00:	e0bfff17 	ldw	r2,-4(fp)
   10c04:	10800a04 	addi	r2,r2,40
   10c08:	01800204 	movi	r6,8
   10c0c:	000b883a 	mov	r5,zero
   10c10:	1009883a 	mov	r4,r2
   10c14:	00076940 	call	7694 <memset>

  sp->scrollpos = 0;
   10c18:	e0bfff17 	ldw	r2,-4(fp)
   10c1c:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
   10c20:	e0bfff17 	ldw	r2,-4(fp)
   10c24:	10000985 	stb	zero,38(r2)
  sp->active = 0;
   10c28:	e0bfff17 	ldw	r2,-4(fp)
   10c2c:	100009c5 	stb	zero,39(r2)
   10c30:	d0a72517 	ldw	r2,-25452(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
   10c34:	01400284 	movi	r5,10
   10c38:	1009883a 	mov	r4,r2
   10c3c:	000bdf80 	call	bdf8 <__udivsi3>
   10c40:	1007883a 	mov	r3,r2
   10c44:	e0bfff17 	ldw	r2,-4(fp)
   10c48:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
   10c4c:	e0bfff17 	ldw	r2,-4(fp)
   10c50:	10c00104 	addi	r3,r2,4
   10c54:	e0bfff17 	ldw	r2,-4(fp)
   10c58:	10800717 	ldw	r2,28(r2)
   10c5c:	e1ffff17 	ldw	r7,-4(fp)
   10c60:	01800074 	movhi	r6,1
   10c64:	3182ab04 	addi	r6,r6,2732
   10c68:	100b883a 	mov	r5,r2
   10c6c:	1809883a 	mov	r4,r3
   10c70:	0010de00 	call	10de0 <alt_alarm_start>
}
   10c74:	0001883a 	nop
   10c78:	e037883a 	mov	sp,fp
   10c7c:	dfc00117 	ldw	ra,4(sp)
   10c80:	df000017 	ldw	fp,0(sp)
   10c84:	dec00204 	addi	sp,sp,8
   10c88:	f800283a 	ret

00010c8c <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10c8c:	defffa04 	addi	sp,sp,-24
   10c90:	dfc00515 	stw	ra,20(sp)
   10c94:	df000415 	stw	fp,16(sp)
   10c98:	df000404 	addi	fp,sp,16
   10c9c:	e13ffd15 	stw	r4,-12(fp)
   10ca0:	e17ffe15 	stw	r5,-8(fp)
   10ca4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
   10ca8:	e0bffd17 	ldw	r2,-12(fp)
   10cac:	10800017 	ldw	r2,0(r2)
   10cb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   10cb4:	e0bffc17 	ldw	r2,-16(fp)
   10cb8:	10c00a04 	addi	r3,r2,40
   10cbc:	e0bffd17 	ldw	r2,-12(fp)
   10cc0:	10800217 	ldw	r2,8(r2)
   10cc4:	100f883a 	mov	r7,r2
   10cc8:	e1bfff17 	ldw	r6,-4(fp)
   10ccc:	e17ffe17 	ldw	r5,-8(fp)
   10cd0:	1809883a 	mov	r4,r3
   10cd4:	001058c0 	call	1058c <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
   10cd8:	e037883a 	mov	sp,fp
   10cdc:	dfc00117 	ldw	ra,4(sp)
   10ce0:	df000017 	ldw	fp,0(sp)
   10ce4:	dec00204 	addi	sp,sp,8
   10ce8:	f800283a 	ret

00010cec <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   10cec:	defffa04 	addi	sp,sp,-24
   10cf0:	dfc00515 	stw	ra,20(sp)
   10cf4:	df000415 	stw	fp,16(sp)
   10cf8:	df000404 	addi	fp,sp,16
   10cfc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   10d00:	0007883a 	mov	r3,zero
   10d04:	e0bfff17 	ldw	r2,-4(fp)
   10d08:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   10d0c:	e0bfff17 	ldw	r2,-4(fp)
   10d10:	10800104 	addi	r2,r2,4
   10d14:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d18:	0005303a 	rdctl	r2,status
   10d1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d20:	e0fffd17 	ldw	r3,-12(fp)
   10d24:	00bfff84 	movi	r2,-2
   10d28:	1884703a 	and	r2,r3,r2
   10d2c:	1001703a 	wrctl	status,r2
  
  return context;
   10d30:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   10d34:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   10d38:	00117b80 	call	117b8 <alt_tick>
   10d3c:	e0bffc17 	ldw	r2,-16(fp)
   10d40:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d44:	e0bffe17 	ldw	r2,-8(fp)
   10d48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   10d4c:	0001883a 	nop
   10d50:	e037883a 	mov	sp,fp
   10d54:	dfc00117 	ldw	ra,4(sp)
   10d58:	df000017 	ldw	fp,0(sp)
   10d5c:	dec00204 	addi	sp,sp,8
   10d60:	f800283a 	ret

00010d64 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10d64:	defff804 	addi	sp,sp,-32
   10d68:	dfc00715 	stw	ra,28(sp)
   10d6c:	df000615 	stw	fp,24(sp)
   10d70:	df000604 	addi	fp,sp,24
   10d74:	e13ffc15 	stw	r4,-16(fp)
   10d78:	e17ffd15 	stw	r5,-12(fp)
   10d7c:	e1bffe15 	stw	r6,-8(fp)
   10d80:	e1ffff15 	stw	r7,-4(fp)
   10d84:	e0bfff17 	ldw	r2,-4(fp)
   10d88:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   10d8c:	d0a72517 	ldw	r2,-25452(gp)
   10d90:	1000021e 	bne	r2,zero,10d9c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   10d94:	e0bffb17 	ldw	r2,-20(fp)
   10d98:	d0a72515 	stw	r2,-25452(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10d9c:	e0bffc17 	ldw	r2,-16(fp)
   10da0:	10800104 	addi	r2,r2,4
   10da4:	00c001c4 	movi	r3,7
   10da8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   10dac:	d8000015 	stw	zero,0(sp)
   10db0:	e1fffc17 	ldw	r7,-16(fp)
   10db4:	01800074 	movhi	r6,1
   10db8:	31833b04 	addi	r6,r6,3308
   10dbc:	e17ffe17 	ldw	r5,-8(fp)
   10dc0:	e13ffd17 	ldw	r4,-12(fp)
   10dc4:	00110ec0 	call	110ec <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   10dc8:	0001883a 	nop
   10dcc:	e037883a 	mov	sp,fp
   10dd0:	dfc00117 	ldw	ra,4(sp)
   10dd4:	df000017 	ldw	fp,0(sp)
   10dd8:	dec00204 	addi	sp,sp,8
   10ddc:	f800283a 	ret

00010de0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10de0:	defff504 	addi	sp,sp,-44
   10de4:	df000a15 	stw	fp,40(sp)
   10de8:	df000a04 	addi	fp,sp,40
   10dec:	e13ffc15 	stw	r4,-16(fp)
   10df0:	e17ffd15 	stw	r5,-12(fp)
   10df4:	e1bffe15 	stw	r6,-8(fp)
   10df8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10dfc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10e00:	d0a72517 	ldw	r2,-25452(gp)
  
  if (alt_ticks_per_second ())
   10e04:	10003c26 	beq	r2,zero,10ef8 <alt_alarm_start+0x118>
  {
    if (alarm)
   10e08:	e0bffc17 	ldw	r2,-16(fp)
   10e0c:	10003826 	beq	r2,zero,10ef0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   10e10:	e0bffc17 	ldw	r2,-16(fp)
   10e14:	e0fffe17 	ldw	r3,-8(fp)
   10e18:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10e1c:	e0bffc17 	ldw	r2,-16(fp)
   10e20:	e0ffff17 	ldw	r3,-4(fp)
   10e24:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e28:	0005303a 	rdctl	r2,status
   10e2c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e30:	e0fff917 	ldw	r3,-28(fp)
   10e34:	00bfff84 	movi	r2,-2
   10e38:	1884703a 	and	r2,r3,r2
   10e3c:	1001703a 	wrctl	status,r2
  
  return context;
   10e40:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   10e44:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10e48:	d0a72617 	ldw	r2,-25448(gp)
      
      current_nticks = alt_nticks();
   10e4c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10e50:	e0fffd17 	ldw	r3,-12(fp)
   10e54:	e0bff617 	ldw	r2,-40(fp)
   10e58:	1885883a 	add	r2,r3,r2
   10e5c:	10c00044 	addi	r3,r2,1
   10e60:	e0bffc17 	ldw	r2,-16(fp)
   10e64:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10e68:	e0bffc17 	ldw	r2,-16(fp)
   10e6c:	10c00217 	ldw	r3,8(r2)
   10e70:	e0bff617 	ldw	r2,-40(fp)
   10e74:	1880042e 	bgeu	r3,r2,10e88 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   10e78:	e0bffc17 	ldw	r2,-16(fp)
   10e7c:	00c00044 	movi	r3,1
   10e80:	10c00405 	stb	r3,16(r2)
   10e84:	00000206 	br	10e90 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   10e88:	e0bffc17 	ldw	r2,-16(fp)
   10e8c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10e90:	e0bffc17 	ldw	r2,-16(fp)
   10e94:	d0e00f04 	addi	r3,gp,-32708
   10e98:	e0fffa15 	stw	r3,-24(fp)
   10e9c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10ea0:	e0bffb17 	ldw	r2,-20(fp)
   10ea4:	e0fffa17 	ldw	r3,-24(fp)
   10ea8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10eac:	e0bffa17 	ldw	r2,-24(fp)
   10eb0:	10c00017 	ldw	r3,0(r2)
   10eb4:	e0bffb17 	ldw	r2,-20(fp)
   10eb8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10ebc:	e0bffa17 	ldw	r2,-24(fp)
   10ec0:	10800017 	ldw	r2,0(r2)
   10ec4:	e0fffb17 	ldw	r3,-20(fp)
   10ec8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10ecc:	e0bffa17 	ldw	r2,-24(fp)
   10ed0:	e0fffb17 	ldw	r3,-20(fp)
   10ed4:	10c00015 	stw	r3,0(r2)
   10ed8:	e0bff817 	ldw	r2,-32(fp)
   10edc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ee0:	e0bff717 	ldw	r2,-36(fp)
   10ee4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10ee8:	0005883a 	mov	r2,zero
   10eec:	00000306 	br	10efc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   10ef0:	00bffa84 	movi	r2,-22
   10ef4:	00000106 	br	10efc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   10ef8:	00bfde84 	movi	r2,-134
  }
}
   10efc:	e037883a 	mov	sp,fp
   10f00:	df000017 	ldw	fp,0(sp)
   10f04:	dec00104 	addi	sp,sp,4
   10f08:	f800283a 	ret

00010f0c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10f0c:	deffff04 	addi	sp,sp,-4
   10f10:	df000015 	stw	fp,0(sp)
   10f14:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10f18:	0001883a 	nop
   10f1c:	e037883a 	mov	sp,fp
   10f20:	df000017 	ldw	fp,0(sp)
   10f24:	dec00104 	addi	sp,sp,4
   10f28:	f800283a 	ret

00010f2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10f2c:	defffe04 	addi	sp,sp,-8
   10f30:	dfc00115 	stw	ra,4(sp)
   10f34:	df000015 	stw	fp,0(sp)
   10f38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10f3c:	d0a00b17 	ldw	r2,-32724(gp)
   10f40:	10000326 	beq	r2,zero,10f50 <alt_get_errno+0x24>
   10f44:	d0a00b17 	ldw	r2,-32724(gp)
   10f48:	103ee83a 	callr	r2
   10f4c:	00000106 	br	10f54 <alt_get_errno+0x28>
   10f50:	d0a71a04 	addi	r2,gp,-25496
}
   10f54:	e037883a 	mov	sp,fp
   10f58:	dfc00117 	ldw	ra,4(sp)
   10f5c:	df000017 	ldw	fp,0(sp)
   10f60:	dec00204 	addi	sp,sp,8
   10f64:	f800283a 	ret

00010f68 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10f68:	defffa04 	addi	sp,sp,-24
   10f6c:	dfc00515 	stw	ra,20(sp)
   10f70:	df000415 	stw	fp,16(sp)
   10f74:	df000404 	addi	fp,sp,16
   10f78:	e13ffe15 	stw	r4,-8(fp)
   10f7c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10f80:	e0bffe17 	ldw	r2,-8(fp)
   10f84:	10000326 	beq	r2,zero,10f94 <alt_dev_llist_insert+0x2c>
   10f88:	e0bffe17 	ldw	r2,-8(fp)
   10f8c:	10800217 	ldw	r2,8(r2)
   10f90:	1000061e 	bne	r2,zero,10fac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   10f94:	0010f2c0 	call	10f2c <alt_get_errno>
   10f98:	1007883a 	mov	r3,r2
   10f9c:	00800584 	movi	r2,22
   10fa0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10fa4:	00bffa84 	movi	r2,-22
   10fa8:	00001306 	br	10ff8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10fac:	e0bffe17 	ldw	r2,-8(fp)
   10fb0:	e0ffff17 	ldw	r3,-4(fp)
   10fb4:	e0fffc15 	stw	r3,-16(fp)
   10fb8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10fbc:	e0bffd17 	ldw	r2,-12(fp)
   10fc0:	e0fffc17 	ldw	r3,-16(fp)
   10fc4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10fc8:	e0bffc17 	ldw	r2,-16(fp)
   10fcc:	10c00017 	ldw	r3,0(r2)
   10fd0:	e0bffd17 	ldw	r2,-12(fp)
   10fd4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10fd8:	e0bffc17 	ldw	r2,-16(fp)
   10fdc:	10800017 	ldw	r2,0(r2)
   10fe0:	e0fffd17 	ldw	r3,-12(fp)
   10fe4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10fe8:	e0bffc17 	ldw	r2,-16(fp)
   10fec:	e0fffd17 	ldw	r3,-12(fp)
   10ff0:	10c00015 	stw	r3,0(r2)

  return 0;  
   10ff4:	0005883a 	mov	r2,zero
}
   10ff8:	e037883a 	mov	sp,fp
   10ffc:	dfc00117 	ldw	ra,4(sp)
   11000:	df000017 	ldw	fp,0(sp)
   11004:	dec00204 	addi	sp,sp,8
   11008:	f800283a 	ret

0001100c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1100c:	defffd04 	addi	sp,sp,-12
   11010:	dfc00215 	stw	ra,8(sp)
   11014:	df000115 	stw	fp,4(sp)
   11018:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1101c:	00800074 	movhi	r2,1
   11020:	10881604 	addi	r2,r2,8280
   11024:	e0bfff15 	stw	r2,-4(fp)
   11028:	00000606 	br	11044 <_do_ctors+0x38>
        (*ctor) (); 
   1102c:	e0bfff17 	ldw	r2,-4(fp)
   11030:	10800017 	ldw	r2,0(r2)
   11034:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11038:	e0bfff17 	ldw	r2,-4(fp)
   1103c:	10bfff04 	addi	r2,r2,-4
   11040:	e0bfff15 	stw	r2,-4(fp)
   11044:	e0ffff17 	ldw	r3,-4(fp)
   11048:	00800074 	movhi	r2,1
   1104c:	10881704 	addi	r2,r2,8284
   11050:	18bff62e 	bgeu	r3,r2,1102c <__alt_data_end+0xf801102c>
        (*ctor) (); 
}
   11054:	0001883a 	nop
   11058:	e037883a 	mov	sp,fp
   1105c:	dfc00117 	ldw	ra,4(sp)
   11060:	df000017 	ldw	fp,0(sp)
   11064:	dec00204 	addi	sp,sp,8
   11068:	f800283a 	ret

0001106c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1106c:	defffd04 	addi	sp,sp,-12
   11070:	dfc00215 	stw	ra,8(sp)
   11074:	df000115 	stw	fp,4(sp)
   11078:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1107c:	00800074 	movhi	r2,1
   11080:	10881604 	addi	r2,r2,8280
   11084:	e0bfff15 	stw	r2,-4(fp)
   11088:	00000606 	br	110a4 <_do_dtors+0x38>
        (*dtor) (); 
   1108c:	e0bfff17 	ldw	r2,-4(fp)
   11090:	10800017 	ldw	r2,0(r2)
   11094:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11098:	e0bfff17 	ldw	r2,-4(fp)
   1109c:	10bfff04 	addi	r2,r2,-4
   110a0:	e0bfff15 	stw	r2,-4(fp)
   110a4:	e0ffff17 	ldw	r3,-4(fp)
   110a8:	00800074 	movhi	r2,1
   110ac:	10881704 	addi	r2,r2,8284
   110b0:	18bff62e 	bgeu	r3,r2,1108c <__alt_data_end+0xf801108c>
        (*dtor) (); 
}
   110b4:	0001883a 	nop
   110b8:	e037883a 	mov	sp,fp
   110bc:	dfc00117 	ldw	ra,4(sp)
   110c0:	df000017 	ldw	fp,0(sp)
   110c4:	dec00204 	addi	sp,sp,8
   110c8:	f800283a 	ret

000110cc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   110cc:	deffff04 	addi	sp,sp,-4
   110d0:	df000015 	stw	fp,0(sp)
   110d4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   110d8:	0001883a 	nop
   110dc:	e037883a 	mov	sp,fp
   110e0:	df000017 	ldw	fp,0(sp)
   110e4:	dec00104 	addi	sp,sp,4
   110e8:	f800283a 	ret

000110ec <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   110ec:	defff904 	addi	sp,sp,-28
   110f0:	dfc00615 	stw	ra,24(sp)
   110f4:	df000515 	stw	fp,20(sp)
   110f8:	df000504 	addi	fp,sp,20
   110fc:	e13ffc15 	stw	r4,-16(fp)
   11100:	e17ffd15 	stw	r5,-12(fp)
   11104:	e1bffe15 	stw	r6,-8(fp)
   11108:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1110c:	e0800217 	ldw	r2,8(fp)
   11110:	d8800015 	stw	r2,0(sp)
   11114:	e1ffff17 	ldw	r7,-4(fp)
   11118:	e1bffe17 	ldw	r6,-8(fp)
   1111c:	e17ffd17 	ldw	r5,-12(fp)
   11120:	e13ffc17 	ldw	r4,-16(fp)
   11124:	000e98c0 	call	e98c <alt_iic_isr_register>
}  
   11128:	e037883a 	mov	sp,fp
   1112c:	dfc00117 	ldw	ra,4(sp)
   11130:	df000017 	ldw	fp,0(sp)
   11134:	dec00204 	addi	sp,sp,8
   11138:	f800283a 	ret

0001113c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1113c:	defff904 	addi	sp,sp,-28
   11140:	df000615 	stw	fp,24(sp)
   11144:	df000604 	addi	fp,sp,24
   11148:	e13ffe15 	stw	r4,-8(fp)
   1114c:	e17fff15 	stw	r5,-4(fp)
   11150:	e0bfff17 	ldw	r2,-4(fp)
   11154:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11158:	0005303a 	rdctl	r2,status
   1115c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11160:	e0fffb17 	ldw	r3,-20(fp)
   11164:	00bfff84 	movi	r2,-2
   11168:	1884703a 	and	r2,r3,r2
   1116c:	1001703a 	wrctl	status,r2
  
  return context;
   11170:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11174:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   11178:	00c00044 	movi	r3,1
   1117c:	e0bffa17 	ldw	r2,-24(fp)
   11180:	1884983a 	sll	r2,r3,r2
   11184:	1007883a 	mov	r3,r2
   11188:	d0a72417 	ldw	r2,-25456(gp)
   1118c:	1884b03a 	or	r2,r3,r2
   11190:	d0a72415 	stw	r2,-25456(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11194:	d0a72417 	ldw	r2,-25456(gp)
   11198:	100170fa 	wrctl	ienable,r2
   1119c:	e0bffc17 	ldw	r2,-16(fp)
   111a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   111a4:	e0bffd17 	ldw	r2,-12(fp)
   111a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   111ac:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   111b0:	0001883a 	nop
}
   111b4:	e037883a 	mov	sp,fp
   111b8:	df000017 	ldw	fp,0(sp)
   111bc:	dec00104 	addi	sp,sp,4
   111c0:	f800283a 	ret

000111c4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   111c4:	defff904 	addi	sp,sp,-28
   111c8:	df000615 	stw	fp,24(sp)
   111cc:	df000604 	addi	fp,sp,24
   111d0:	e13ffe15 	stw	r4,-8(fp)
   111d4:	e17fff15 	stw	r5,-4(fp)
   111d8:	e0bfff17 	ldw	r2,-4(fp)
   111dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111e0:	0005303a 	rdctl	r2,status
   111e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   111e8:	e0fffb17 	ldw	r3,-20(fp)
   111ec:	00bfff84 	movi	r2,-2
   111f0:	1884703a 	and	r2,r3,r2
   111f4:	1001703a 	wrctl	status,r2
  
  return context;
   111f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   111fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   11200:	00c00044 	movi	r3,1
   11204:	e0bffa17 	ldw	r2,-24(fp)
   11208:	1884983a 	sll	r2,r3,r2
   1120c:	0084303a 	nor	r2,zero,r2
   11210:	1007883a 	mov	r3,r2
   11214:	d0a72417 	ldw	r2,-25456(gp)
   11218:	1884703a 	and	r2,r3,r2
   1121c:	d0a72415 	stw	r2,-25456(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11220:	d0a72417 	ldw	r2,-25456(gp)
   11224:	100170fa 	wrctl	ienable,r2
   11228:	e0bffc17 	ldw	r2,-16(fp)
   1122c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11230:	e0bffd17 	ldw	r2,-12(fp)
   11234:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11238:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   1123c:	0001883a 	nop
}
   11240:	e037883a 	mov	sp,fp
   11244:	df000017 	ldw	fp,0(sp)
   11248:	dec00104 	addi	sp,sp,4
   1124c:	f800283a 	ret

00011250 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   11250:	defffc04 	addi	sp,sp,-16
   11254:	df000315 	stw	fp,12(sp)
   11258:	df000304 	addi	fp,sp,12
   1125c:	e13ffe15 	stw	r4,-8(fp)
   11260:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11264:	000530fa 	rdctl	r2,ienable
   11268:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1126c:	00c00044 	movi	r3,1
   11270:	e0bfff17 	ldw	r2,-4(fp)
   11274:	1884983a 	sll	r2,r3,r2
   11278:	1007883a 	mov	r3,r2
   1127c:	e0bffd17 	ldw	r2,-12(fp)
   11280:	1884703a 	and	r2,r3,r2
   11284:	1004c03a 	cmpne	r2,r2,zero
   11288:	10803fcc 	andi	r2,r2,255
}
   1128c:	e037883a 	mov	sp,fp
   11290:	df000017 	ldw	fp,0(sp)
   11294:	dec00104 	addi	sp,sp,4
   11298:	f800283a 	ret

0001129c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1129c:	defffe04 	addi	sp,sp,-8
   112a0:	df000115 	stw	fp,4(sp)
   112a4:	df000104 	addi	fp,sp,4
   112a8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   112ac:	e0bfff17 	ldw	r2,-4(fp)
   112b0:	10bffe84 	addi	r2,r2,-6
   112b4:	10c00428 	cmpgeui	r3,r2,16
   112b8:	18001a1e 	bne	r3,zero,11324 <alt_exception_cause_generated_bad_addr+0x88>
   112bc:	100690ba 	slli	r3,r2,2
   112c0:	00800074 	movhi	r2,1
   112c4:	1084b504 	addi	r2,r2,4820
   112c8:	1885883a 	add	r2,r3,r2
   112cc:	10800017 	ldw	r2,0(r2)
   112d0:	1000683a 	jmp	r2
   112d4:	00011314 	movui	zero,1100
   112d8:	00011314 	movui	zero,1100
   112dc:	00011324 	muli	zero,zero,1100
   112e0:	00011324 	muli	zero,zero,1100
   112e4:	00011324 	muli	zero,zero,1100
   112e8:	00011314 	movui	zero,1100
   112ec:	0001131c 	xori	zero,zero,1100
   112f0:	00011324 	muli	zero,zero,1100
   112f4:	00011314 	movui	zero,1100
   112f8:	00011314 	movui	zero,1100
   112fc:	00011324 	muli	zero,zero,1100
   11300:	00011314 	movui	zero,1100
   11304:	0001131c 	xori	zero,zero,1100
   11308:	00011324 	muli	zero,zero,1100
   1130c:	00011324 	muli	zero,zero,1100
   11310:	00011314 	movui	zero,1100
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11314:	00800044 	movi	r2,1
   11318:	00000306 	br	11328 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1131c:	0005883a 	mov	r2,zero
   11320:	00000106 	br	11328 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11324:	0005883a 	mov	r2,zero
  }
}
   11328:	e037883a 	mov	sp,fp
   1132c:	df000017 	ldw	fp,0(sp)
   11330:	dec00104 	addi	sp,sp,4
   11334:	f800283a 	ret

00011338 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11338:	defff804 	addi	sp,sp,-32
   1133c:	dfc00715 	stw	ra,28(sp)
   11340:	df000615 	stw	fp,24(sp)
   11344:	dc000515 	stw	r16,20(sp)
   11348:	df000604 	addi	fp,sp,24
   1134c:	e13ffb15 	stw	r4,-20(fp)
   11350:	e17ffc15 	stw	r5,-16(fp)
   11354:	e1bffd15 	stw	r6,-12(fp)
   11358:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   1135c:	e1bffe17 	ldw	r6,-8(fp)
   11360:	e17ffd17 	ldw	r5,-12(fp)
   11364:	e13ffc17 	ldw	r4,-16(fp)
   11368:	00115c00 	call	115c0 <open>
   1136c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   11370:	e0bffa17 	ldw	r2,-24(fp)
   11374:	10002216 	blt	r2,zero,11400 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   11378:	04000074 	movhi	r16,1
   1137c:	840bc204 	addi	r16,r16,12040
   11380:	e0bffa17 	ldw	r2,-24(fp)
   11384:	01400304 	movi	r5,12
   11388:	1009883a 	mov	r4,r2
   1138c:	00017b40 	call	17b4 <__mulsi3>
   11390:	8085883a 	add	r2,r16,r2
   11394:	10c00017 	ldw	r3,0(r2)
   11398:	e0bffb17 	ldw	r2,-20(fp)
   1139c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   113a0:	04000074 	movhi	r16,1
   113a4:	840bc204 	addi	r16,r16,12040
   113a8:	e0bffa17 	ldw	r2,-24(fp)
   113ac:	01400304 	movi	r5,12
   113b0:	1009883a 	mov	r4,r2
   113b4:	00017b40 	call	17b4 <__mulsi3>
   113b8:	8085883a 	add	r2,r16,r2
   113bc:	10800104 	addi	r2,r2,4
   113c0:	10c00017 	ldw	r3,0(r2)
   113c4:	e0bffb17 	ldw	r2,-20(fp)
   113c8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   113cc:	04000074 	movhi	r16,1
   113d0:	840bc204 	addi	r16,r16,12040
   113d4:	e0bffa17 	ldw	r2,-24(fp)
   113d8:	01400304 	movi	r5,12
   113dc:	1009883a 	mov	r4,r2
   113e0:	00017b40 	call	17b4 <__mulsi3>
   113e4:	8085883a 	add	r2,r16,r2
   113e8:	10800204 	addi	r2,r2,8
   113ec:	10c00017 	ldw	r3,0(r2)
   113f0:	e0bffb17 	ldw	r2,-20(fp)
   113f4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   113f8:	e13ffa17 	ldw	r4,-24(fp)
   113fc:	000ef6c0 	call	ef6c <alt_release_fd>
  }
} 
   11400:	0001883a 	nop
   11404:	e6ffff04 	addi	sp,fp,-4
   11408:	dfc00217 	ldw	ra,8(sp)
   1140c:	df000117 	ldw	fp,4(sp)
   11410:	dc000017 	ldw	r16,0(sp)
   11414:	dec00304 	addi	sp,sp,12
   11418:	f800283a 	ret

0001141c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1141c:	defffb04 	addi	sp,sp,-20
   11420:	dfc00415 	stw	ra,16(sp)
   11424:	df000315 	stw	fp,12(sp)
   11428:	df000304 	addi	fp,sp,12
   1142c:	e13ffd15 	stw	r4,-12(fp)
   11430:	e17ffe15 	stw	r5,-8(fp)
   11434:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11438:	01c07fc4 	movi	r7,511
   1143c:	01800044 	movi	r6,1
   11440:	e17ffd17 	ldw	r5,-12(fp)
   11444:	01000074 	movhi	r4,1
   11448:	210bc504 	addi	r4,r4,12052
   1144c:	00113380 	call	11338 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11450:	01c07fc4 	movi	r7,511
   11454:	000d883a 	mov	r6,zero
   11458:	e17ffe17 	ldw	r5,-8(fp)
   1145c:	01000074 	movhi	r4,1
   11460:	210bc204 	addi	r4,r4,12040
   11464:	00113380 	call	11338 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11468:	01c07fc4 	movi	r7,511
   1146c:	01800044 	movi	r6,1
   11470:	e17fff17 	ldw	r5,-4(fp)
   11474:	01000074 	movhi	r4,1
   11478:	210bc804 	addi	r4,r4,12064
   1147c:	00113380 	call	11338 <alt_open_fd>
}  
   11480:	0001883a 	nop
   11484:	e037883a 	mov	sp,fp
   11488:	dfc00117 	ldw	ra,4(sp)
   1148c:	df000017 	ldw	fp,0(sp)
   11490:	dec00204 	addi	sp,sp,8
   11494:	f800283a 	ret

00011498 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11498:	defffe04 	addi	sp,sp,-8
   1149c:	dfc00115 	stw	ra,4(sp)
   114a0:	df000015 	stw	fp,0(sp)
   114a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   114a8:	d0a00b17 	ldw	r2,-32724(gp)
   114ac:	10000326 	beq	r2,zero,114bc <alt_get_errno+0x24>
   114b0:	d0a00b17 	ldw	r2,-32724(gp)
   114b4:	103ee83a 	callr	r2
   114b8:	00000106 	br	114c0 <alt_get_errno+0x28>
   114bc:	d0a71a04 	addi	r2,gp,-25496
}
   114c0:	e037883a 	mov	sp,fp
   114c4:	dfc00117 	ldw	ra,4(sp)
   114c8:	df000017 	ldw	fp,0(sp)
   114cc:	dec00204 	addi	sp,sp,8
   114d0:	f800283a 	ret

000114d4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   114d4:	defffb04 	addi	sp,sp,-20
   114d8:	dfc00415 	stw	ra,16(sp)
   114dc:	df000315 	stw	fp,12(sp)
   114e0:	dc000215 	stw	r16,8(sp)
   114e4:	df000304 	addi	fp,sp,12
   114e8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   114ec:	e0bffe17 	ldw	r2,-8(fp)
   114f0:	10800217 	ldw	r2,8(r2)
   114f4:	10d00034 	orhi	r3,r2,16384
   114f8:	e0bffe17 	ldw	r2,-8(fp)
   114fc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11500:	e03ffd15 	stw	zero,-12(fp)
   11504:	00002306 	br	11594 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11508:	04000074 	movhi	r16,1
   1150c:	840bc204 	addi	r16,r16,12040
   11510:	e0bffd17 	ldw	r2,-12(fp)
   11514:	01400304 	movi	r5,12
   11518:	1009883a 	mov	r4,r2
   1151c:	00017b40 	call	17b4 <__mulsi3>
   11520:	8085883a 	add	r2,r16,r2
   11524:	10c00017 	ldw	r3,0(r2)
   11528:	e0bffe17 	ldw	r2,-8(fp)
   1152c:	10800017 	ldw	r2,0(r2)
   11530:	1880151e 	bne	r3,r2,11588 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11534:	04000074 	movhi	r16,1
   11538:	840bc204 	addi	r16,r16,12040
   1153c:	e0bffd17 	ldw	r2,-12(fp)
   11540:	01400304 	movi	r5,12
   11544:	1009883a 	mov	r4,r2
   11548:	00017b40 	call	17b4 <__mulsi3>
   1154c:	8085883a 	add	r2,r16,r2
   11550:	10800204 	addi	r2,r2,8
   11554:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11558:	10000b0e 	bge	r2,zero,11588 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1155c:	01400304 	movi	r5,12
   11560:	e13ffd17 	ldw	r4,-12(fp)
   11564:	00017b40 	call	17b4 <__mulsi3>
   11568:	1007883a 	mov	r3,r2
   1156c:	00800074 	movhi	r2,1
   11570:	108bc204 	addi	r2,r2,12040
   11574:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11578:	e0bffe17 	ldw	r2,-8(fp)
   1157c:	18800226 	beq	r3,r2,11588 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11580:	00bffcc4 	movi	r2,-13
   11584:	00000806 	br	115a8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11588:	e0bffd17 	ldw	r2,-12(fp)
   1158c:	10800044 	addi	r2,r2,1
   11590:	e0bffd15 	stw	r2,-12(fp)
   11594:	d0a00a17 	ldw	r2,-32728(gp)
   11598:	1007883a 	mov	r3,r2
   1159c:	e0bffd17 	ldw	r2,-12(fp)
   115a0:	18bfd92e 	bgeu	r3,r2,11508 <__alt_data_end+0xf8011508>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   115a4:	0005883a 	mov	r2,zero
}
   115a8:	e6ffff04 	addi	sp,fp,-4
   115ac:	dfc00217 	ldw	ra,8(sp)
   115b0:	df000117 	ldw	fp,4(sp)
   115b4:	dc000017 	ldw	r16,0(sp)
   115b8:	dec00304 	addi	sp,sp,12
   115bc:	f800283a 	ret

000115c0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   115c0:	defff604 	addi	sp,sp,-40
   115c4:	dfc00915 	stw	ra,36(sp)
   115c8:	df000815 	stw	fp,32(sp)
   115cc:	df000804 	addi	fp,sp,32
   115d0:	e13ffd15 	stw	r4,-12(fp)
   115d4:	e17ffe15 	stw	r5,-8(fp)
   115d8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   115dc:	00bfffc4 	movi	r2,-1
   115e0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   115e4:	00bffb44 	movi	r2,-19
   115e8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   115ec:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   115f0:	d1600804 	addi	r5,gp,-32736
   115f4:	e13ffd17 	ldw	r4,-12(fp)
   115f8:	0011a6c0 	call	11a6c <alt_find_dev>
   115fc:	e0bff815 	stw	r2,-32(fp)
   11600:	e0bff817 	ldw	r2,-32(fp)
   11604:	1000051e 	bne	r2,zero,1161c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11608:	e13ffd17 	ldw	r4,-12(fp)
   1160c:	0011afc0 	call	11afc <alt_find_file>
   11610:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11614:	00800044 	movi	r2,1
   11618:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1161c:	e0bff817 	ldw	r2,-32(fp)
   11620:	10002b26 	beq	r2,zero,116d0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11624:	e13ff817 	ldw	r4,-32(fp)
   11628:	0011c040 	call	11c04 <alt_get_fd>
   1162c:	e0bff915 	stw	r2,-28(fp)
   11630:	e0bff917 	ldw	r2,-28(fp)
   11634:	1000030e 	bge	r2,zero,11644 <open+0x84>
    {
      status = index;
   11638:	e0bff917 	ldw	r2,-28(fp)
   1163c:	e0bffa15 	stw	r2,-24(fp)
   11640:	00002506 	br	116d8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   11644:	01400304 	movi	r5,12
   11648:	e13ff917 	ldw	r4,-28(fp)
   1164c:	00017b40 	call	17b4 <__mulsi3>
   11650:	1007883a 	mov	r3,r2
   11654:	00800074 	movhi	r2,1
   11658:	108bc204 	addi	r2,r2,12040
   1165c:	1885883a 	add	r2,r3,r2
   11660:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11664:	e0fffe17 	ldw	r3,-8(fp)
   11668:	00900034 	movhi	r2,16384
   1166c:	10bfffc4 	addi	r2,r2,-1
   11670:	1886703a 	and	r3,r3,r2
   11674:	e0bffc17 	ldw	r2,-16(fp)
   11678:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1167c:	e0bffb17 	ldw	r2,-20(fp)
   11680:	1000051e 	bne	r2,zero,11698 <open+0xd8>
   11684:	e13ffc17 	ldw	r4,-16(fp)
   11688:	00114d40 	call	114d4 <alt_file_locked>
   1168c:	e0bffa15 	stw	r2,-24(fp)
   11690:	e0bffa17 	ldw	r2,-24(fp)
   11694:	10001016 	blt	r2,zero,116d8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11698:	e0bff817 	ldw	r2,-32(fp)
   1169c:	10800317 	ldw	r2,12(r2)
   116a0:	10000826 	beq	r2,zero,116c4 <open+0x104>
   116a4:	e0bff817 	ldw	r2,-32(fp)
   116a8:	10800317 	ldw	r2,12(r2)
   116ac:	e1ffff17 	ldw	r7,-4(fp)
   116b0:	e1bffe17 	ldw	r6,-8(fp)
   116b4:	e17ffd17 	ldw	r5,-12(fp)
   116b8:	e13ffc17 	ldw	r4,-16(fp)
   116bc:	103ee83a 	callr	r2
   116c0:	00000106 	br	116c8 <open+0x108>
   116c4:	0005883a 	mov	r2,zero
   116c8:	e0bffa15 	stw	r2,-24(fp)
   116cc:	00000206 	br	116d8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   116d0:	00bffb44 	movi	r2,-19
   116d4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   116d8:	e0bffa17 	ldw	r2,-24(fp)
   116dc:	1000090e 	bge	r2,zero,11704 <open+0x144>
  {
    alt_release_fd (index);  
   116e0:	e13ff917 	ldw	r4,-28(fp)
   116e4:	000ef6c0 	call	ef6c <alt_release_fd>
    ALT_ERRNO = -status;
   116e8:	00114980 	call	11498 <alt_get_errno>
   116ec:	1007883a 	mov	r3,r2
   116f0:	e0bffa17 	ldw	r2,-24(fp)
   116f4:	0085c83a 	sub	r2,zero,r2
   116f8:	18800015 	stw	r2,0(r3)
    return -1;
   116fc:	00bfffc4 	movi	r2,-1
   11700:	00000106 	br	11708 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   11704:	e0bff917 	ldw	r2,-28(fp)
}
   11708:	e037883a 	mov	sp,fp
   1170c:	dfc00117 	ldw	ra,4(sp)
   11710:	df000017 	ldw	fp,0(sp)
   11714:	dec00204 	addi	sp,sp,8
   11718:	f800283a 	ret

0001171c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1171c:	defffa04 	addi	sp,sp,-24
   11720:	df000515 	stw	fp,20(sp)
   11724:	df000504 	addi	fp,sp,20
   11728:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1172c:	0005303a 	rdctl	r2,status
   11730:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11734:	e0fffc17 	ldw	r3,-16(fp)
   11738:	00bfff84 	movi	r2,-2
   1173c:	1884703a 	and	r2,r3,r2
   11740:	1001703a 	wrctl	status,r2
  
  return context;
   11744:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   11748:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1174c:	e0bfff17 	ldw	r2,-4(fp)
   11750:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11754:	e0bffd17 	ldw	r2,-12(fp)
   11758:	10800017 	ldw	r2,0(r2)
   1175c:	e0fffd17 	ldw	r3,-12(fp)
   11760:	18c00117 	ldw	r3,4(r3)
   11764:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   11768:	e0bffd17 	ldw	r2,-12(fp)
   1176c:	10800117 	ldw	r2,4(r2)
   11770:	e0fffd17 	ldw	r3,-12(fp)
   11774:	18c00017 	ldw	r3,0(r3)
   11778:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1177c:	e0bffd17 	ldw	r2,-12(fp)
   11780:	e0fffd17 	ldw	r3,-12(fp)
   11784:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11788:	e0bffd17 	ldw	r2,-12(fp)
   1178c:	e0fffd17 	ldw	r3,-12(fp)
   11790:	10c00015 	stw	r3,0(r2)
   11794:	e0bffb17 	ldw	r2,-20(fp)
   11798:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1179c:	e0bffe17 	ldw	r2,-8(fp)
   117a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   117a4:	0001883a 	nop
   117a8:	e037883a 	mov	sp,fp
   117ac:	df000017 	ldw	fp,0(sp)
   117b0:	dec00104 	addi	sp,sp,4
   117b4:	f800283a 	ret

000117b8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   117b8:	defffb04 	addi	sp,sp,-20
   117bc:	dfc00415 	stw	ra,16(sp)
   117c0:	df000315 	stw	fp,12(sp)
   117c4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   117c8:	d0a00f17 	ldw	r2,-32708(gp)
   117cc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   117d0:	d0a72617 	ldw	r2,-25448(gp)
   117d4:	10800044 	addi	r2,r2,1
   117d8:	d0a72615 	stw	r2,-25448(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   117dc:	00002e06 	br	11898 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   117e0:	e0bffd17 	ldw	r2,-12(fp)
   117e4:	10800017 	ldw	r2,0(r2)
   117e8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   117ec:	e0bffd17 	ldw	r2,-12(fp)
   117f0:	10800403 	ldbu	r2,16(r2)
   117f4:	10803fcc 	andi	r2,r2,255
   117f8:	10000426 	beq	r2,zero,1180c <alt_tick+0x54>
   117fc:	d0a72617 	ldw	r2,-25448(gp)
   11800:	1000021e 	bne	r2,zero,1180c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11804:	e0bffd17 	ldw	r2,-12(fp)
   11808:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1180c:	e0bffd17 	ldw	r2,-12(fp)
   11810:	10800217 	ldw	r2,8(r2)
   11814:	d0e72617 	ldw	r3,-25448(gp)
   11818:	18801d36 	bltu	r3,r2,11890 <alt_tick+0xd8>
   1181c:	e0bffd17 	ldw	r2,-12(fp)
   11820:	10800403 	ldbu	r2,16(r2)
   11824:	10803fcc 	andi	r2,r2,255
   11828:	1000191e 	bne	r2,zero,11890 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1182c:	e0bffd17 	ldw	r2,-12(fp)
   11830:	10800317 	ldw	r2,12(r2)
   11834:	e0fffd17 	ldw	r3,-12(fp)
   11838:	18c00517 	ldw	r3,20(r3)
   1183c:	1809883a 	mov	r4,r3
   11840:	103ee83a 	callr	r2
   11844:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11848:	e0bfff17 	ldw	r2,-4(fp)
   1184c:	1000031e 	bne	r2,zero,1185c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   11850:	e13ffd17 	ldw	r4,-12(fp)
   11854:	001171c0 	call	1171c <alt_alarm_stop>
   11858:	00000d06 	br	11890 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1185c:	e0bffd17 	ldw	r2,-12(fp)
   11860:	10c00217 	ldw	r3,8(r2)
   11864:	e0bfff17 	ldw	r2,-4(fp)
   11868:	1887883a 	add	r3,r3,r2
   1186c:	e0bffd17 	ldw	r2,-12(fp)
   11870:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11874:	e0bffd17 	ldw	r2,-12(fp)
   11878:	10c00217 	ldw	r3,8(r2)
   1187c:	d0a72617 	ldw	r2,-25448(gp)
   11880:	1880032e 	bgeu	r3,r2,11890 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   11884:	e0bffd17 	ldw	r2,-12(fp)
   11888:	00c00044 	movi	r3,1
   1188c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11890:	e0bffe17 	ldw	r2,-8(fp)
   11894:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11898:	e0fffd17 	ldw	r3,-12(fp)
   1189c:	d0a00f04 	addi	r2,gp,-32708
   118a0:	18bfcf1e 	bne	r3,r2,117e0 <__alt_data_end+0xf80117e0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   118a4:	0001883a 	nop
}
   118a8:	0001883a 	nop
   118ac:	e037883a 	mov	sp,fp
   118b0:	dfc00117 	ldw	ra,4(sp)
   118b4:	df000017 	ldw	fp,0(sp)
   118b8:	dec00204 	addi	sp,sp,8
   118bc:	f800283a 	ret

000118c0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   118c0:	defffd04 	addi	sp,sp,-12
   118c4:	dfc00215 	stw	ra,8(sp)
   118c8:	df000115 	stw	fp,4(sp)
   118cc:	df000104 	addi	fp,sp,4
   118d0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   118d4:	e13fff17 	ldw	r4,-4(fp)
   118d8:	00119140 	call	11914 <alt_busy_sleep>
}
   118dc:	e037883a 	mov	sp,fp
   118e0:	dfc00117 	ldw	ra,4(sp)
   118e4:	df000017 	ldw	fp,0(sp)
   118e8:	dec00204 	addi	sp,sp,8
   118ec:	f800283a 	ret

000118f0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   118f0:	deffff04 	addi	sp,sp,-4
   118f4:	df000015 	stw	fp,0(sp)
   118f8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   118fc:	000170fa 	wrctl	ienable,zero
}
   11900:	0001883a 	nop
   11904:	e037883a 	mov	sp,fp
   11908:	df000017 	ldw	fp,0(sp)
   1190c:	dec00104 	addi	sp,sp,4
   11910:	f800283a 	ret

00011914 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11914:	defffa04 	addi	sp,sp,-24
   11918:	dfc00515 	stw	ra,20(sp)
   1191c:	df000415 	stw	fp,16(sp)
   11920:	df000404 	addi	fp,sp,16
   11924:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   11928:	00800244 	movi	r2,9
   1192c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   11930:	014003f4 	movhi	r5,15
   11934:	29509004 	addi	r5,r5,16960
   11938:	e13ffd17 	ldw	r4,-12(fp)
   1193c:	00017b40 	call	17b4 <__mulsi3>
   11940:	100b883a 	mov	r5,r2
   11944:	01017db4 	movhi	r4,1526
   11948:	21384004 	addi	r4,r4,-7936
   1194c:	000bdf80 	call	bdf8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   11950:	100b883a 	mov	r5,r2
   11954:	01200034 	movhi	r4,32768
   11958:	213fffc4 	addi	r4,r4,-1
   1195c:	000bdf80 	call	bdf8 <__udivsi3>
   11960:	100b883a 	mov	r5,r2
   11964:	e13fff17 	ldw	r4,-4(fp)
   11968:	000bdf80 	call	bdf8 <__udivsi3>
   1196c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   11970:	e0bffe17 	ldw	r2,-8(fp)
   11974:	10002a26 	beq	r2,zero,11a20 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   11978:	e03ffc15 	stw	zero,-16(fp)
   1197c:	00001706 	br	119dc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11980:	00a00034 	movhi	r2,32768
   11984:	10bfffc4 	addi	r2,r2,-1
   11988:	10bfffc4 	addi	r2,r2,-1
   1198c:	103ffe1e 	bne	r2,zero,11988 <__alt_data_end+0xf8011988>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   11990:	014003f4 	movhi	r5,15
   11994:	29509004 	addi	r5,r5,16960
   11998:	e13ffd17 	ldw	r4,-12(fp)
   1199c:	00017b40 	call	17b4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   119a0:	100b883a 	mov	r5,r2
   119a4:	01017db4 	movhi	r4,1526
   119a8:	21384004 	addi	r4,r4,-7936
   119ac:	000bdf80 	call	bdf8 <__udivsi3>
   119b0:	100b883a 	mov	r5,r2
   119b4:	01200034 	movhi	r4,32768
   119b8:	213fffc4 	addi	r4,r4,-1
   119bc:	000bdf80 	call	bdf8 <__udivsi3>
   119c0:	1007883a 	mov	r3,r2
   119c4:	e0bfff17 	ldw	r2,-4(fp)
   119c8:	10c5c83a 	sub	r2,r2,r3
   119cc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   119d0:	e0bffc17 	ldw	r2,-16(fp)
   119d4:	10800044 	addi	r2,r2,1
   119d8:	e0bffc15 	stw	r2,-16(fp)
   119dc:	e0fffc17 	ldw	r3,-16(fp)
   119e0:	e0bffe17 	ldw	r2,-8(fp)
   119e4:	18bfe616 	blt	r3,r2,11980 <__alt_data_end+0xf8011980>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   119e8:	014003f4 	movhi	r5,15
   119ec:	29509004 	addi	r5,r5,16960
   119f0:	e13ffd17 	ldw	r4,-12(fp)
   119f4:	00017b40 	call	17b4 <__mulsi3>
   119f8:	100b883a 	mov	r5,r2
   119fc:	01017db4 	movhi	r4,1526
   11a00:	21384004 	addi	r4,r4,-7936
   11a04:	000bdf80 	call	bdf8 <__udivsi3>
   11a08:	e17fff17 	ldw	r5,-4(fp)
   11a0c:	1009883a 	mov	r4,r2
   11a10:	00017b40 	call	17b4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11a14:	10bfffc4 	addi	r2,r2,-1
   11a18:	103ffe1e 	bne	r2,zero,11a14 <__alt_data_end+0xf8011a14>
   11a1c:	00000d06 	br	11a54 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   11a20:	014003f4 	movhi	r5,15
   11a24:	29509004 	addi	r5,r5,16960
   11a28:	e13ffd17 	ldw	r4,-12(fp)
   11a2c:	00017b40 	call	17b4 <__mulsi3>
   11a30:	100b883a 	mov	r5,r2
   11a34:	01017db4 	movhi	r4,1526
   11a38:	21384004 	addi	r4,r4,-7936
   11a3c:	000bdf80 	call	bdf8 <__udivsi3>
   11a40:	e17fff17 	ldw	r5,-4(fp)
   11a44:	1009883a 	mov	r4,r2
   11a48:	00017b40 	call	17b4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11a4c:	10bfffc4 	addi	r2,r2,-1
   11a50:	00bffe16 	blt	zero,r2,11a4c <__alt_data_end+0xf8011a4c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   11a54:	0005883a 	mov	r2,zero
}
   11a58:	e037883a 	mov	sp,fp
   11a5c:	dfc00117 	ldw	ra,4(sp)
   11a60:	df000017 	ldw	fp,0(sp)
   11a64:	dec00204 	addi	sp,sp,8
   11a68:	f800283a 	ret

00011a6c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11a6c:	defffa04 	addi	sp,sp,-24
   11a70:	dfc00515 	stw	ra,20(sp)
   11a74:	df000415 	stw	fp,16(sp)
   11a78:	df000404 	addi	fp,sp,16
   11a7c:	e13ffe15 	stw	r4,-8(fp)
   11a80:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11a84:	e0bfff17 	ldw	r2,-4(fp)
   11a88:	10800017 	ldw	r2,0(r2)
   11a8c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11a90:	e13ffe17 	ldw	r4,-8(fp)
   11a94:	00090640 	call	9064 <strlen>
   11a98:	10800044 	addi	r2,r2,1
   11a9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11aa0:	00000d06 	br	11ad8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11aa4:	e0bffc17 	ldw	r2,-16(fp)
   11aa8:	10800217 	ldw	r2,8(r2)
   11aac:	e0fffd17 	ldw	r3,-12(fp)
   11ab0:	180d883a 	mov	r6,r3
   11ab4:	e17ffe17 	ldw	r5,-8(fp)
   11ab8:	1009883a 	mov	r4,r2
   11abc:	0011d140 	call	11d14 <memcmp>
   11ac0:	1000021e 	bne	r2,zero,11acc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11ac4:	e0bffc17 	ldw	r2,-16(fp)
   11ac8:	00000706 	br	11ae8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11acc:	e0bffc17 	ldw	r2,-16(fp)
   11ad0:	10800017 	ldw	r2,0(r2)
   11ad4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11ad8:	e0fffc17 	ldw	r3,-16(fp)
   11adc:	e0bfff17 	ldw	r2,-4(fp)
   11ae0:	18bff01e 	bne	r3,r2,11aa4 <__alt_data_end+0xf8011aa4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11ae4:	0005883a 	mov	r2,zero
}
   11ae8:	e037883a 	mov	sp,fp
   11aec:	dfc00117 	ldw	ra,4(sp)
   11af0:	df000017 	ldw	fp,0(sp)
   11af4:	dec00204 	addi	sp,sp,8
   11af8:	f800283a 	ret

00011afc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11afc:	defffb04 	addi	sp,sp,-20
   11b00:	dfc00415 	stw	ra,16(sp)
   11b04:	df000315 	stw	fp,12(sp)
   11b08:	df000304 	addi	fp,sp,12
   11b0c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11b10:	d0a00617 	ldw	r2,-32744(gp)
   11b14:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11b18:	00003106 	br	11be0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   11b1c:	e0bffd17 	ldw	r2,-12(fp)
   11b20:	10800217 	ldw	r2,8(r2)
   11b24:	1009883a 	mov	r4,r2
   11b28:	00090640 	call	9064 <strlen>
   11b2c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11b30:	e0bffd17 	ldw	r2,-12(fp)
   11b34:	10c00217 	ldw	r3,8(r2)
   11b38:	e0bffe17 	ldw	r2,-8(fp)
   11b3c:	10bfffc4 	addi	r2,r2,-1
   11b40:	1885883a 	add	r2,r3,r2
   11b44:	10800003 	ldbu	r2,0(r2)
   11b48:	10803fcc 	andi	r2,r2,255
   11b4c:	1080201c 	xori	r2,r2,128
   11b50:	10bfe004 	addi	r2,r2,-128
   11b54:	10800bd8 	cmpnei	r2,r2,47
   11b58:	1000031e 	bne	r2,zero,11b68 <alt_find_file+0x6c>
    {
      len -= 1;
   11b5c:	e0bffe17 	ldw	r2,-8(fp)
   11b60:	10bfffc4 	addi	r2,r2,-1
   11b64:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11b68:	e0bffe17 	ldw	r2,-8(fp)
   11b6c:	e0ffff17 	ldw	r3,-4(fp)
   11b70:	1885883a 	add	r2,r3,r2
   11b74:	10800003 	ldbu	r2,0(r2)
   11b78:	10803fcc 	andi	r2,r2,255
   11b7c:	1080201c 	xori	r2,r2,128
   11b80:	10bfe004 	addi	r2,r2,-128
   11b84:	10800be0 	cmpeqi	r2,r2,47
   11b88:	1000081e 	bne	r2,zero,11bac <alt_find_file+0xb0>
   11b8c:	e0bffe17 	ldw	r2,-8(fp)
   11b90:	e0ffff17 	ldw	r3,-4(fp)
   11b94:	1885883a 	add	r2,r3,r2
   11b98:	10800003 	ldbu	r2,0(r2)
   11b9c:	10803fcc 	andi	r2,r2,255
   11ba0:	1080201c 	xori	r2,r2,128
   11ba4:	10bfe004 	addi	r2,r2,-128
   11ba8:	10000a1e 	bne	r2,zero,11bd4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   11bac:	e0bffd17 	ldw	r2,-12(fp)
   11bb0:	10800217 	ldw	r2,8(r2)
   11bb4:	e0fffe17 	ldw	r3,-8(fp)
   11bb8:	180d883a 	mov	r6,r3
   11bbc:	e17fff17 	ldw	r5,-4(fp)
   11bc0:	1009883a 	mov	r4,r2
   11bc4:	0011d140 	call	11d14 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11bc8:	1000021e 	bne	r2,zero,11bd4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11bcc:	e0bffd17 	ldw	r2,-12(fp)
   11bd0:	00000706 	br	11bf0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   11bd4:	e0bffd17 	ldw	r2,-12(fp)
   11bd8:	10800017 	ldw	r2,0(r2)
   11bdc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11be0:	e0fffd17 	ldw	r3,-12(fp)
   11be4:	d0a00604 	addi	r2,gp,-32744
   11be8:	18bfcc1e 	bne	r3,r2,11b1c <__alt_data_end+0xf8011b1c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11bec:	0005883a 	mov	r2,zero
}
   11bf0:	e037883a 	mov	sp,fp
   11bf4:	dfc00117 	ldw	ra,4(sp)
   11bf8:	df000017 	ldw	fp,0(sp)
   11bfc:	dec00204 	addi	sp,sp,8
   11c00:	f800283a 	ret

00011c04 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11c04:	defffa04 	addi	sp,sp,-24
   11c08:	dfc00515 	stw	ra,20(sp)
   11c0c:	df000415 	stw	fp,16(sp)
   11c10:	dc000315 	stw	r16,12(sp)
   11c14:	df000404 	addi	fp,sp,16
   11c18:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   11c1c:	00bffa04 	movi	r2,-24
   11c20:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11c24:	e03ffc15 	stw	zero,-16(fp)
   11c28:	00001d06 	br	11ca0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   11c2c:	04000074 	movhi	r16,1
   11c30:	840bc204 	addi	r16,r16,12040
   11c34:	e0bffc17 	ldw	r2,-16(fp)
   11c38:	01400304 	movi	r5,12
   11c3c:	1009883a 	mov	r4,r2
   11c40:	00017b40 	call	17b4 <__mulsi3>
   11c44:	8085883a 	add	r2,r16,r2
   11c48:	10800017 	ldw	r2,0(r2)
   11c4c:	1000111e 	bne	r2,zero,11c94 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   11c50:	04000074 	movhi	r16,1
   11c54:	840bc204 	addi	r16,r16,12040
   11c58:	e0bffc17 	ldw	r2,-16(fp)
   11c5c:	01400304 	movi	r5,12
   11c60:	1009883a 	mov	r4,r2
   11c64:	00017b40 	call	17b4 <__mulsi3>
   11c68:	8085883a 	add	r2,r16,r2
   11c6c:	e0fffe17 	ldw	r3,-8(fp)
   11c70:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11c74:	d0e00a17 	ldw	r3,-32728(gp)
   11c78:	e0bffc17 	ldw	r2,-16(fp)
   11c7c:	1880020e 	bge	r3,r2,11c88 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   11c80:	e0bffc17 	ldw	r2,-16(fp)
   11c84:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   11c88:	e0bffc17 	ldw	r2,-16(fp)
   11c8c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   11c90:	00000606 	br	11cac <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11c94:	e0bffc17 	ldw	r2,-16(fp)
   11c98:	10800044 	addi	r2,r2,1
   11c9c:	e0bffc15 	stw	r2,-16(fp)
   11ca0:	e0bffc17 	ldw	r2,-16(fp)
   11ca4:	10800810 	cmplti	r2,r2,32
   11ca8:	103fe01e 	bne	r2,zero,11c2c <__alt_data_end+0xf8011c2c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11cac:	e0bffd17 	ldw	r2,-12(fp)
}
   11cb0:	e6ffff04 	addi	sp,fp,-4
   11cb4:	dfc00217 	ldw	ra,8(sp)
   11cb8:	df000117 	ldw	fp,4(sp)
   11cbc:	dc000017 	ldw	r16,0(sp)
   11cc0:	dec00304 	addi	sp,sp,12
   11cc4:	f800283a 	ret

00011cc8 <atexit>:
   11cc8:	200b883a 	mov	r5,r4
   11ccc:	000f883a 	mov	r7,zero
   11cd0:	000d883a 	mov	r6,zero
   11cd4:	0009883a 	mov	r4,zero
   11cd8:	0011d901 	jmpi	11d90 <__register_exitproc>

00011cdc <exit>:
   11cdc:	defffe04 	addi	sp,sp,-8
   11ce0:	000b883a 	mov	r5,zero
   11ce4:	dc000015 	stw	r16,0(sp)
   11ce8:	dfc00115 	stw	ra,4(sp)
   11cec:	2021883a 	mov	r16,r4
   11cf0:	0011ea80 	call	11ea8 <__call_exitprocs>
   11cf4:	00800074 	movhi	r2,1
   11cf8:	10908204 	addi	r2,r2,16904
   11cfc:	11000017 	ldw	r4,0(r2)
   11d00:	20800f17 	ldw	r2,60(r4)
   11d04:	10000126 	beq	r2,zero,11d0c <exit+0x30>
   11d08:	103ee83a 	callr	r2
   11d0c:	8009883a 	mov	r4,r16
   11d10:	00120280 	call	12028 <_exit>

00011d14 <memcmp>:
   11d14:	01c000c4 	movi	r7,3
   11d18:	3980192e 	bgeu	r7,r6,11d80 <memcmp+0x6c>
   11d1c:	2144b03a 	or	r2,r4,r5
   11d20:	11c4703a 	and	r2,r2,r7
   11d24:	10000f26 	beq	r2,zero,11d64 <memcmp+0x50>
   11d28:	20800003 	ldbu	r2,0(r4)
   11d2c:	28c00003 	ldbu	r3,0(r5)
   11d30:	10c0151e 	bne	r2,r3,11d88 <memcmp+0x74>
   11d34:	31bfff84 	addi	r6,r6,-2
   11d38:	01ffffc4 	movi	r7,-1
   11d3c:	00000406 	br	11d50 <memcmp+0x3c>
   11d40:	20800003 	ldbu	r2,0(r4)
   11d44:	28c00003 	ldbu	r3,0(r5)
   11d48:	31bfffc4 	addi	r6,r6,-1
   11d4c:	10c00e1e 	bne	r2,r3,11d88 <memcmp+0x74>
   11d50:	21000044 	addi	r4,r4,1
   11d54:	29400044 	addi	r5,r5,1
   11d58:	31fff91e 	bne	r6,r7,11d40 <__alt_data_end+0xf8011d40>
   11d5c:	0005883a 	mov	r2,zero
   11d60:	f800283a 	ret
   11d64:	20c00017 	ldw	r3,0(r4)
   11d68:	28800017 	ldw	r2,0(r5)
   11d6c:	18bfee1e 	bne	r3,r2,11d28 <__alt_data_end+0xf8011d28>
   11d70:	31bfff04 	addi	r6,r6,-4
   11d74:	21000104 	addi	r4,r4,4
   11d78:	29400104 	addi	r5,r5,4
   11d7c:	39bff936 	bltu	r7,r6,11d64 <__alt_data_end+0xf8011d64>
   11d80:	303fe91e 	bne	r6,zero,11d28 <__alt_data_end+0xf8011d28>
   11d84:	003ff506 	br	11d5c <__alt_data_end+0xf8011d5c>
   11d88:	10c5c83a 	sub	r2,r2,r3
   11d8c:	f800283a 	ret

00011d90 <__register_exitproc>:
   11d90:	defffa04 	addi	sp,sp,-24
   11d94:	dc000315 	stw	r16,12(sp)
   11d98:	04000074 	movhi	r16,1
   11d9c:	84108204 	addi	r16,r16,16904
   11da0:	80c00017 	ldw	r3,0(r16)
   11da4:	dc400415 	stw	r17,16(sp)
   11da8:	dfc00515 	stw	ra,20(sp)
   11dac:	18805217 	ldw	r2,328(r3)
   11db0:	2023883a 	mov	r17,r4
   11db4:	10003726 	beq	r2,zero,11e94 <__register_exitproc+0x104>
   11db8:	10c00117 	ldw	r3,4(r2)
   11dbc:	010007c4 	movi	r4,31
   11dc0:	20c00e16 	blt	r4,r3,11dfc <__register_exitproc+0x6c>
   11dc4:	1a000044 	addi	r8,r3,1
   11dc8:	8800221e 	bne	r17,zero,11e54 <__register_exitproc+0xc4>
   11dcc:	18c00084 	addi	r3,r3,2
   11dd0:	18c7883a 	add	r3,r3,r3
   11dd4:	18c7883a 	add	r3,r3,r3
   11dd8:	12000115 	stw	r8,4(r2)
   11ddc:	10c7883a 	add	r3,r2,r3
   11de0:	19400015 	stw	r5,0(r3)
   11de4:	0005883a 	mov	r2,zero
   11de8:	dfc00517 	ldw	ra,20(sp)
   11dec:	dc400417 	ldw	r17,16(sp)
   11df0:	dc000317 	ldw	r16,12(sp)
   11df4:	dec00604 	addi	sp,sp,24
   11df8:	f800283a 	ret
   11dfc:	00800034 	movhi	r2,0
   11e00:	10863b04 	addi	r2,r2,6380
   11e04:	10002626 	beq	r2,zero,11ea0 <__register_exitproc+0x110>
   11e08:	01006404 	movi	r4,400
   11e0c:	d9400015 	stw	r5,0(sp)
   11e10:	d9800115 	stw	r6,4(sp)
   11e14:	d9c00215 	stw	r7,8(sp)
   11e18:	00018ec0 	call	18ec <malloc>
   11e1c:	d9400017 	ldw	r5,0(sp)
   11e20:	d9800117 	ldw	r6,4(sp)
   11e24:	d9c00217 	ldw	r7,8(sp)
   11e28:	10001d26 	beq	r2,zero,11ea0 <__register_exitproc+0x110>
   11e2c:	81000017 	ldw	r4,0(r16)
   11e30:	10000115 	stw	zero,4(r2)
   11e34:	02000044 	movi	r8,1
   11e38:	22405217 	ldw	r9,328(r4)
   11e3c:	0007883a 	mov	r3,zero
   11e40:	12400015 	stw	r9,0(r2)
   11e44:	20805215 	stw	r2,328(r4)
   11e48:	10006215 	stw	zero,392(r2)
   11e4c:	10006315 	stw	zero,396(r2)
   11e50:	883fde26 	beq	r17,zero,11dcc <__alt_data_end+0xf8011dcc>
   11e54:	18c9883a 	add	r4,r3,r3
   11e58:	2109883a 	add	r4,r4,r4
   11e5c:	1109883a 	add	r4,r2,r4
   11e60:	21802215 	stw	r6,136(r4)
   11e64:	01800044 	movi	r6,1
   11e68:	12406217 	ldw	r9,392(r2)
   11e6c:	30cc983a 	sll	r6,r6,r3
   11e70:	4992b03a 	or	r9,r9,r6
   11e74:	12406215 	stw	r9,392(r2)
   11e78:	21c04215 	stw	r7,264(r4)
   11e7c:	01000084 	movi	r4,2
   11e80:	893fd21e 	bne	r17,r4,11dcc <__alt_data_end+0xf8011dcc>
   11e84:	11006317 	ldw	r4,396(r2)
   11e88:	218cb03a 	or	r6,r4,r6
   11e8c:	11806315 	stw	r6,396(r2)
   11e90:	003fce06 	br	11dcc <__alt_data_end+0xf8011dcc>
   11e94:	18805304 	addi	r2,r3,332
   11e98:	18805215 	stw	r2,328(r3)
   11e9c:	003fc606 	br	11db8 <__alt_data_end+0xf8011db8>
   11ea0:	00bfffc4 	movi	r2,-1
   11ea4:	003fd006 	br	11de8 <__alt_data_end+0xf8011de8>

00011ea8 <__call_exitprocs>:
   11ea8:	defff504 	addi	sp,sp,-44
   11eac:	df000915 	stw	fp,36(sp)
   11eb0:	dd400615 	stw	r21,24(sp)
   11eb4:	dc800315 	stw	r18,12(sp)
   11eb8:	dfc00a15 	stw	ra,40(sp)
   11ebc:	ddc00815 	stw	r23,32(sp)
   11ec0:	dd800715 	stw	r22,28(sp)
   11ec4:	dd000515 	stw	r20,20(sp)
   11ec8:	dcc00415 	stw	r19,16(sp)
   11ecc:	dc400215 	stw	r17,8(sp)
   11ed0:	dc000115 	stw	r16,4(sp)
   11ed4:	d9000015 	stw	r4,0(sp)
   11ed8:	2839883a 	mov	fp,r5
   11edc:	04800044 	movi	r18,1
   11ee0:	057fffc4 	movi	r21,-1
   11ee4:	00800074 	movhi	r2,1
   11ee8:	10908204 	addi	r2,r2,16904
   11eec:	12000017 	ldw	r8,0(r2)
   11ef0:	45005217 	ldw	r20,328(r8)
   11ef4:	44c05204 	addi	r19,r8,328
   11ef8:	a0001c26 	beq	r20,zero,11f6c <__call_exitprocs+0xc4>
   11efc:	a0800117 	ldw	r2,4(r20)
   11f00:	15ffffc4 	addi	r23,r2,-1
   11f04:	b8000d16 	blt	r23,zero,11f3c <__call_exitprocs+0x94>
   11f08:	14000044 	addi	r16,r2,1
   11f0c:	8421883a 	add	r16,r16,r16
   11f10:	8421883a 	add	r16,r16,r16
   11f14:	84402004 	addi	r17,r16,128
   11f18:	a463883a 	add	r17,r20,r17
   11f1c:	a421883a 	add	r16,r20,r16
   11f20:	e0001e26 	beq	fp,zero,11f9c <__call_exitprocs+0xf4>
   11f24:	80804017 	ldw	r2,256(r16)
   11f28:	e0801c26 	beq	fp,r2,11f9c <__call_exitprocs+0xf4>
   11f2c:	bdffffc4 	addi	r23,r23,-1
   11f30:	843fff04 	addi	r16,r16,-4
   11f34:	8c7fff04 	addi	r17,r17,-4
   11f38:	bd7ff91e 	bne	r23,r21,11f20 <__alt_data_end+0xf8011f20>
   11f3c:	00800034 	movhi	r2,0
   11f40:	10864004 	addi	r2,r2,6400
   11f44:	10000926 	beq	r2,zero,11f6c <__call_exitprocs+0xc4>
   11f48:	a0800117 	ldw	r2,4(r20)
   11f4c:	1000301e 	bne	r2,zero,12010 <__call_exitprocs+0x168>
   11f50:	a0800017 	ldw	r2,0(r20)
   11f54:	10003226 	beq	r2,zero,12020 <__call_exitprocs+0x178>
   11f58:	a009883a 	mov	r4,r20
   11f5c:	98800015 	stw	r2,0(r19)
   11f60:	00019000 	call	1900 <free>
   11f64:	9d000017 	ldw	r20,0(r19)
   11f68:	a03fe41e 	bne	r20,zero,11efc <__alt_data_end+0xf8011efc>
   11f6c:	dfc00a17 	ldw	ra,40(sp)
   11f70:	df000917 	ldw	fp,36(sp)
   11f74:	ddc00817 	ldw	r23,32(sp)
   11f78:	dd800717 	ldw	r22,28(sp)
   11f7c:	dd400617 	ldw	r21,24(sp)
   11f80:	dd000517 	ldw	r20,20(sp)
   11f84:	dcc00417 	ldw	r19,16(sp)
   11f88:	dc800317 	ldw	r18,12(sp)
   11f8c:	dc400217 	ldw	r17,8(sp)
   11f90:	dc000117 	ldw	r16,4(sp)
   11f94:	dec00b04 	addi	sp,sp,44
   11f98:	f800283a 	ret
   11f9c:	a0800117 	ldw	r2,4(r20)
   11fa0:	80c00017 	ldw	r3,0(r16)
   11fa4:	10bfffc4 	addi	r2,r2,-1
   11fa8:	15c01426 	beq	r2,r23,11ffc <__call_exitprocs+0x154>
   11fac:	80000015 	stw	zero,0(r16)
   11fb0:	183fde26 	beq	r3,zero,11f2c <__alt_data_end+0xf8011f2c>
   11fb4:	95c8983a 	sll	r4,r18,r23
   11fb8:	a0806217 	ldw	r2,392(r20)
   11fbc:	a5800117 	ldw	r22,4(r20)
   11fc0:	2084703a 	and	r2,r4,r2
   11fc4:	10000b26 	beq	r2,zero,11ff4 <__call_exitprocs+0x14c>
   11fc8:	a0806317 	ldw	r2,396(r20)
   11fcc:	2088703a 	and	r4,r4,r2
   11fd0:	20000c1e 	bne	r4,zero,12004 <__call_exitprocs+0x15c>
   11fd4:	89400017 	ldw	r5,0(r17)
   11fd8:	d9000017 	ldw	r4,0(sp)
   11fdc:	183ee83a 	callr	r3
   11fe0:	a0800117 	ldw	r2,4(r20)
   11fe4:	15bfbf1e 	bne	r2,r22,11ee4 <__alt_data_end+0xf8011ee4>
   11fe8:	98800017 	ldw	r2,0(r19)
   11fec:	153fcf26 	beq	r2,r20,11f2c <__alt_data_end+0xf8011f2c>
   11ff0:	003fbc06 	br	11ee4 <__alt_data_end+0xf8011ee4>
   11ff4:	183ee83a 	callr	r3
   11ff8:	003ff906 	br	11fe0 <__alt_data_end+0xf8011fe0>
   11ffc:	a5c00115 	stw	r23,4(r20)
   12000:	003feb06 	br	11fb0 <__alt_data_end+0xf8011fb0>
   12004:	89000017 	ldw	r4,0(r17)
   12008:	183ee83a 	callr	r3
   1200c:	003ff406 	br	11fe0 <__alt_data_end+0xf8011fe0>
   12010:	a0800017 	ldw	r2,0(r20)
   12014:	a027883a 	mov	r19,r20
   12018:	1029883a 	mov	r20,r2
   1201c:	003fb606 	br	11ef8 <__alt_data_end+0xf8011ef8>
   12020:	0005883a 	mov	r2,zero
   12024:	003ffb06 	br	12014 <__alt_data_end+0xf8012014>

00012028 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12028:	defffd04 	addi	sp,sp,-12
   1202c:	df000215 	stw	fp,8(sp)
   12030:	df000204 	addi	fp,sp,8
   12034:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   12038:	0001883a 	nop
   1203c:	e0bfff17 	ldw	r2,-4(fp)
   12040:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   12044:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   12048:	10000226 	beq	r2,zero,12054 <_exit+0x2c>
    ALT_SIM_FAIL();
   1204c:	002af070 	cmpltui	zero,zero,43969
   12050:	00000106 	br	12058 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   12054:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12058:	003fff06 	br	12058 <__alt_data_end+0xf8012058>
